[{"Name":"OnPlayerSpectate","Parameters":"(BasePlayer,string)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void StartSpectating()\r\n\t{\r\n\t\tif (!IsSpectating() && Interface.CallHook(\"OnPlayerSpectate\", this, spectateFilter) == null)\r\n\t\t{\r\n\t\t\tSetPlayerFlag(PlayerFlags.Spectating, b: true);\r\n\t\t\tUnityEngine.TransformEx.SetLayerRecursive(base.gameObject, 10);\r\n\t\t\tCancelInvoke(InventoryUpdate);\r\n\t\t\tChatMessage(\"Becoming Spectator\");\r\n\t\t\tUpdateSpectateTarget(spectateFilter);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFuelConsumed","Parameters":"(BaseOven,Item,ItemModBurnable)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic void ConsumeFuel(Item fuel, ItemModBurnable burnable)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnFuelConsume\", this, fuel, burnable) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (allowByproductCreation && burnable.byproductItem != null && UnityEngine.Random.Range(0f, 1f) > burnable.byproductChance)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(burnable.byproductItem, burnable.byproductAmount * GetCharcoalRate(), 0uL);\r\n\t\t\tif (!item.MoveToContainer(base.inventory))\r\n\t\t\t{\r\n\t\t\t\tOvenFull();\r\n\t\t\t\titem.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (fuel.amount <= GetFuelRate())\r\n\t\t{\r\n\t\t\tfuel.Remove();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint fuelRate = GetFuelRate();\r\n\t\tfuel.UseItem(fuelRate);\r\n\t\tFacepunch.Rust.Analytics.Azure.AddPendingItems(this, fuel.info.shortname, fuelRate, \"smelt\");\r\n\t\tfuel.fuel = burnable.fuelAmount;\r\n\t\tfuel.MarkDirty();\r\n\t\tInterface.CallHook(\"OnFuelConsumed\", this, fuel, burnable);\r\n\t}\r\n"},{"Name":"OnNpcConversationStart","Parameters":"(NPCTalking,BasePlayer,ConversationData)","ClassName":"NPCTalking","MethodCode":"\r\n\tpublic void Server_BeginTalking(BasePlayer ply)\r\n\t{\r\n\t\tif (!CanTalkTo(ply))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tCleanupConversingPlayers();\r\n\t\tOnConversationStarted(ply);\r\n\t\tConversationData conversationFor = GetConversationFor(ply);\r\n\t\tif (conversationFor != null)\r\n\t\t{\r\n\t\t\tif (conversingPlayers.Contains(ply))\r\n\t\t\t{\r\n\t\t\t\tOnConversationEnded(ply);\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnNpcConversationStart\", this, ply, conversationFor) == null)\r\n\t\t\t{\r\n\t\t\t\tconversingPlayers.Add(ply);\r\n\t\t\t\tUpdateFlags();\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"Client_StartConversation\", ply), GetConversationIndex(conversationFor.shortname), GetConversationStartSpeech(ply));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCrateHack","Parameters":"(HackableLockedCrate)","ClassName":"HackableLockedCrate","MethodCode":"\r\n\tpublic void StartHacking()\r\n\t{\r\n\t\tInterface.CallHook(\"OnCrateHack\", this);\r\n\t\tBroadcastEntityMessage(\"HackingStarted\", 20f, 256);\r\n\t\tSetFlag(Flags.Reserved1, b: true);\r\n\t\tInvokeRepeating(HackProgress, 1f, 1f);\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"UpdateHackProgress\"), 0, (int)requiredHackSeconds);\r\n\t\tRefreshDecay();\r\n\t}\r\n"},{"Name":"CanAffordToPlace","Parameters":"(BasePlayer,Planner,Construction)","ClassName":"Planner","MethodCode":"\r\n\tpublic bool CanAffordToPlace(Construction component)\r\n\t{\r\n\t\tif (isTypeDeployable)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanAffordToPlace\", ownerPlayer, this, component);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (ownerPlayer.IsInCreativeMode && Creative.freeBuild)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tforeach (ItemAmount item in component.defaultGrade.CostToBuild())\r\n\t\t{\r\n\t\t\tif ((float)ownerPlayer.inventory.GetAmount(item.itemDef.itemid) < item.amount)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnDoorKnocked","Parameters":"(DoorKnocker,BasePlayer)","ClassName":"DoorKnocker","MethodCode":"\r\n\tpublic void Knock(BasePlayer player)\r\n\t{\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"ClientKnock\"), player.transform.position);\r\n\t\tInterface.CallHook(\"OnDoorKnocked\", this, player);\r\n\t}\r\n"},{"Name":"CanLock","Parameters":"(BasePlayer,ModularCar,ModularCarCodeLock)","ClassName":"ModularCarCodeLock","MethodCode":"\r\n\tpublic bool HasLockPermission(BasePlayer player)\r\n\t{\r\n\t\tif (!HasALock)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!player.IsValid() || player.IsDead())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanLock\", player, owner, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn whitelistPlayers.Contains(player.userID);\r\n\t}\r\n"},{"Name":"OnGrowableGather","Parameters":"(GrowableEntity,BasePlayer,bool)","ClassName":"GrowableEntity","MethodCode":"\r\n\tpublic void PickFruit(BasePlayer player, bool eat = false)\r\n\t{\r\n\t\tif (!CanPick() || Interface.CallHook(\"OnGrowableGather\", this, player, eat) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tharvests++;\r\n\t\tGiveFruit(player, CurrentPickAmount, eat);\r\n\t\tRandomItemDispenser randomItemDispenser = PrefabAttribute.server.Find<RandomItemDispenser>(prefabID);\r\n\t\tif (randomItemDispenser != null)\r\n\t\t{\r\n\t\t\trandomItemDispenser.DistributeItems(player, base.transform.position);\r\n\t\t}\r\n\t\tResetSeason();\r\n\t\tif (Properties.pickEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(Properties.pickEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t}\r\n\t\tif (harvests >= Properties.maxHarvests)\r\n\t\t{\r\n\t\t\tif (Properties.disappearAfterHarvest)\r\n\t\t\t{\r\n\t\t\t\tTellPlanter();\r\n\t\t\t\tDie();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tChangeState(PlantProperties.State.Dying, resetAge: true);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tChangeState(PlantProperties.State.Mature, resetAge: true);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeHomingTargeted","Parameters":"(PlayerHelicopter)","ClassName":"PlayerHelicopter","MethodCode":"\r\n\tpublic override bool IsValidHomingTarget()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeHomingTargeted\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn IsOn();\r\n\t}\r\n"},{"Name":"OnItemUnlock","Parameters":"(Item)","ClassName":"Item","MethodCode":"\r\n\tpublic void LockUnlock(bool bNewState)\r\n\t{\r\n\t\tif (HasFlag(Flag.IsLocked) != bNewState && (!bNewState || Interface.CallHook(\"OnItemLock\", this) == null) && (bNewState || Interface.CallHook(\"OnItemUnlock\", this) == null))\r\n\t\t{\r\n\t\t\tSetFlag(Flag.IsLocked, bNewState);\r\n\t\t\tMarkDirty();\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseHelicopter","Parameters":"(BasePlayer,CH47HelicopterAIController)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic override void AttemptMount(BasePlayer player, bool doMountChecks = true)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanUseHelicopter\", player, this) == null)\r\n\t\t{\r\n\t\t\tbase.AttemptMount(player, doMountChecks);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTrapSnapped","Parameters":"(BaseTrapTrigger,UnityEngine.GameObject,UnityEngine.Collider)","ClassName":"BaseTrapTrigger","MethodCode":"\r\n\tinternal override void OnObjectAdded(GameObject obj, Collider col)\r\n\t{\r\n\t\tInterface.CallHook(\"OnTrapSnapped\", this, obj, col);\r\n\t\tbase.OnObjectAdded(obj, col);\r\n\t\t_trap.ObjectEntered(obj);\r\n\t}\r\n"},{"Name":"OnBoomboxToggle","Parameters":"(BoomBox,BasePlayer,bool)","ClassName":"BoomBox","MethodCode":"\r\n\tpublic void ServerTogglePlay(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif (IsPowered())\r\n\t\t{\r\n\t\t\tbool flag = msg.read.ReadByte() == 1;\r\n\t\t\tif (Interface.CallHook(\"OnBoomboxToggle\", this, msg.player, flag) == null)\r\n\t\t\t{\r\n\t\t\t\tServerTogglePlay(flag);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDemoRecordingStopped","Parameters":"(string,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void StopDemoRecording()\r\n\t{\r\n\t\tif (net != null && net.connection != null && net.connection.IsRecording && Interface.CallHook(\"OnDemoRecordingStop\", net.connection.recordFilename, this) == null)\r\n\t\t{\r\n\t\t\tDebug.Log(ToString() + \" recording stopped: \" + net.connection.RecordFilename);\r\n\t\t\tnet.connection.StopRecording();\r\n\t\t\tCancelInvoke(MonitorDemoRecording);\r\n\t\t\tInterface.CallHook(\"OnDemoRecordingStopped\", net.connection.recordFilename, this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCodeEntered","Parameters":"(CodeLock,BasePlayer,string)","ClassName":"CodeLock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f, CheckParent = true)]\r\n\t[RPC_Server]\r\n\tprivate void UnlockWithCode(RPCMessage rpc)\r\n\t{\r\n\t\tif (!rpc.player.CanInteract() || !IsLocked() || IsCodeEntryBlocked())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = rpc.read.String();\r\n\t\tif (Interface.CallHook(\"OnCodeEntered\", this, rpc.player, text) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = text == guestCode;\r\n\t\tbool flag2 = text == code;\r\n\t\tif (!(text == code) && (!hasGuestCode || !(text == guestCode)))\r\n\t\t{\r\n\t\t\tif (UnityEngine.Time.realtimeSinceStartup > lastWrongTime + 60f)\r\n\t\t\t{\r\n\t\t\t\twrongCodes = 0;\r\n\t\t\t}\r\n\t\t\tDoEffect(effectDenied.resourcePath);\r\n\t\t\tDoEffect(effectShock.resourcePath);\r\n\t\t\trpc.player.Hurt((float)(wrongCodes + 1) * 5f, DamageType.ElectricShock, this, useProtection: false);\r\n\t\t\twrongCodes++;\r\n\t\t\tif (wrongCodes > 5)\r\n\t\t\t{\r\n\t\t\t\trpc.player.ShowToast(GameTip.Styles.Red_Normal, blockwarning, false);\r\n\t\t\t}\r\n\t\t\tif ((float)wrongCodes >= maxFailedAttempts)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved11, b: true);\r\n\t\t\t\tInvoke(ClearCodeEntryBlocked, lockoutCooldown);\r\n\t\t\t}\r\n\t\t\tlastWrongTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSendNetworkUpdate();\r\n\t\tif (flag2)\r\n\t\t{\r\n\t\t\tif (!whitelistPlayers.Contains(rpc.player.userID))\r\n\t\t\t{\r\n\t\t\t\tDoEffect(effectCodeChanged.resourcePath);\r\n\t\t\t\twhitelistPlayers.Add(rpc.player.userID);\r\n\t\t\t\twrongCodes = 0;\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnCodeLockEntered(rpc.player, this, isGuest: false);\r\n\t\t}\r\n\t\telse if (flag && !guestPlayers.Contains(rpc.player.userID))\r\n\t\t{\r\n\t\t\tDoEffect(effectCodeChanged.resourcePath);\r\n\t\t\tguestPlayers.Add(rpc.player.userID);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnCodeLockEntered(rpc.player, this, isGuest: true);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCodeChanged","Parameters":"(BasePlayer,CodeLock,string,bool)","ClassName":"CodeLock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f, CheckParent = true)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_ChangeCode(RPCMessage rpc)\r\n\t{\r\n\t\tif (!rpc.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = rpc.read.String();\r\n\t\tbool flag = rpc.read.Bit();\r\n\t\tif (!IsLocked() && text.Length == 4 && text.IsNumeric() && !(!hasCode && flag) && Interface.CallHook(\"CanChangeCode\", rpc.player, this, text, flag) == null)\r\n\t\t{\r\n\t\t\tif (!hasCode && !flag)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Locked, b: true);\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnCodelockChanged(rpc.player, this, flag ? guestCode : code, text, flag);\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tcode = text;\r\n\t\t\t\thasCode = code.Length > 0;\r\n\t\t\t\twhitelistPlayers.Clear();\r\n\t\t\t\twhitelistPlayers.Add(rpc.player.userID);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tguestCode = text;\r\n\t\t\t\thasGuestCode = guestCode.Length > 0;\r\n\t\t\t\tguestPlayers.Clear();\r\n\t\t\t\tguestPlayers.Add(rpc.player.userID);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnCodeChanged\", rpc.player, this, text, flag);\r\n\t\t\tDoEffect(effectCodeChanged.resourcePath);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemCraftFinished","Parameters":"(ItemCraftTask,Item,ItemCrafter)","ClassName":"ItemCrafter","MethodCode":"\r\n\tpublic void FinishCrafting(ItemCraftTask task)\r\n\t{\r\n\t\ttask.amount--;\r\n\t\ttask.numCrafted++;\r\n\t\tulong skin = ItemDefinition.FindSkin(task.blueprint.targetItem.itemid, task.skinID);\r\n\t\tItem item2 = ItemManager.CreateByItemID(task.blueprint.targetItem.itemid, 1, skin);\r\n\t\titem2.amount = task.blueprint.amountToCreate;\r\n\t\tint amount = item2.amount;\r\n\t\t_ = owner.currentCraftLevel;\r\n\t\tbool inSafezone = owner.InSafeZone();\r\n\t\tif (item2.hasCondition && task.conditionScale != 1f)\r\n\t\t{\r\n\t\t\titem2.maxCondition *= task.conditionScale;\r\n\t\t\titem2.condition = item2.maxCondition;\r\n\t\t}\r\n\t\titem2.OnVirginSpawn();\r\n\t\tforeach (ItemAmount ingredient in task.blueprint.ingredients)\r\n\t\t{\r\n\t\t\tint num = (int)ingredient.amount;\r\n\t\t\tif (task.takenItems == null)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tforeach (Item takenItem in task.takenItems)\r\n\t\t\t{\r\n\t\t\t\tif (takenItem.info == ingredient.itemDef)\r\n\t\t\t\t{\r\n\t\t\t\t\tint num2 = Mathf.Min(takenItem.amount, num);\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnCraftMaterialConsumed(takenItem.info.shortname, num, base.baseEntity, task.workbenchEntity, inSafezone, item2.info.shortname);\r\n\t\t\t\t\ttakenItem.UseItem(num);\r\n\t\t\t\t\tnum -= num2;\r\n\t\t\t\t}\r\n\t\t\t\tif (num <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ttask.takenItems?.RemoveAll((Item item) => item.amount == 0);\r\n\t\tFacepunch.Rust.Analytics.Server.Crafting(task.blueprint.targetItem.shortname, task.skinID);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnCraftItem(item2.info.shortname, item2.amount, base.baseEntity, task.workbenchEntity, inSafezone);\r\n\t\towner.Command(\"note.craft_done\", task.taskUID, 1, task.amount);\r\n\t\tInterface.CallHook(\"OnItemCraftFinished\", task, item2, this);\r\n\t\tif (task.instanceData != null)\r\n\t\t{\r\n\t\t\titem2.instanceData = task.instanceData;\r\n\t\t}\r\n\t\tif (!string.IsNullOrEmpty(task.blueprint.UnlockAchievment))\r\n\t\t{\r\n\t\t\towner.GiveAchievement(task.blueprint.UnlockAchievment);\r\n\t\t}\r\n\t\towner.ProcessMissionEvent(BaseMission.MissionEventType.CRAFT_ITEM, item2.info.itemid, amount);\r\n\t\tif (owner.inventory.GiveItem(item2))\r\n\t\t{\r\n\t\t\towner.Command(\"note.inv\", item2.info.itemid, amount);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemContainer itemContainer = containers.First();\r\n\t\towner.Command(\"note.inv\", item2.info.itemid, amount);\r\n\t\towner.Command(\"note.inv\", item2.info.itemid, -item2.amount);\r\n\t\titem2.Drop(itemContainer.dropPosition, itemContainer.dropVelocity);\r\n\t}\r\n"},{"Name":"OnItemFilter","Parameters":"(Item,StorageContainer,int)","ClassName":"StorageContainer","MethodCode":"\r\n\tpublic virtual bool ItemFilter(Item item, int targetSlot)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnItemFilter\", item, this, targetSlot);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (onlyAcceptCategory == ItemCategory.All)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn item.info.category == onlyAcceptCategory;\r\n\t}\r\n"},{"Name":"CanUnlock","Parameters":"(BasePlayer,ModularCarCodeLock,string)","ClassName":"ModularCarCodeLock","MethodCode":"\r\n\tpublic bool TryOpenWithCode(BasePlayer player, string codeEntered)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUnlock\", player, this, codeEntered);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (CodeEntryBlocked(player))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!(codeEntered == Code))\r\n\t\t{\r\n\t\t\tif (Time.realtimeSinceStartup > lastWrongTime + 60f)\r\n\t\t\t{\r\n\t\t\t\twrongCodes = 0;\r\n\t\t\t}\r\n\t\t\tplayer.Hurt((float)(wrongCodes + 1) * 5f, DamageType.ElectricShock, owner, useProtection: false);\r\n\t\t\twrongCodes++;\r\n\t\t\tif (wrongCodes > 5)\r\n\t\t\t{\r\n\t\t\t\tplayer.ShowToast(GameTip.Styles.Red_Normal, CodeLock.blockwarning, false);\r\n\t\t\t}\r\n\t\t\tif ((float)wrongCodes >= CodeLock.maxFailedAttempts)\r\n\t\t\t{\r\n\t\t\t\towner.SetFlag(BaseEntity.Flags.Reserved10, b: true);\r\n\t\t\t\towner.Invoke(ClearCodeEntryBlocked, CodeLock.lockoutCooldown);\r\n\t\t\t}\r\n\t\t\tlastWrongTime = Time.realtimeSinceStartup;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (TryAddPlayer(player.userID))\r\n\t\t{\r\n\t\t\twrongCodes = 0;\r\n\t\t}\r\n\t\towner.SendNetworkUpdate();\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnSignalBroadcast","Parameters":"(BaseEntity)","ClassName":"BaseEntity","MethodCode":"\r\n\tpublic void SignalBroadcast(Signal signal, Connection sourceConnection = null)\r\n\t{\r\n\t\tif (net != null && net.group != null && !base.limitNetworking && Interface.CallHook(\"OnSignalBroadcast\", this) == null)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"SignalFromServer\", this, SendMethod.Unreliable, Priority.Immediate), (int)signal, sourceConnection?.userid ?? 0);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnAdventGiftAward","Parameters":"(AdventCalendar,BasePlayer)","ClassName":"AdventCalendar","MethodCode":"\r\n\tpublic void AwardGift(BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnAdventGiftAward\", this, player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDateTime now = DateTime.Now;\r\n\t\tint num = ((overrideAdventCalendarDay > 0) ? overrideAdventCalendarDay : now.Day) - startDay;\r\n\t\tif (((overrideAdventCalendarMonth > 0) ? overrideAdventCalendarMonth : now.Month) == startMonth && num >= 0 && num < days.Length)\r\n\t\t{\r\n\t\t\tif (!playerRewardHistory.ContainsKey(player.userID))\r\n\t\t\t{\r\n\t\t\t\tplayerRewardHistory.Add(player.userID, new List<int>());\r\n\t\t\t}\r\n\t\t\tplayerRewardHistory[player.userID].Add(num);\r\n\t\t\tEffect.server.Run(giftEffect.resourcePath, player.transform.position);\r\n\t\t\tif (num >= 0 && num < crosses.Length)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(boxCloseEffect.resourcePath, base.transform.position + Vector3.up * 1.5f);\r\n\t\t\t}\r\n\t\t\tDayReward dayReward = days[num];\r\n\t\t\tfor (int i = 0; i < dayReward.rewards.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tItemAmount itemAmount = dayReward.rewards[i];\r\n\t\t\t\tplayer.GiveItem(ItemManager.CreateByItemID(itemAmount.itemid, Mathf.CeilToInt(itemAmount.amount), 0uL), GiveItemReason.PickedUp);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnAdventGiftAwarded\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUnlock","Parameters":"(BasePlayer,KeyLock)","ClassName":"KeyLock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f, CheckParent = true)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_Unlock(RPCMessage rpc)\r\n\t{\r\n\t\tif (rpc.player.CanInteract() && IsLocked() && Interface.CallHook(\"CanUnlock\", rpc.player, this) == null && HasLockPermission(rpc.player))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Locked, b: false);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNearbyTurretsScan","Parameters":"(AutoTurret,System.Collections.Generic.List<AutoTurret>,bool)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void UpdateNearbyTurrets(bool created)\r\n\t{\r\n\t\tList<AutoTurret> obj = Facepunch.Pool.Get<List<AutoTurret>>();\r\n\t\tif (Interface.CallHook(\"OnNearbyTurretsScan\", this, obj, created) == null)\r\n\t\t{\r\n\t\t\tVis.Entities(base.transform.position, Sentry.interferenceradius, obj, 256, QueryTriggerInteraction.Ignore);\r\n\t\t}\r\n\t\tforeach (AutoTurret item in obj)\r\n\t\t{\r\n\t\t\tif (!(item == this))\r\n\t\t\t{\r\n\t\t\t\tif (created)\r\n\t\t\t\t{\r\n\t\t\t\t\tnearbyTurrets.Add(item);\r\n\t\t\t\t\titem.nearbyTurrets.Add(this);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\titem.nearbyTurrets.Remove(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!created)\r\n\t\t{\r\n\t\t\tnearbyTurrets.Clear();\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t}\r\n"},{"Name":"OnEntityDestroy","Parameters":"(CH47HelicopterAIController)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic override void OnKilled(HitInfo info)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEntityDestroy\", this) == null)\r\n\t\t{\r\n\t\t\tif (!OutOfCrates())\r\n\t\t\t{\r\n\t\t\t\tDropCrate();\r\n\t\t\t}\r\n\t\t\tbase.OnKilled(info);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExperimentEnded","Parameters":"(Workbench)","ClassName":"Workbench","MethodCode":"\r\n\tpublic void ExperimentComplete()\r\n\t{\r\n\t\tItem experimentResourceItem = GetExperimentResourceItem();\r\n\t\tint scrapForExperiment = GetScrapForExperiment();\r\n\t\tif (pendingBlueprint == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"Pending blueprint was null!\");\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnExperimentEnd\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (experimentResourceItem != null && experimentResourceItem.amount >= scrapForExperiment && pendingBlueprint != null)\r\n\t\t{\r\n\t\t\texperimentResourceItem.UseItem(scrapForExperiment);\r\n\t\t\tItem item = ItemManager.Create(GetBlueprintTemplate(), 1, 0uL);\r\n\t\t\titem.blueprintTarget = pendingBlueprint.itemid;\r\n\t\t\tcreatingBlueprint = true;\r\n\t\t\tif (!item.MoveToContainer(base.inventory, 0))\r\n\t\t\t{\r\n\t\t\t\titem.Drop(GetDropPosition(), GetDropVelocity());\r\n\t\t\t}\r\n\t\t\tcreatingBlueprint = false;\r\n\t\t\tif (experimentSuccessEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(experimentSuccessEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t}\r\n\t\tSetFlag(Flags.On, b: false);\r\n\t\tpendingBlueprint = null;\r\n\t\tbase.inventory.SetLocked(isLocked: false);\r\n\t\tSendNetworkUpdate();\r\n\t\tInterface.CallHook(\"OnExperimentEnded\", this);\r\n\t}\r\n"},{"Name":"OnFishCatch","Parameters":"(Item,BaseFishingRod,BasePlayer)","ClassName":"BaseFishingRod","MethodCode":"\r\n\tprivate void CatchProcessBudgeted()\r\n\t{\r\n\t\tinQueue = false;\r\n\t\tFishingBobber fishingBobber = currentBobber.Get(serverside: true);\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (ownerPlayer == null || ownerPlayer.IsSleeping() || ownerPlayer.IsWounded() || ownerPlayer.IsDead() || fishingBobber == null)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.UserRequested);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 position = ownerPlayer.transform.position;\r\n\t\tfloat num = Vector3.Angle((fishingBobber.transform.position.WithY(0f) - position.WithY(0f)).normalized, ownerPlayer.eyes.HeadForward().WithY(0f));\r\n\t\tfloat num2 = Vector3.Distance(position, fishingBobber.transform.position.WithY(position.y));\r\n\t\tif (num > ((num2 > 1.2f) ? 60f : 180f))\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.BadAngle);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (num2 > 1.2f && (float)lastSightCheck > 0.4f)\r\n\t\t{\r\n\t\t\tif (!GamePhysics.LineOfSight(ownerPlayer.eyes.position, fishingBobber.transform.position, 1084293377))\r\n\t\t\t{\r\n\t\t\t\tServer_Cancel(FailReason.Obstructed);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlastSightCheck = 0f;\r\n\t\t}\r\n\t\tif (Vector3.Distance(position, fishingBobber.transform.position) > MaxCastDistance * 2f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TooFarAway);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Vector3.Distance(playerStartPosition, position) > 1f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.PlayerMoved);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (CurrentState == CatchState.Waiting)\r\n\t\t{\r\n\t\t\tif ((float)catchTime < 0f)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_HookedSomething\"));\r\n\t\t\t\tCurrentState = CatchState.Catching;\r\n\t\t\t\tfishingBobber.SetFlag(Flags.Reserved1, b: true);\r\n\t\t\t\tnextFishStateChange = 0f;\r\n\t\t\t\tfishCatchDuration = 0f;\r\n\t\t\t\tstrainTimer = 0f;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tFishState fishState = currentFishState;\r\n\t\tif ((float)nextFishStateChange < 0f)\r\n\t\t{\r\n\t\t\tfloat num3 = Mathx.RemapValClamped(fishingBobber.TireAmount, 0f, 20f, 0f, 1f);\r\n\t\t\tif (currentFishState != 0)\r\n\t\t\t{\r\n\t\t\t\tcurrentFishState = (FishState)0;\r\n\t\t\t\tnextFishStateChange = UnityEngine.Random.Range(2f, 4f) * (num3 + 1f);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnextFishStateChange = UnityEngine.Random.Range(3f, 7f) * (1f - num3);\r\n\t\t\t\tif (UnityEngine.Random.Range(0, 100) < 50)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState = FishState.PullingLeft;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState = FishState.PullingRight;\r\n\t\t\t\t}\r\n\t\t\t\tif (UnityEngine.Random.Range(0, 100) > 60 && Vector3.Distance(fishingBobber.transform.position, ownerPlayer.transform.position) < MaxCastDistance - 2f)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState |= FishState.PullingBack;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((float)fishCatchDuration > 120f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TimeOut);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = ownerPlayer.serverInput.IsDown(BUTTON.RIGHT);\r\n\t\tbool flag2 = ownerPlayer.serverInput.IsDown(BUTTON.LEFT);\r\n\t\tbool flag3 = HasReelInInput(ownerPlayer.serverInput);\r\n\t\tif (flag2 && flag)\r\n\t\t{\r\n\t\t\tflag2 = (flag = false);\r\n\t\t}\r\n\t\tUpdateFlags(flag2, flag, flag3);\r\n\t\tif (CurrentState == CatchState.Waiting)\r\n\t\t{\r\n\t\t\tflag = (flag2 = (flag3 = false));\r\n\t\t}\r\n\t\tif (flag2 && !AllowPullInDirection(-ownerPlayer.eyes.HeadRight(), fishingBobber.transform.position))\r\n\t\t{\r\n\t\t\tflag2 = false;\r\n\t\t}\r\n\t\tif (flag && !AllowPullInDirection(ownerPlayer.eyes.HeadRight(), fishingBobber.transform.position))\r\n\t\t{\r\n\t\t\tflag = false;\r\n\t\t}\r\n\t\tfishingBobber.ServerMovementUpdate(flag2, flag, flag3, ref currentFishState, position, fishableModifier);\r\n\t\tbool flag4 = false;\r\n\t\tfloat num4 = 0f;\r\n\t\tif (flag3 || flag2 || flag)\r\n\t\t{\r\n\t\t\tflag4 = true;\r\n\t\t\tnum4 = 0.5f;\r\n\t\t}\r\n\t\tif (currentFishState != 0 && flag4)\r\n\t\t{\r\n\t\t\tif (currentFishState.Contains(FishState.PullingBack) && flag3)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 1.5f;\r\n\t\t\t}\r\n\t\t\telse if ((currentFishState.Contains(FishState.PullingLeft) || currentFishState.Contains(FishState.PullingRight)) && flag3)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 1.2f;\r\n\t\t\t}\r\n\t\t\telse if (currentFishState.Contains(FishState.PullingLeft) && flag)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 0.8f;\r\n\t\t\t}\r\n\t\t\telse if (currentFishState.Contains(FishState.PullingRight) && flag2)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 0.8f;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag3 && currentFishState != 0)\r\n\t\t{\r\n\t\t\tnum4 += 1f;\r\n\t\t}\r\n\t\tnum4 *= fishableModifier.StrainModifier * GlobalStrainSpeedMultiplier;\r\n\t\tif (flag4)\r\n\t\t{\r\n\t\t\tstrainTimer += UnityEngine.Time.deltaTime * num4;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstrainTimer = Mathf.MoveTowards(strainTimer, 0f, UnityEngine.Time.deltaTime * 1.5f);\r\n\t\t}\r\n\t\tfloat num5 = strainTimer / 6f;\r\n\t\tSetFlag(Flags.Reserved1, flag4 && num5 > 0.25f);\r\n\t\tif ((float)lastStrainUpdate > 0.4f || fishState != currentFishState)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_UpdateFishState\"), (int)currentFishState, num5);\r\n\t\t\tlastStrainUpdate = 0f;\r\n\t\t}\r\n\t\tif (strainTimer > 7f || ForceFail)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TensionBreak);\r\n\t\t}\r\n\t\telse if (num2 <= FishCatchDistance || ForceSuccess)\r\n\t\t{\r\n\t\t\tCurrentState = CatchState.Caught;\r\n\t\t\tif (currentFishTarget != null)\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(currentFishTarget, 1, 0uL);\r\n\t\t\t\tobject obj = Interface.CallHook(\"CanCatchFish\", ownerPlayer, this, item);\r\n\t\t\t\tif (obj is bool && !(bool)obj)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj2 = Interface.CallHook(\"OnFishCatch\", item, this, ownerPlayer);\r\n\t\t\t\tif (obj2 is Item && obj2 as Item != item)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t\titem = (Item)obj2;\r\n\t\t\t\t}\r\n\t\t\t\townerPlayer.GiveItem(item, GiveItemReason.Crafted);\r\n\t\t\t\tif (currentFishTarget.shortname == \"skull.human\")\r\n\t\t\t\t{\r\n\t\t\t\t\titem.name = RandomUsernames.Get(UnityEngine.Random.Range(0, 1000));\r\n\t\t\t\t}\r\n\t\t\t\tif (Rust.GameInfo.HasAchievements && !string.IsNullOrEmpty(fishableModifier.SteamStatName))\r\n\t\t\t\t{\r\n\t\t\t\t\townerPlayer.stats.Add(fishableModifier.SteamStatName, 1);\r\n\t\t\t\t\townerPlayer.stats.Save(forceSteamSave: true);\r\n\t\t\t\t\tFishLookup.Instance.CheckCatchAllAchievement(ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Server.FishCaught(currentFishTarget);\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_OnCaughtFish\"), currentFishTarget.itemid);\r\n\t\t\townerPlayer.SignalBroadcast(Signal.Alt_Attack);\r\n\t\t\tInvoke(ResetLine, 6f);\r\n\t\t\tfishingBobber.Kill();\r\n\t\t\tcurrentBobber.Set(null);\r\n\t\t\tCancelInvoke(CatchProcess);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnFishCaught\", currentFishTarget, this, ownerPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWildlifeTrap","Parameters":"(WildlifeTrap,TrappableWildlife)","ClassName":"WildlifeTrap","MethodCode":"\r\n\tpublic void TrapWildlife(TrappableWildlife trapped)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnWildlifeTrap\", this, trapped) == null)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(trapped.inventoryObject, UnityEngine.Random.Range(trapped.minToCatch, trapped.maxToCatch + 1), 0uL);\r\n\t\t\tif (!item.MoveToContainer(base.inventory))\r\n\t\t\t{\r\n\t\t\t\titem.Remove();\r\n\t\t\t\tOnTrappedWildlife(setFlag: false);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tOnTrappedWildlife(setFlag: true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNpcEquipWeapon","Parameters":"(ScientistNPC,Item)","ClassName":"ScientistNPC","MethodCode":"\r\n\tpublic override void EquipWeapon(bool skipDeployDelay = false)\r\n\t{\r\n\t\tbase.EquipWeapon(skipDeployDelay);\r\n\t\tHeldEntity heldEntity = GetHeldEntity();\r\n\t\tif (!(heldEntity != null))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem item = heldEntity.GetItem();\r\n\t\tif (item == null || item.contents == null || Interface.CallHook(\"OnNpcEquipWeapon\", this, item) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (UnityEngine.Random.Range(0, 3) == 0)\r\n\t\t{\r\n\t\t\tItem item2 = ItemManager.CreateByName(\"weapon.mod.flashlight\", 1, 0uL);\r\n\t\t\tif (!item2.MoveToContainer(item.contents))\r\n\t\t\t{\r\n\t\t\t\titem2.Remove();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlightsOn = false;\r\n\t\t\tInvokeRandomized(base.LightCheck, 0f, 30f, 5f);\r\n\t\t\tLightCheck();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tItem item3 = ItemManager.CreateByName(\"weapon.mod.lasersight\", 1, 0uL);\r\n\t\t\tif (!item3.MoveToContainer(item.contents))\r\n\t\t\t{\r\n\t\t\t\titem3.Remove();\r\n\t\t\t}\r\n\t\t\tLightToggle();\r\n\t\t\tlightsOn = true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeRecycled","Parameters":"(Item,Recycler)","ClassName":"Recycler","MethodCode":"\r\n\tprivate bool CanBeRecycled(Item item)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeRecycled\", item, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (item != null)\r\n\t\t{\r\n\t\t\treturn item.info.Blueprint != null;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnQuarryConsumeFuel","Parameters":"(MiningQuarry,Item)","ClassName":"MiningQuarry","MethodCode":"\r\n\tpublic bool FuelCheck()\r\n\t{\r\n\t\tif (pendingWork > 0f)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tItem item = fuelStoragePrefab.instance.GetComponent<StorageContainer>().inventory.FindItemByItemName(\"diesel_barrel\");\r\n\t\tobject obj = Interface.CallHook(\"OnQuarryConsumeFuel\", this, item);\r\n\t\tif (obj is Item)\r\n\t\t{\r\n\t\t\titem = (Item)obj;\r\n\t\t}\r\n\t\tif (item != null && item.amount >= 1)\r\n\t\t{\r\n\t\t\tpendingWork += workPerFuel;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnQuarryItem(Facepunch.Rust.Analytics.Azure.ResourceMode.Consumed, item.info.shortname, 1, this);\r\n\t\t\titem.UseItem();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnOpenVendingAdmin","Parameters":"(VendingMachine,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_OpenAdmin(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (CanPlayerAdmin(player))\r\n\t\t{\r\n\t\t\tOpenShop(player);\r\n\t\t\tClientRPC(RpcTarget.Player(\"CLIENT_OpenAdminMenu\", player));\r\n\t\t\tInterface.CallHook(\"OnOpenVendingAdmin\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanReceiveCall","Parameters":"(PhoneController)","ClassName":"PhoneController","MethodCode":"\r\n\tprivate bool CanReceiveCall()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanReceiveCall\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (RequirePower && !IsPowered())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (RequireParent && !base.baseEntity.HasParent())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnTurretTarget","Parameters":"(AutoTurret,BaseCombatEntity)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void SetTarget(BaseCombatEntity targ)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnTurretTarget\", this, targ) == null)\r\n\t\t{\r\n\t\t\tif (targ != target)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run((targ == null) ? targetLostEffect.resourcePath : targetAcquiredEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t\tMarkDirtyForceUpdateOutputs();\r\n\t\t\t\tnextShotTime += 0.1f;\r\n\t\t\t\tauthDirty = true;\r\n\t\t\t}\r\n\t\t\ttarget = targ;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityActiveCheck","Parameters":"(BaseEntity,BasePlayer,uint,string)","ClassName":"BaseEntity","MethodCode":"\t\t\tpublic static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player)\r\n\t\t\t{\r\n\t\t\t\tif (ent == null || player == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (ent.net == null || player.net == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnEntityActiveCheck\", ent, player, id, debugName);\r\n\t\t\t\tif (obj is bool)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (bool)obj;\r\n\t\t\t\t}\r\n\t\t\t\tif (ent.net.ID == player.net.ID)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (ent.parentEntity.uid != player.net.ID)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tItem activeItem = player.GetActiveItem();\r\n\t\t\t\tif (activeItem == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (activeItem.GetHeldEntity() != ent)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n"},{"Name":"CanHelicopterUseNapalm","Parameters":"(PatrolHelicopterAI)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tpublic bool CanUseNapalm()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanHelicopterUseNapalm\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn UnityEngine.Time.realtimeSinceStartup - lastNapalmTime >= UnityEngine.Random.Range(25f, 35f);\r\n\t}\r\n"},{"Name":"OnPhoneCallStarted","Parameters":"(PhoneController,PhoneController,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void BeginCall()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPhoneCallStart\", this, activeCallTo, currentPlayer) == null)\r\n\t\t{\r\n\t\t\tif (IsMobile && activeCallTo != null && !activeCallTo.RequirePower)\r\n\t\t\t{\r\n\t\t\t\t_ = currentPlayer != null;\r\n\t\t\t}\r\n\t\t\tSetPhoneStateWithPlayer(Telephone.CallState.InProcess);\r\n\t\t\tInvoke(TimeOutCall, TelephoneManager.MaxCallLength);\r\n\t\t\tInterface.CallHook(\"OnPhoneCallStarted\", this, activeCallTo, currentPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSignUpdated","Parameters":"(CarvablePumpkin,BasePlayer)","ClassName":"CarvablePumpkin","MethodCode":"\r\n\t[RPC_Server.MaxDistance(5f)]\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\t[RPC_Server]\r\n\tpublic void UpdateSign(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player == null || !CanUpdateSign(msg.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = msg.read.Int32();\r\n\t\tif (num < 0 || num >= paintableSources.Length)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbyte[] array = msg.read.BytesWithSize();\r\n\t\tif (msg.read.Unread > 0 && msg.read.Bit() && !msg.player.IsAdmin)\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.LogWarning($\"{msg.player} tried to upload a sign from a file but they aren't admin, ignoring\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tEnsureInitialized();\r\n\t\tif (array == null)\r\n\t\t{\r\n\t\t\tif (textureIDs[num] != 0)\r\n\t\t\t{\r\n\t\t\t\tFileStorage.server.RemoveExact(textureIDs[num], FileStorage.Type.png, net.ID, (uint)num);\r\n\t\t\t}\r\n\t\t\ttextureIDs[num] = 0u;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!ImageProcessing.IsValidPNG(array, 1024, 1024))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (textureIDs[num] != 0)\r\n\t\t\t{\r\n\t\t\t\tFileStorage.server.RemoveExact(textureIDs[num], FileStorage.Type.png, net.ID, (uint)num);\r\n\t\t\t}\r\n\t\t\ttextureIDs[num] = FileStorage.server.Store(array, FileStorage.Type.png, net.ID, (uint)num);\r\n\t\t}\r\n\t\tLogEdit(msg.player);\r\n\t\tSendNetworkUpdate();\r\n\t\tInterface.CallHook(\"OnSignUpdated\", this, msg.player);\r\n\t}\r\n"},{"Name":"OnVendingShopOpen","Parameters":"(VendingMachine,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_OpenShop(RPCMessage msg)\r\n\t{\r\n\t\tif (OccupiedCheck(msg.player) && Interface.CallHook(\"OnVendingShopOpen\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\tOpenShop(msg.player);\r\n\t\t\tInterface.CallHook(\"OnVendingShopOpened\", this, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExcavatorMiningToggled","Parameters":"(ExcavatorArm)","ClassName":"ExcavatorArm","MethodCode":"\r\n\tpublic void BeginMining()\r\n\t{\r\n\t\tif (!IsPowered())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetFlag(Flags.On, b: true);\r\n\t\tInvokeRepeating(ProduceResources, resourceProductionTickRate, resourceProductionTickRate);\r\n\t\tif (UnityEngine.Time.time > nextNotificationTime)\r\n\t\t{\r\n\t\t\tforeach (BasePlayer activePlayer in BasePlayer.activePlayerList)\r\n\t\t\t{\r\n\t\t\t\tif (!activePlayer.IsNpc && activePlayer.IsConnected && !activePlayer.IsInTutorial)\r\n\t\t\t\t{\r\n\t\t\t\t\tactivePlayer.ShowToast(GameTip.Styles.Server_Event, excavatorPhrase, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnextNotificationTime = UnityEngine.Time.time + 60f;\r\n\t\t}\r\n\t\tExcavatorServerEffects.SetMining(isMining: true);\r\n\t\tFacepunch.Rust.Analytics.Server.ExcavatorStarted();\r\n\t\texcavatorStartTime = GetNetworkTime();\r\n\t\tInterface.CallHook(\"OnExcavatorMiningToggled\", this);\r\n\t}\r\n"},{"Name":"OnClientProjectileEffectCreate","Parameters":"(Network.Connection,BaseProjectile,string)","ClassName":"BaseProjectile","MethodCode":"\r\n\tpublic void CreateProjectileEffectClientside(string prefabName, Vector3 pos, Vector3 velocity, int seed, Connection sourceConnection, bool silenced = false, bool forceClientsideEffects = false, List<Connection> targets = null)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnClientProjectileEffectCreate\", sourceConnection, this, prefabName) == null)\r\n\t\t{\r\n\t\t\tEffect effect = reusableInstance;\r\n\t\t\teffect.Clear();\r\n\t\t\teffect.Init(Effect.Type.Projectile, pos, velocity, sourceConnection);\r\n\t\t\teffect.scale = (silenced ? 0f : 1f);\r\n\t\t\tif (forceClientsideEffects)\r\n\t\t\t{\r\n\t\t\t\teffect.scale = 2f;\r\n\t\t\t}\r\n\t\t\teffect.pooledString = prefabName;\r\n\t\t\teffect.number = seed;\r\n\t\t\teffect.targets = targets;\r\n\t\t\tEffectNetwork.Send(effect);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHorseLead","Parameters":"(BaseRidableAnimal,BasePlayer)","ClassName":"BaseRidableAnimal","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_Lead(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!(player == null) && !AnyMounted() && !IsForSale())\r\n\t\t{\r\n\t\t\tbool num = IsLeading();\r\n\t\t\tbool flag = msg.read.Bit();\r\n\t\t\tif (num != flag && Interface.CallHook(\"OnHorseLead\", this, player) == null)\r\n\t\t\t{\r\n\t\t\t\tSetLeading(flag ? player : null);\r\n\t\t\t\tLeadingChanged();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnBaseCombatEntityHurt","Parameters":"(BaseCombatEntity,HitInfo)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual void Hurt(HitInfo info)\r\n\t{\r\n\t\tAssert.IsTrue(base.isServer, \"This should be called serverside only\");\r\n\t\tif (IsDead() || IsTransferProtected())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"Hurt( HitInfo )\", 50))\r\n\t\t{\r\n\t\t\tfloat num = health;\r\n\t\t\tScaleDamage(info);\r\n\t\t\tif (info.PointStart != Vector3.zero)\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 0; i < propDirection.Length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!(propDirection[i].extraProtection == null) && !propDirection[i].IsWeakspot(base.transform, info))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpropDirection[i].extraProtection.Scale(info.damageTypes);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.damageTypes.Scale(DamageType.Arrow, ConVar.Server.arrowdamage);\r\n\t\t\tinfo.damageTypes.Scale(DamageType.Bullet, ConVar.Server.bulletdamage);\r\n\t\t\tinfo.damageTypes.Scale(DamageType.Slash, ConVar.Server.meleedamage);\r\n\t\t\tinfo.damageTypes.Scale(DamageType.Blunt, ConVar.Server.meleedamage);\r\n\t\t\tinfo.damageTypes.Scale(DamageType.Stab, ConVar.Server.meleedamage);\r\n\t\t\tinfo.damageTypes.Scale(DamageType.Bleeding, ConVar.Server.bleedingdamage);\r\n\t\t\tif (!(this is BasePlayer))\r\n\t\t\t{\r\n\t\t\t\tinfo.damageTypes.Scale(DamageType.Fun_Water, 0f);\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"IOnBaseCombatEntityHurt\", this, info) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tDebugHurt(info);\r\n\t\t\tfloat num2 = info.damageTypes.Total();\r\n\t\t\thealth = num - num2;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tLogEntry(RustLog.EntryType.Combat, 2, \"hurt {0}/{1} - {2} health left\", info.damageTypes.GetMajorityDamageType(), num2, health.ToString(\"0\"));\r\n\t\t\tlastDamage = info.damageTypes.GetMajorityDamageType();\r\n\t\t\tlastAttacker = info.Initiator;\r\n\t\t\tif (lastAttacker != null)\r\n\t\t\t{\r\n\t\t\t\tBaseCombatEntity baseCombatEntity = lastAttacker as BaseCombatEntity;\r\n\t\t\t\tif (baseCombatEntity != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseCombatEntity.lastDealtDamageTime = UnityEngine.Time.time;\r\n\t\t\t\t\tbaseCombatEntity.lastDealtDamageTo = this;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.IsValid() && lastAttacker is BasePlayer basePlayer)\r\n\t\t\t\t{\r\n\t\t\t\t\tbasePlayer.ProcessMissionEvent(BaseMission.MissionEventType.HURT_ENTITY, net.ID, num2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tBaseCombatEntity baseCombatEntity2 = lastAttacker as BaseCombatEntity;\r\n\t\t\tif (markAttackerHostile && baseCombatEntity2 != null && baseCombatEntity2 != this)\r\n\t\t\t{\r\n\t\t\t\tbaseCombatEntity2.MarkHostileFor();\r\n\t\t\t}\r\n\t\t\tif (lastDamage.IsConsideredAnAttack())\r\n\t\t\t{\r\n\t\t\t\tSetJustAttacked();\r\n\t\t\t\tif (lastAttacker != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tLastAttackedDir = (lastAttacker.transform.position - base.transform.position).normalized;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbool flag = Health() <= 0f;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityTakeDamage(info, flag);\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tDie(info);\r\n\t\t\t}\r\n\t\t\tBasePlayer initiatorPlayer = info.InitiatorPlayer;\r\n\t\t\tif ((bool)initiatorPlayer)\r\n\t\t\t{\r\n\t\t\t\tif (IsDead())\r\n\t\t\t\t{\r\n\t\t\t\t\tinitiatorPlayer.stats.combat.LogAttack(info, \"killed\", num);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tinitiatorPlayer.stats.combat.LogAttack(info, \"\", num);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnAddVendingOffer","Parameters":"(VendingMachine,ProtoBuf.VendingMachine.SellOrder)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic void AddSellOrder(int itemToSellID, int itemToSellAmount, int currencyToUseID, int currencyAmount, byte bpState)\r\n\t{\r\n\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(itemToSellID);\r\n\t\tItemDefinition itemDefinition2 = ItemManager.FindItemDefinition(currencyToUseID);\r\n\t\tif (!(itemDefinition == null) && !(itemDefinition2 == null))\r\n\t\t{\r\n\t\t\tcurrencyAmount = Mathf.Clamp(currencyAmount, 1, 10000);\r\n\t\t\titemToSellAmount = Mathf.Clamp(itemToSellAmount, 1, itemDefinition.stackable);\r\n\t\t\tProtoBuf.VendingMachine.SellOrder sellOrder = new ProtoBuf.VendingMachine.SellOrder();\r\n\t\t\tsellOrder.ShouldPool = false;\r\n\t\t\tsellOrder.itemToSellID = itemToSellID;\r\n\t\t\tsellOrder.itemToSellAmount = itemToSellAmount;\r\n\t\t\tsellOrder.currencyID = currencyToUseID;\r\n\t\t\tsellOrder.currencyAmountPerItem = currencyAmount;\r\n\t\t\tsellOrder.currencyIsBP = bpState == 3 || bpState == 2;\r\n\t\t\tsellOrder.itemToSellIsBP = bpState == 3 || bpState == 1;\r\n\t\t\tInterface.CallHook(\"OnAddVendingOffer\", this, sellOrder);\r\n\t\t\tsellOrders.sellOrders.Add(sellOrder);\r\n\t\t\tRefreshSellOrderStockLevel(itemDefinition);\r\n\t\t\tUpdateMapMarker();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHelicopterRetire","Parameters":"(PatrolHelicopterAI)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tpublic void Retire()\r\n\t{\r\n\t\tif (!isRetiring && Interface.CallHook(\"OnHelicopterRetire\", this) == null)\r\n\t\t{\r\n\t\t\tInvoke(DestroyMe, 240f);\r\n\t\t\tfloat x = TerrainMeta.Size.x;\r\n\t\t\tfloat y = 200f;\r\n\t\t\tVector3 newPos = Vector3Ex.Range(-1f, 1f);\r\n\t\t\tnewPos.y = 0f;\r\n\t\t\tnewPos.Normalize();\r\n\t\t\tnewPos *= x * 20f;\r\n\t\t\tnewPos.y = y;\r\n\t\t\tExitCurrentState();\r\n\t\t\tisRetiring = true;\r\n\t\t\tState_Move_Enter(newPos);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanElevatorLiftMove","Parameters":"(ElevatorLift)","ClassName":"ElevatorLift","MethodCode":"\r\n\tpublic bool CanMove()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanElevatorLiftMove\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (VehicleTrigger.HasContents && VehicleTrigger.entityContents != null)\r\n\t\t{\r\n\t\t\tforeach (BaseEntity entityContent in VehicleTrigger.entityContents)\r\n\t\t\t{\r\n\t\t\t\tif (!vehiclePrefabWhitelist.Contains(entityContent.prefabID))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnOvenStart","Parameters":"(BaseOven)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic virtual void StartCooking()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnOvenStart\", this) == null && (FindBurnable() != null || CanRunWithNoFuel))\r\n\t\t{\r\n\t\t\tbase.inventory.temperature = cookingTemperature;\r\n\t\t\tUpdateAttachmentTemperature();\r\n\t\t\tInvokeRepeating(Cook, 0.5f, 0.5f);\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tInterface.CallHook(\"OnOvenStarted\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMapImageUpdated","Parameters":"()","ClassName":"MapEntity","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(1uL)]\r\n\t[RPC_Server.FromOwner]\r\n\tpublic void ImageUpdate(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbyte b = msg.read.UInt8();\r\n\t\tbyte b2 = msg.read.UInt8();\r\n\t\tuint num = msg.read.UInt32();\r\n\t\tif ((b == 0 && fogImages[b2] == num) || (b == 1 && paintImages[b2] == num))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint num2 = (uint)(b * 1000 + b2);\r\n\t\tbyte[] array = msg.read.BytesWithSize();\r\n\t\tif (array != null)\r\n\t\t{\r\n\t\t\tFileStorage.server.RemoveEntityNum(net.ID, num2);\r\n\t\t\tuint num3 = FileStorage.server.Store(array, FileStorage.Type.png, net.ID, num2);\r\n\t\t\tif (b == 0)\r\n\t\t\t{\r\n\t\t\t\tfogImages[b2] = num3;\r\n\t\t\t}\r\n\t\t\tif (b == 1)\r\n\t\t\t{\r\n\t\t\t\tpaintImages[b2] = num3;\r\n\t\t\t}\r\n\t\t\tInvalidateNetworkCache();\r\n\t\t\tInterface.CallHook(\"OnMapImageUpdated\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnNpcTarget","Parameters":"(BaseNpc,BaseEntity)","ClassName":"BaseNpc","MethodCode":"\r\n\tpublic float GetWantsToAttack(BaseEntity target)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"IOnNpcTarget\", this, target);\r\n\t\tif (obj is float)\r\n\t\t{\r\n\t\t\treturn (float)obj;\r\n\t\t}\r\n\t\treturn WantsToAttack(target);\r\n\t}\r\n"},{"Name":"OnSignLocked","Parameters":"(PhotoFrame,BasePlayer)","ClassName":"PhotoFrame","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void LockSign(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && CanUpdateSign(msg.player))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Locked, b: true);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tbase.OwnerID = msg.player.userID;\r\n\t\t\tInterface.CallHook(\"OnSignLocked\", this, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLootPlayer","Parameters":"(BasePlayer,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override bool CanBeLooted(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanLootPlayer\", this, player);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player == this)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif ((IsWounded() || IsSleeping() || CurrentGestureIsSurrendering || IsRestrainedOrSurrendering) && !IsLoadingAfterTransfer())\r\n\t\t{\r\n\t\t\treturn !IsTransferring();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,BaseRidableAnimal)","ClassName":"BaseRidableAnimal","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tprivate void RPC_OpenLoot(RPCMessage rpc)\r\n\t{\r\n\t\tif (storageInventory == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer player = rpc.player;\r\n\t\tstring text = rpc.read.String();\r\n\t\tif ((bool)player && player.CanInteract() && CanOpenStorage(player) && (!needsBuildingPrivilegeToUse || player.CanBuild()) && Interface.CallHook(\"CanLootEntity\", player, this) == null && player.inventory.loot.StartLootingEntity(this))\r\n\t\t{\r\n\t\t\tItemContainer container = equipmentInventory;\r\n\t\t\tstring arg = lootPanelName;\r\n\t\t\tif (text == \"storage\")\r\n\t\t\t{\r\n\t\t\t\targ = storagePanelName;\r\n\t\t\t\tcontainer = storageInventory;\r\n\t\t\t}\r\n\t\t\tplayer.inventory.loot.AddContainer(container);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), arg);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWorldPrefabSpawned","Parameters":"(UnityEngine.GameObject,string)","ClassName":"World","MethodCode":"\r\n\tprivate static void SpawnPrefab(string category, Prefab prefab, Vector3 position, Quaternion rotation, Vector3 scale)\r\n\t{\r\n\t\tif (prefab != null && (bool)prefab.Object)\r\n\t\t{\r\n\t\t\tspawnTimer.Restart();\r\n\t\t\tif (!Cached)\r\n\t\t\t{\r\n\t\t\t\tprefab.ApplyTerrainPlacements(position, rotation, scale);\r\n\t\t\t\tprefab.ApplyTerrainModifiers(position, rotation, scale);\r\n\t\t\t}\r\n\t\t\tGameObject gameObject = prefab.Spawn(position, rotation, scale);\r\n\t\t\tif ((bool)gameObject)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnWorldPrefabSpawned\", gameObject, category);\r\n\t\t\t\tGameObjectEx.SetHierarchyGroup(gameObject, category);\r\n\t\t\t}\r\n\t\t\tspawnTimer.Stop();\r\n\t\t\tspawnTimings.Add(new SpawnTiming\r\n\t\t\t{\r\n\t\t\t\tcategory = category,\r\n\t\t\t\tprefab = prefab,\r\n\t\t\t\tposition = position,\r\n\t\t\t\trotation = rotation,\r\n\t\t\t\tscale = scale,\r\n\t\t\t\ttime = spawnTimer.Elapsed\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemStacked","Parameters":"(Item,Item,ItemContainer)","ClassName":"Item","MethodCode":"\r\n\tpublic bool MoveToContainer(ItemContainer newcontainer, int iTargetPos = -1, bool allowStack = true, bool ignoreStackLimit = false, BasePlayer sourcePlayer = null, bool allowSwap = true)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"MoveToContainer\"))\r\n\t\t{\r\n\t\t\tbool flag = iTargetPos == -1;\r\n\t\t\tItemContainer itemContainer = parent;\r\n\t\t\tif (iTargetPos == -1)\r\n\t\t\t{\r\n\t\t\t\tif (allowStack && info.stackable > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (Item item3 in from x in newcontainer.FindItemsByItemID(info.itemid)\r\n\t\t\t\t\t\torderby x.position\r\n\t\t\t\t\t\tselect x)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item3.CanStack(this) && (ignoreStackLimit || item3.amount < item3.MaxStackable()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tiTargetPos = item3.position;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (iTargetPos == -1 && newcontainer.GetEntityOwner(returnHeldEntity: true) is IIdealSlotEntity idealSlotEntity)\r\n\t\t\t\t{\r\n\t\t\t\t\tiTargetPos = idealSlotEntity.GetIdealSlot(sourcePlayer, newcontainer, this);\r\n\t\t\t\t\tif (iTargetPos == int.MinValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (iTargetPos == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (newcontainer == parent)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbool flag2 = newcontainer.HasFlag(ItemContainer.Flag.Clothing) && info.isWearable;\r\n\t\t\t\t\tItemModWearable itemModWearable = info.ItemModWearable;\r\n\t\t\t\t\tfor (int i = 0; i < newcontainer.capacity; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItem slot = newcontainer.GetSlot(i);\r\n\t\t\t\t\t\tif (slot == null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (CanMoveTo(newcontainer, i))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tiTargetPos = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (flag2 && slot != null && !slot.info.ItemModWearable.CanExistWith(itemModWearable))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tiTargetPos = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (newcontainer.HasAvailableSlotsDefined && DoItemSlotsConflict(slot))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tiTargetPos = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flag2 && iTargetPos == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tiTargetPos = newcontainer.capacity - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (iTargetPos == -1)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!CanMoveTo(newcontainer, iTargetPos))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (iTargetPos >= 0 && newcontainer.SlotTaken(this, iTargetPos))\r\n\t\t\t{\r\n\t\t\t\tItem slot2 = newcontainer.GetSlot(iTargetPos);\r\n\t\t\t\tif (slot2 == this)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (allowStack && slot2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint num = slot2.MaxStackable();\r\n\t\t\t\t\tif (slot2.CanStack(this))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (ignoreStackLimit)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnum = int.MaxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (slot2.amount >= num)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tint num2 = Mathf.Min(num - slot2.amount, amount);\r\n\t\t\t\t\t\tslot2.amount += num2;\r\n\t\t\t\t\t\tnewcontainer.onItemAddedToStack?.Invoke(slot2, num2);\r\n\t\t\t\t\t\tamount -= num2;\r\n\t\t\t\t\t\tslot2.MarkDirty();\r\n\t\t\t\t\t\tInterface.CallHook(\"OnItemStacked\", slot2, this, newcontainer, num2);\r\n\t\t\t\t\t\tMarkDirty();\r\n\t\t\t\t\t\tif (amount <= 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tRemoveFromWorld();\r\n\t\t\t\t\t\t\tRemoveFromContainer();\r\n\t\t\t\t\t\t\tRemove();\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (flag)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn MoveToContainer(newcontainer, -1, allowStack, ignoreStackLimit, sourcePlayer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (parent != null && allowSwap && slot2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tItemContainer itemContainer2 = parent;\r\n\t\t\t\t\tint iTargetPos2 = position;\r\n\t\t\t\t\tItemContainer newcontainer2 = slot2.parent;\r\n\t\t\t\t\tint num3 = slot2.position;\r\n\t\t\t\t\tif (!slot2.CanMoveTo(itemContainer2, iTargetPos2))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (itemContainer2.maxStackSize > 0 && slot2.amount > itemContainer2.maxStackSize)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItem item = slot2.SplitItem(slot2.amount - itemContainer2.maxStackSize);\r\n\t\t\t\t\t\tif (item == null || !item.MoveToContainer(newcontainer2, -1, allowStack: false, ignoreStackLimit: false, sourcePlayer, allowSwap: false))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tslot2.amount += item.amount;\r\n\t\t\t\t\t\t\titem.Remove();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tBaseEntity entityOwner = GetEntityOwner();\r\n\t\t\t\t\tBaseEntity entityOwner2 = slot2.GetEntityOwner();\r\n\t\t\t\t\tRemoveFromContainer();\r\n\t\t\t\t\tslot2.RemoveFromContainer();\r\n\t\t\t\t\tRemoveConflictingSlots(newcontainer, entityOwner, sourcePlayer);\r\n\t\t\t\t\tslot2.RemoveConflictingSlots(itemContainer2, entityOwner2, sourcePlayer);\r\n\t\t\t\t\tif (!slot2.MoveToContainer(itemContainer2, iTargetPos2, allowStack: true, ignoreStackLimit: false, sourcePlayer) || !MoveToContainer(newcontainer, iTargetPos, allowStack: true, ignoreStackLimit: false, sourcePlayer))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tRemoveFromContainer();\r\n\t\t\t\t\t\tslot2.RemoveFromContainer();\r\n\t\t\t\t\t\tSetParent(itemContainer2);\r\n\t\t\t\t\t\tposition = iTargetPos2;\r\n\t\t\t\t\t\tslot2.SetParent(newcontainer2);\r\n\t\t\t\t\t\tslot2.position = num3;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (parent == newcontainer)\r\n\t\t\t{\r\n\t\t\t\tif (iTargetPos >= 0 && iTargetPos != position && !parent.SlotTaken(this, iTargetPos))\r\n\t\t\t\t{\r\n\t\t\t\t\tposition = iTargetPos;\r\n\t\t\t\t\tMarkDirty();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (newcontainer.maxStackSize > 0 && newcontainer.maxStackSize < amount)\r\n\t\t\t{\r\n\t\t\t\tItem item2 = SplitItem(newcontainer.maxStackSize);\r\n\t\t\t\tif (item2 != null && !item2.MoveToContainer(newcontainer, iTargetPos, allowStack: false, ignoreStackLimit: false, sourcePlayer) && (itemContainer == null || !item2.MoveToContainer(itemContainer, -1, allowStack: true, ignoreStackLimit: false, sourcePlayer)))\r\n\t\t\t\t{\r\n\t\t\t\t\tDroppedItem droppedItem = item2.Drop(newcontainer.dropPosition, newcontainer.dropVelocity) as DroppedItem;\r\n\t\t\t\t\tif (droppedItem != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdroppedItem.DroppedBy = sourcePlayer?.userID ?? ((BasePlayer.EncryptedValue<ulong>)0uL);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tInterface.CallHook(\"OnItemStacked\", item2, this, newcontainer);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (!newcontainer.CanAccept(this))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tBaseEntity entityOwner3 = GetEntityOwner();\r\n\t\t\tRemoveFromContainer();\r\n\t\t\tRemoveFromWorld();\r\n\t\t\tRemoveConflictingSlots(newcontainer, entityOwner3, sourcePlayer);\r\n\t\t\tposition = iTargetPos;\r\n\t\t\tSetParent(newcontainer);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnInputUpdate","Parameters":"(IOEntity,int,int)","ClassName":"IOEntity","MethodCode":"\r\n\tpublic virtual void UpdateFromInput(int inputAmount, int inputSlot)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnInputUpdate\", this, inputAmount, inputSlot) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (inputs[inputSlot].type != ioType || inputs[inputSlot].type == IOType.Industrial)\r\n\t\t{\r\n\t\t\tIOStateChanged(inputAmount, inputSlot);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUpdateHasPower(inputAmount, inputSlot);\r\n\t\tlastEnergy = currentEnergy;\r\n\t\tcurrentEnergy = CalculateCurrentEnergy(inputAmount, inputSlot);\r\n\t\tint passthroughAmount = GetPassthroughAmount();\r\n\t\tbool flag = lastPassthroughEnergy != passthroughAmount;\r\n\t\tlastPassthroughEnergy = passthroughAmount;\r\n\t\tif (currentEnergy != lastEnergy || flag)\r\n\t\t{\r\n\t\t\tIOStateChanged(inputAmount, inputSlot);\r\n\t\t\tensureOutputsUpdated = true;\r\n\t\t}\r\n\t\t_processQueues[GetQueueType()].Enqueue(this);\r\n\t}\r\n"},{"Name":"OnWireConnect","Parameters":"(BasePlayer,IOEntity,int,IOEntity,int,System.Collections.Generic.List<UnityEngine.Vector3>,System.Collections.Generic.List<float>)","ClassName":"WireTool","MethodCode":"\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\tpublic void RPC_MakeConnection(RPCMessage rpc)\r\n\t{\r\n\t\tBasePlayer player = rpc.player;\r\n\t\tif (!CanPlayerUseWires(player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWireConnectionMessage wireConnectionMessage = WireConnectionMessage.Deserialize(rpc.read);\r\n\t\tList<Vector3> linePoints = wireConnectionMessage.linePoints;\r\n\t\tint inputIndex = wireConnectionMessage.inputIndex;\r\n\t\tint outputIndex = wireConnectionMessage.outputIndex;\r\n\t\tIOEntity iOEntity = new EntityRef<IOEntity>(wireConnectionMessage.inputID).Get(serverside: true);\r\n\t\tIOEntity iOEntity2 = new EntityRef<IOEntity>(wireConnectionMessage.outputID).Get(serverside: true);\r\n\t\tif (iOEntity == null || iOEntity2 == null || !ValidateLine(linePoints, iOEntity, iOEntity2, player, outputIndex) || inputIndex >= iOEntity.inputs.Length || outputIndex >= iOEntity2.outputs.Length || iOEntity.inputs[inputIndex].connectedTo.Get() != null || iOEntity2.outputs[outputIndex].connectedTo.Get() != null || (iOEntity.inputs[inputIndex].rootConnectionsOnly && !iOEntity2.IsRootEntity()) || !CanModifyEntity(player, iOEntity) || !CanModifyEntity(player, iOEntity2))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<float> slackLevels = wireConnectionMessage.slackLevels;\r\n\t\tIOEntity.LineAnchor[] array = new IOEntity.LineAnchor[wireConnectionMessage.lineAnchors.Count];\r\n\t\tfor (int i = 0; i < wireConnectionMessage.lineAnchors.Count; i++)\r\n\t\t{\r\n\t\t\tWireLineAnchorInfo wireLineAnchorInfo = wireConnectionMessage.lineAnchors[i];\r\n\t\t\tarray[i].entityRef = new EntityRef<Door>(wireLineAnchorInfo.parentID);\r\n\t\t\tarray[i].boneName = wireLineAnchorInfo.boneName;\r\n\t\t\tarray[i].index = (int)wireLineAnchorInfo.index;\r\n\t\t\tarray[i].position = wireLineAnchorInfo.position;\r\n\t\t}\r\n\t\tWireColour wireColour = IntToColour(wireConnectionMessage.wireColor);\r\n\t\tif (Interface.CallHook(\"OnWireConnect\", player, iOEntity, inputIndex, iOEntity2, outputIndex, wireConnectionMessage.linePoints, slackLevels) == null)\r\n\t\t{\r\n\t\t\tif (wireColour == WireColour.Invisible && !player.IsInCreativeMode)\r\n\t\t\t{\r\n\t\t\t\twireColour = DefaultColor;\r\n\t\t\t}\r\n\t\t\tiOEntity2.ConnectTo(iOEntity, outputIndex, inputIndex, linePoints, slackLevels, array, wireColour);\r\n\t\t\tif (wireType == IOEntity.IOType.Industrial)\r\n\t\t\t{\r\n\t\t\t\tiOEntity.NotifyIndustrialNetworkChanged();\r\n\t\t\t\tiOEntity2.NotifyIndustrialNetworkChanged();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnScientistInitialized","Parameters":"(BradleyAPC,ScientistNPC,UnityEngine.Vector3)","ClassName":"BradleyAPC","MethodCode":"\r\n\tprivate void InitScientist(ScientistNPC scientist, Vector3 spawnPos, BasePlayer triggerPlayer, bool roadSpawned, bool startChasing)\r\n\t{\r\n\t\tif (scientist == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tscientist.transform.position = spawnPos;\r\n\t\tif (!scientist.Brain.Navigator.PlaceOnNavMesh(0.2f))\r\n\t\t{\r\n\t\t\tactiveScientists.Remove(scientist);\r\n\t\t\tscientist.Kill();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (triggerPlayer != null)\r\n\t\t{\r\n\t\t\tscientist.Brain.Events.Memory.Entity.Set(triggerPlayer, 0);\r\n\t\t\tscientist.Brain.Senses.Memory.SetKnown(triggerPlayer, scientist, null);\r\n\t\t\tscientist.Brain.Events.Memory.Position.Set(scientist.Brain.Navigator.transform.position, 7);\r\n\t\t\tscientist.Brain.Events.Memory.Position.Set(scientist.Brain.Navigator.transform.position, 4);\r\n\t\t\tscientist.Brain.Events.Memory.Entity.Set(this, 7);\r\n\t\t\tAttackEntity attackEntity = scientist.GetAttackEntity();\r\n\t\t\tif (SetScientistChaseBasedOnWeapon && attackEntity != null && !attackEntity.CanUseAtLongRange)\r\n\t\t\t{\r\n\t\t\t\tstartChasing = true;\r\n\t\t\t}\r\n\t\t\tscientist.Brain.Navigator.CanPathFindToChaseTargetIfNoMovePoint = startChasing;\r\n\t\t\tscientist.Brain.Navigator.CanUseRandomMovePointIfNonFound = !startChasing;\r\n\t\t\tif (startChasing)\r\n\t\t\t{\r\n\t\t\t\tscientist.Brain.SwitchToState(AIState.Chase, 6);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tscientist.Brain.SwitchToState(AIState.TakeCover, 4);\r\n\t\t\t}\r\n\t\t\tscientist.Brain.Think(0f);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnScientistInitialized\", this, scientist, spawnPos);\r\n\t}\r\n"},{"Name":"OnPayForUpgrade","Parameters":"(BasePlayer,BuildingBlock,ConstructionGrade)","ClassName":"BuildingBlock","MethodCode":"\r\n\tpublic void PayForUpgrade(ConstructionGrade g, BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPayForUpgrade\", player, this, g) != null || (player.IsInCreativeMode && Creative.freeBuild))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<Item> list = new List<Item>();\r\n\t\tforeach (ItemAmount item in g.CostToBuild(grade))\r\n\t\t{\r\n\t\t\tplayer.inventory.Take(list, item.itemid, (int)item.amount);\r\n\t\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(item.itemid);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.LogResource(Facepunch.Rust.Analytics.Azure.ResourceMode.Consumed, \"upgrade_block\", itemDefinition.shortname, (int)item.amount, this, null, safezone: false, null, player.userID);\r\n\t\t\tplayer.Command(\"note.inv \" + item.itemid + \" \" + item.amount * -1f);\r\n\t\t}\r\n\t\tforeach (Item item2 in list)\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnServerRestart","Parameters":"(string,int)","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic static void RestartServer(string strNotice, int iSeconds)\r\n\t{\r\n\t\tif (SingletonComponent<ServerMgr>.Instance == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (SingletonComponent<ServerMgr>.Instance.restartCoroutine != null)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnServerRestartInterrupt\") != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tConsoleNetwork.BroadcastToAllClients(\"chat.add\", 2, 0, \"<color=#fff>SERVER</color> Restart interrupted!\");\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.StopCoroutine(SingletonComponent<ServerMgr>.Instance.restartCoroutine);\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.restartCoroutine = null;\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnServerRestart\", strNotice, iSeconds) == null)\r\n\t\t{\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.restartCoroutine = SingletonComponent<ServerMgr>.Instance.ServerRestartWarning(strNotice, iSeconds);\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.StartCoroutine(SingletonComponent<ServerMgr>.Instance.restartCoroutine);\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.UpdateServerInformation();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPhoneAnswer","Parameters":"(PhoneController,PhoneController)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void AnswerPhone(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif (IsInvoking(TimeOutDialing))\r\n\t\t{\r\n\t\t\tCancelInvoke(TimeOutDialing);\r\n\t\t}\r\n\t\tif (!(activeCallTo == null))\r\n\t\t{\r\n\t\t\tBasePlayer player = msg.player;\r\n\t\t\tif (Interface.CallHook(\"OnPhoneAnswer\", this, activeCallTo) == null)\r\n\t\t\t{\r\n\t\t\t\tUpdateServerPlayer(player);\r\n\t\t\t\tBeginCall();\r\n\t\t\t\tactiveCallTo.BeginCall();\r\n\t\t\t\tInterface.CallHook(\"OnPhoneAnswered\", this, activeCallTo);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnOvenTemperature","Parameters":"(BaseOven,int)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic float GetTemperature(int slot)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnOvenTemperature\", this, slot);\r\n\t\tif (obj is float)\r\n\t\t{\r\n\t\t\treturn (float)obj;\r\n\t\t}\r\n\t\tif (!HasFlag(Flags.On))\r\n\t\t{\r\n\t\t\treturn 15f;\r\n\t\t}\r\n\t\treturn cookingTemperature;\r\n\t}\r\n"},{"Name":"OnCoalingTowerStart","Parameters":"(CoalingTower,BasePlayer)","ClassName":"CoalingTower","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_Unload(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnCoalingTowerStart\", this, msg.player) == null && !TryUnloadActiveWagon(out var attemptStatus) && msg.player != null)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.Player(\"ActionFailed\", msg.player), (byte)attemptStatus, arg2: true);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanHelicopterTarget","Parameters":"(PatrolHelicopterAI,BasePlayer)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tpublic bool PlayerVisible(BasePlayer ply)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanHelicopterTarget\", this, ply);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tVector3 position = ply.eyes.position;\r\n\t\tif (ply.eyes.position.y < WaterSystem.OceanLevel && Mathf.Abs(WaterSystem.OceanLevel - ply.eyes.position.y) > oceanDepthTargetCutoff)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (TOD_Sky.Instance.IsNight && Vector3.Distance(position, interestZoneOrigin) > 40f)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tVector3 vector = base.transform.position - Vector3.up * 6f;\r\n\t\tfloat num = Vector3.Distance(position, vector);\r\n\t\tVector3 normalized = (position - vector).normalized;\r\n\t\tif (GamePhysics.Trace(new Ray(vector + normalized * 5f, normalized), 0f, out var hitInfo, num * 1.1f, 1218652417) && GameObjectEx.ToBaseEntity(hitInfo.collider.gameObject) == ply)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"CanDestroyLock","Parameters":"(BasePlayer,ModularCar,BaseVehicleModule)","ClassName":"ModularCar","MethodCode":"\r\n\tpublic bool PlayerCanDestroyLock(BasePlayer player, BaseVehicleModule viaModule)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanDestroyLock\", player, this, viaModule);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn CarLock.PlayerCanDestroyLock(viaModule);\r\n\t}\r\n"},{"Name":"OnPlayerHealthChange","Parameters":"(BasePlayer,float,float)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override void OnHealthChanged(float oldvalue, float newvalue)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerHealthChange\", this, oldvalue, newvalue) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbase.OnHealthChanged(oldvalue, newvalue);\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tif (oldvalue > newvalue)\r\n\t\t\t{\r\n\t\t\t\tLifeStoryHurt(oldvalue - newvalue);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tLifeStoryHeal(newvalue - oldvalue);\r\n\t\t\t}\r\n\t\t\tmetabolism.isDirty = true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDemoRecordingStart","Parameters":"(string,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void StartDemoRecording()\r\n\t{\r\n\t\tif (net != null && net.connection != null && !net.connection.IsRecording)\r\n\t\t{\r\n\t\t\tstring text = $\"demos/{UserIDString}/{DateTime.Now:yyyy-MM-dd-hhmmss}.dem\";\r\n\t\t\tif (Interface.CallHook(\"OnDemoRecordingStart\", text, this) == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.Log(ToString() + \" recording started: \" + text);\r\n\t\t\t\tnet.connection.StartRecording(text, new Demo.Header\r\n\t\t\t\t{\r\n\t\t\t\t\tversion = Demo.Version,\r\n\t\t\t\t\tlevel = UnityEngine.Application.loadedLevelName,\r\n\t\t\t\t\tlevelSeed = World.Seed,\r\n\t\t\t\t\tlevelSize = World.Size,\r\n\t\t\t\t\tchecksum = World.Checksum,\r\n\t\t\t\t\tlocalclient = userID,\r\n\t\t\t\t\tposition = eyes.position,\r\n\t\t\t\t\trotation = eyes.HeadForward(),\r\n\t\t\t\t\tlevelUrl = World.Url,\r\n\t\t\t\t\trecordedTime = DateTime.Now.ToBinary()\r\n\t\t\t\t});\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tSendGlobalSnapshot();\r\n\t\t\t\tSendFullSnapshot();\r\n\t\t\t\tSendEntityUpdate();\r\n\t\t\t\tTreeManager.SendSnapshot(this);\r\n\t\t\t\tServerMgr.SendReplicatedVars(net.connection);\r\n\t\t\t\tInvokeRepeating(MonitorDemoRecording, 10f, 10f);\r\n\t\t\t\tInterface.CallHook(\"OnDemoRecordingStarted\", text, this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemSubmit","Parameters":"(Item,Mailbox,BasePlayer)","ClassName":"Mailbox","MethodCode":"\r\n\tpublic void SubmitInputItems(BasePlayer fromPlayer)\r\n\t{\r\n\t\tItem slot = base.inventory.GetSlot(mailInputSlot);\r\n\t\tif (IsFull() || slot == null || Interface.CallHook(\"OnItemSubmit\", slot, this, fromPlayer) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (MoveItemToStorage(slot))\r\n\t\t{\r\n\t\t\tif (slot.position != mailInputSlot)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(mailDropSound.resourcePath, GetDropPosition());\r\n\t\t\t\tif (fromPlayer != null && !PlayerIsOwner(fromPlayer))\r\n\t\t\t\t{\r\n\t\t\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tslot.Drop(GetDropPosition(), GetDropVelocity());\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStructureRepair","Parameters":"(BaseCombatEntity,BasePlayer)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual void DoRepair(BasePlayer player)\r\n\t{\r\n\t\tBasePlayer player2 = player;\r\n\t\tif (!repair.enabled || Interface.CallHook(\"OnStructureRepair\", this, player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = 30f;\r\n\t\tif (player2.IsInCreativeMode && Creative.freeRepair)\r\n\t\t{\r\n\t\t\tnum = 0f;\r\n\t\t}\r\n\t\tif (SecondsSinceAttacked <= num)\r\n\t\t{\r\n\t\t\tOnRepairFailed(player2, RecentlyDamagedError, (num - SecondsSinceAttacked).ToString(\"N0\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num2 = MaxHealth() - Health();\r\n\t\tfloat num3 = num2 / MaxHealth();\r\n\t\tif (num2 <= 0f || num3 <= 0f)\r\n\t\t{\r\n\t\t\tOnRepairFailed(player2, NotDamagedError);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<ItemAmount> list = RepairCost(num3);\r\n\t\tif (list == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num4 = list.Sum((ItemAmount x) => x.amount);\r\n\t\tfloat healthBefore = health;\r\n\t\tif (player2.IsInCreativeMode && Creative.freeRepair)\r\n\t\t{\r\n\t\t\tnum4 = 0f;\r\n\t\t}\r\n\t\tif (num4 > 0f)\r\n\t\t{\r\n\t\t\tfloat num5 = list.Min((ItemAmount x) => Mathf.Clamp01((float)player2.inventory.GetAmount(x.itemid) / x.amount));\r\n\t\t\tif (float.IsNaN(num5))\r\n\t\t\t{\r\n\t\t\t\tnum5 = 0f;\r\n\t\t\t}\r\n\t\t\tnum5 = Mathf.Min(num5, 50f / num2);\r\n\t\t\tif (num5 <= 0f)\r\n\t\t\t{\r\n\t\t\t\tOnRepairFailedResources(player2, list);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tint num6 = 0;\r\n\t\t\tforeach (ItemAmount item in list)\r\n\t\t\t{\r\n\t\t\t\tint amount = Mathf.CeilToInt(num5 * item.amount);\r\n\t\t\t\tint num7 = player2.inventory.Take(null, item.itemid, amount);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.LogResource(Facepunch.Rust.Analytics.Azure.ResourceMode.Consumed, \"repair_entity\", item.itemDef.shortname, num7, this, null, safezone: false, null, player2.userID);\r\n\t\t\t\tif (num7 > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum6 += num7;\r\n\t\t\t\t\tplayer2.Command(\"note.inv\", item.itemid, num7 * -1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfloat num8 = (float)num6 / num4;\r\n\t\t\thealth += num2 * num8;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\thealth += num2;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t\tFacepunch.Rust.Analytics.Azure.OnEntityRepaired(player2, this, healthBefore, health);\r\n\t\tif (Health() >= MaxHealth())\r\n\t\t{\r\n\t\t\tOnRepairFinished();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tOnRepair();\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanHelicopterStrafeTarget","Parameters":"(PatrolHelicopterAI,BasePlayer)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tpublic bool ValidRocketTarget(BasePlayer ply)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanHelicopterStrafeTarget\", this, ply);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (ply == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn !ply.IsNearEnemyBase();\r\n\t}\r\n"},{"Name":"OnStashExposed","Parameters":"(StashContainer,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tprivate void CheckStashRevealInvoke()\r\n\t{\r\n\t\tfor (int i = 0; i < nearbyStashes.Count; i++)\r\n\t\t{\r\n\t\t\tNearbyStash nearbyStash = nearbyStashes[i];\r\n\t\t\tif (nearbyStash.Entity == null || nearbyStash.Entity.IsDestroyed)\r\n\t\t\t{\r\n\t\t\t\tnearbyStashes.RemoveAt(i);\r\n\t\t\t}\r\n\t\t\telse if (nearbyStash.Entity.IsHidden() && nearbyStash.Entity.PlayerInRange(this))\r\n\t\t\t{\r\n\t\t\t\tnearbyStash.LookingAtTime += StashContainer.PlayerDetectionTickRate;\r\n\t\t\t\tif (nearbyStash.LookingAtTime >= nearbyStash.Entity.uncoverTime)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (Interface.CallHook(\"CanSeeStash\", this, nearbyStash.Entity) != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnearbyStash.Entity.SetHidden(isHidden: false);\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnStashRevealed(this, nearbyStash.Entity);\r\n\t\t\t\t\tInterface.CallHook(\"OnStashExposed\", nearbyStash.Entity, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnearbyStash.LookingAtTime = 0f;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,StorageContainer)","ClassName":"StorageContainer","MethodCode":"\r\n\tpublic virtual bool PlayerOpenLoot(BasePlayer player, string panelToOpen = \"\", bool doPositionChecks = true)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanLootEntity\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsLocked() || IsTransferring())\r\n\t\t{\r\n\t\t\tplayer.ShowToast(GameTip.Styles.Red_Normal, LockedMessage, false);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (onlyOneUser && IsOpen())\r\n\t\t{\r\n\t\t\tplayer.ShowToast(GameTip.Styles.Red_Normal, InUseMessage, false);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (panelToOpen == \"\")\r\n\t\t{\r\n\t\t\tpanelToOpen = panelName;\r\n\t\t}\r\n\t\tif (!CanOpenLootPanel(player, panelToOpen))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (player.inventory.loot.StartLootingEntity(this, doPositionChecks))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Open, b: true);\r\n\t\t\tAddContainers(player.inventory.loot);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), panelToOpen);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnPhoneDialTimeout","Parameters":"(PhoneController,PhoneController,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tprivate void TimeOutDialing()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPhoneDialTimeout\", activeCallTo, this, activeCallTo.currentPlayer) == null)\r\n\t\t{\r\n\t\t\tif (activeCallTo != null)\r\n\t\t\t{\r\n\t\t\t\tactiveCallTo.ServerPlayAnsweringMessage(this);\r\n\t\t\t}\r\n\t\t\tSetPhoneState(Telephone.CallState.Idle);\r\n\t\t\tInterface.CallHook(\"OnPhoneDialTimedOut\", activeCallTo, this, activeCallTo.currentPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVendingShopOpen","Parameters":"(NPCVendingMachine,BasePlayer)","ClassName":"TravellingVendor","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void SV_OpenMenu(RPCMessage msg)\r\n\t{\r\n\t\tif (vendingMachine == null)\r\n\t\t{\r\n\t\t\tvendingMachine = GetComponentInChildren<NPCVendingMachine>();\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnVendingShopOpen\", vendingMachine, msg.player) == null)\r\n\t\t{\r\n\t\t\tvendingMachine.OpenShop(msg.player);\r\n\t\t\tInterface.CallHook(\"OnVendingShopOpened\", vendingMachine, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanRecycle","Parameters":"(Recycler,Item)","ClassName":"Recycler","MethodCode":"\r\n\tpublic bool HasRecyclable()\r\n\t{\r\n\t\tfor (int i = 0; i < 6; i++)\r\n\t\t{\r\n\t\t\tItem slot = base.inventory.GetSlot(i);\r\n\t\t\tif (slot != null)\r\n\t\t\t{\r\n\t\t\t\tobject obj = Interface.CallHook(\"CanRecycle\", this, slot);\r\n\t\t\t\tif (obj is bool)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (bool)obj;\r\n\t\t\t\t}\r\n\t\t\t\tif (slot.info.Blueprint != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnCCTVDirectionChange","Parameters":"(CCTV_RC,BasePlayer)","ClassName":"CCTV_RC","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void Server_SetDir(RPCMessage msg)\r\n\t{\r\n\t\tif (!IsStatic())\r\n\t\t{\r\n\t\t\tBasePlayer player = msg.player;\r\n\t\t\tif (player.CanBuild() && player.IsBuildingAuthed() && Interface.CallHook(\"OnCCTVDirectionChange\", this, player) == null)\r\n\t\t\t{\r\n\t\t\t\tVector3 direction = Vector3Ex.Direction(player.eyes.position, yaw.transform.position);\r\n\t\t\t\tdirection = base.transform.InverseTransformDirection(direction);\r\n\t\t\t\tVector3 vector = BaseMountable.ConvertVector(Quaternion.LookRotation(direction).eulerAngles);\r\n\t\t\t\tpitchAmount = Mathf.Clamp(vector.x, pitchClamp.x, pitchClamp.y);\r\n\t\t\t\tyawAmount = Mathf.Clamp(vector.y, yawClamp.x, yawClamp.y);\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWaterCollect","Parameters":"(WaterCatcher)","ClassName":"WaterCatcher","MethodCode":"\r\n\tpublic void CollectWater()\r\n\t{\r\n\t\tif (!IsFull() && Interface.CallHook(\"OnWaterCollect\", this) == null)\r\n\t\t{\r\n\t\t\tfloat baseRate = collectionRates.baseRate;\r\n\t\t\tbaseRate += Climate.GetFog(base.transform.position) * collectionRates.fogRate;\r\n\t\t\tif (TestIsOutside())\r\n\t\t\t{\r\n\t\t\t\tbaseRate += Climate.GetRain(base.transform.position) * collectionRates.rainRate;\r\n\t\t\t\tbaseRate += Climate.GetSnow(base.transform.position) * collectionRates.snowRate;\r\n\t\t\t}\r\n\t\t\tAddResource(Mathf.CeilToInt(maxItemToCreate * baseRate));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamPromote","Parameters":"(RelationshipManager.PlayerTeam,BasePlayer)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void promote(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (basePlayer.currentTeam == 0L)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer lookingAtPlayer = GetLookingAtPlayer(basePlayer);\r\n\t\tif (!(lookingAtPlayer == null) && !lookingAtPlayer.IsDead() && !(lookingAtPlayer == basePlayer) && lookingAtPlayer.currentTeam == basePlayer.currentTeam)\r\n\t\t{\r\n\t\t\tPlayerTeam playerTeam = ServerInstance.teams[basePlayer.currentTeam];\r\n\t\t\tif (playerTeam != null && playerTeam.teamLeader == (ulong)basePlayer.userID && Interface.CallHook(\"OnTeamPromote\", playerTeam, lookingAtPlayer) == null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam.SetTeamLeader(lookingAtPlayer.userID);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMapMarkersClear","Parameters":"(BasePlayer,System.Collections.Generic.List<ProtoBuf.MapNote>)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(1uL)]\r\n\tpublic void Server_ClearMapMarkers(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnMapMarkersClear\", this, State.pointsOfInterest) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tServerCurrentDeathNote?.Dispose();\r\n\t\tServerCurrentDeathNote = null;\r\n\t\tif (State.pointsOfInterest != null)\r\n\t\t{\r\n\t\t\tforeach (MapNote item in State.pointsOfInterest)\r\n\t\t\t{\r\n\t\t\t\titem?.Dispose();\r\n\t\t\t}\r\n\t\t\tState.pointsOfInterest.Clear();\r\n\t\t}\r\n\t\tDirtyPlayerState();\r\n\t\tTeamUpdate();\r\n\t\tInterface.CallHook(\"OnMapMarkersCleared\", this);\r\n\t}\r\n"},{"Name":"OnFuelCheck","Parameters":"(EntityFuelSystem)","ClassName":"EntityFuelSystem","MethodCode":"\r\n\tpublic bool HasFuel(bool forceCheck = false)\r\n\t{\r\n\t\tif (Time.time > nextFuelCheckTime || forceCheck)\r\n\t\t{\r\n\t\t\tobject obj = Interface.CallHook(\"OnFuelCheck\", this);\r\n\t\t\tif (obj is bool)\r\n\t\t\t{\r\n\t\t\t\treturn (bool)obj;\r\n\t\t\t}\r\n\t\t\tcachedHasFuel = (float)GetFuelAmount() > 0f;\r\n\t\t\tnextFuelCheckTime = Time.time + UnityEngine.Random.Range(1f, 2f);\r\n\t\t}\r\n\t\treturn cachedHasFuel;\r\n\t}\r\n"},{"Name":"OnSamSiteTargetScan","Parameters":"(SamSite,System.Collections.Generic.List<SamSite.ISamSiteTarget>)","ClassName":"SamSite","MethodCode":"\r\n\tpublic void TargetScan()\r\n\t{\r\n\t\tif (!IsPowered())\r\n\t\t{\r\n\t\t\tlastTargetVisibleTime = 0f;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (UnityEngine.Time.time > lastTargetVisibleTime + 3f)\r\n\t\t{\r\n\t\t\tClearTarget();\r\n\t\t}\r\n\t\tif (!staticRespawn)\r\n\t\t{\r\n\t\t\tint num = ((ammoItem != null && ammoItem.parent == base.inventory) ? ammoItem.amount : 0);\r\n\t\t\tbool flag = lastAmmoCount < lowAmmoThreshold;\r\n\t\t\tbool flag2 = num < lowAmmoThreshold;\r\n\t\t\tif (num != lastAmmoCount && flag != flag2)\r\n\t\t\t{\r\n\t\t\t\tMarkIODirty();\r\n\t\t\t}\r\n\t\t\tlastAmmoCount = num;\r\n\t\t}\r\n\t\tif (HasValidTarget() || IsDead())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<ISamSiteTarget> obj = Facepunch.Pool.Get<List<ISamSiteTarget>>();\r\n\t\tif (Interface.CallHook(\"OnSamSiteTargetScan\", this, obj) == null)\r\n\t\t{\r\n\t\t\tif (!IsInDefenderMode())\r\n\t\t\t{\r\n\t\t\t\tAddTargetSet(obj, targetTypeVehicle.scanRadius);\r\n\t\t\t}\r\n\t\t\tAddMLRSRockets(obj, targetTypeMissile.scanRadius);\r\n\t\t}\r\n\t\tISamSiteTarget samSiteTarget = null;\r\n\t\tforeach (ISamSiteTarget item in obj)\r\n\t\t{\r\n\t\t\tif (!item.isClient && !(item.CenterPoint().y < eyePoint.transform.position.y) && item.IsVisible(eyePoint.transform.position, item.SAMTargetType.scanRadius * 2f) && item.IsValidSAMTarget(staticRespawn) && Interface.CallHook(\"OnSamSiteTarget\", this, item) == null)\r\n\t\t\t{\r\n\t\t\t\tsamSiteTarget = item;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!ObjectEx.IsUnityNull(samSiteTarget) && currentTarget != samSiteTarget)\r\n\t\t{\r\n\t\t\tlockOnTime = UnityEngine.Time.time + 0.5f;\r\n\t\t}\r\n\t\tSetTarget(samSiteTarget);\r\n\t\tif (!ObjectEx.IsUnityNull(currentTarget))\r\n\t\t{\r\n\t\t\tlastTargetVisibleTime = UnityEngine.Time.time;\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\tif (ObjectEx.IsUnityNull(currentTarget))\r\n\t\t{\r\n\t\t\tCancelInvoke(WeaponTick);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tInvokeRandomized(WeaponTick, 0f, 0.5f, 0.2f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBookmarkInput","Parameters":"(ComputerStation,BasePlayer,InputState)","ClassName":"ComputerStation","MethodCode":"\r\n\tpublic override void PlayerServerInput(InputState inputState, BasePlayer player)\r\n\t{\r\n\t\tbase.PlayerServerInput(inputState, player);\r\n\t\tif (HasFlag(Flags.Reserved2) && currentlyControllingEnt.IsValid(serverside: true) && Interface.CallHook(\"OnBookmarkInput\", this, player, inputState) == null)\r\n\t\t{\r\n\t\t\tcurrentlyControllingEnt.Get(serverside: true).GetComponent<IRemoteControllable>().UserInput(inputState, new CameraViewerId(player.userID, 0L));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemSkinChange","Parameters":"(int,Item,RepairBench,BasePlayer)","ClassName":"RepairBench","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void ChangeSkin(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tint num = msg.read.Int32();\r\n\t\tItemId itemId = new ItemId(msg.read.UInt64());\r\n\t\tbool isValid = itemId.IsValid;\r\n\t\tbool flag = !isValid || UnityEngine.Time.realtimeSinceStartup > nextSkinChangeAudioTime;\r\n\t\tItem slot = base.inventory.GetSlot(0);\r\n\t\tif (slot == null || Interface.CallHook(\"OnItemSkinChange\", num, slot, this, player) != null || (isValid && slot.uid != itemId))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag2 = false;\r\n\t\tif (msg.player.UnlockAllSkins)\r\n\t\t{\r\n\t\t\tflag2 = true;\r\n\t\t}\r\n\t\tif (num != 0 && !flag2 && !player.blueprints.CheckSkinOwnership(num, player.userID))\r\n\t\t{\r\n\t\t\tdebugprint(\"RepairBench.ChangeSkin player does not have item :\" + num + \":\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tulong Skin = ItemDefinition.FindSkin(slot.info.itemid, num);\r\n\t\tif (Skin == slot.skin && slot.info.isRedirectOf == null)\r\n\t\t{\r\n\t\t\tdebugprint(\"RepairBench.ChangeSkin cannot apply same skin twice : \" + Skin + \": \" + slot.skin);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tnextSkinChangeAudioTime = UnityEngine.Time.realtimeSinceStartup + 0.75f;\r\n\t\t}\r\n\t\tItemSkinDirectory.Skin skin = slot.info.skins.FirstOrDefault((ItemSkinDirectory.Skin x) => (ulong)x.id == Skin);\r\n\t\tif (slot.info.isRedirectOf != null)\r\n\t\t{\r\n\t\t\tSkin = ItemDefinition.FindSkin(slot.info.isRedirectOf.itemid, num);\r\n\t\t\tskin = slot.info.isRedirectOf.skins.FirstOrDefault((ItemSkinDirectory.Skin x) => (ulong)x.id == Skin);\r\n\t\t}\r\n\t\tItemSkin itemSkin = ((skin.id == 0) ? null : (skin.invItem as ItemSkin));\r\n\t\tif (((bool)itemSkin && (itemSkin.Redirect != null || slot.info.isRedirectOf != null)) || (!itemSkin && slot.info.isRedirectOf != null))\r\n\t\t{\r\n\t\t\tItemDefinition template = ((itemSkin != null) ? itemSkin.Redirect : slot.info.isRedirectOf);\r\n\t\t\tbool flag3 = false;\r\n\t\t\tif (itemSkin != null && itemSkin.Redirect == null && slot.info.isRedirectOf != null)\r\n\t\t\t{\r\n\t\t\t\ttemplate = slot.info.isRedirectOf;\r\n\t\t\t\tflag3 = num != 0;\r\n\t\t\t}\r\n\t\t\tfloat condition = slot.condition;\r\n\t\t\tfloat maxCondition = slot.maxCondition;\r\n\t\t\tint amount = slot.amount;\r\n\t\t\tint ammoCount = 0;\r\n\t\t\tItemDefinition ammoType = null;\r\n\t\t\tif (slot.GetHeldEntity() != null && slot.GetHeldEntity() is BaseProjectile { primaryMagazine: not null } baseProjectile)\r\n\t\t\t{\r\n\t\t\t\tammoCount = baseProjectile.primaryMagazine.contents;\r\n\t\t\t\tammoType = baseProjectile.primaryMagazine.ammoType;\r\n\t\t\t}\r\n\t\t\tList<Item> obj = Facepunch.Pool.Get<List<Item>>();\r\n\t\t\tif (slot.contents != null && slot.contents.itemList != null && slot.contents.itemList.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tif (slot.contents.itemList.Count > obj.Capacity)\r\n\t\t\t\t{\r\n\t\t\t\t\tobj.Capacity = slot.contents.itemList.Count;\r\n\t\t\t\t}\r\n\t\t\t\tforeach (Item item2 in slot.contents.itemList)\r\n\t\t\t\t{\r\n\t\t\t\t\tobj.Add(item2);\r\n\t\t\t\t}\r\n\t\t\t\tforeach (Item item3 in obj)\r\n\t\t\t\t{\r\n\t\t\t\t\titem3.RemoveFromContainer();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tslot.Remove();\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tItem item = ItemManager.Create(template, 1, 0uL);\r\n\t\t\titem.MoveToContainer(base.inventory, 0, allowStack: false);\r\n\t\t\titem.maxCondition = maxCondition;\r\n\t\t\titem.condition = condition;\r\n\t\t\titem.amount = amount;\r\n\t\t\tif (item.GetHeldEntity() != null && item.GetHeldEntity() is BaseProjectile baseProjectile2)\r\n\t\t\t{\r\n\t\t\t\tif (baseProjectile2.primaryMagazine != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseProjectile2.SetAmmoCount(ammoCount);\r\n\t\t\t\t\tbaseProjectile2.primaryMagazine.ammoType = ammoType;\r\n\t\t\t\t}\r\n\t\t\t\tbaseProjectile2.ForceModsChanged();\r\n\t\t\t}\r\n\t\t\tif (obj.Count > 0 && item.contents != null)\r\n\t\t\t{\r\n\t\t\t\tforeach (Item item4 in obj)\r\n\t\t\t\t{\r\n\t\t\t\t\titem4.MoveToContainer(item.contents);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.Free(ref obj, freeElements: false);\r\n\t\t\tif (flag3)\r\n\t\t\t{\r\n\t\t\t\tApplySkinToItem(item, Skin);\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Server.SkinUsed(item.info.shortname, num);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnSkinChanged(player, this, item, Skin);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tApplySkinToItem(slot, Skin);\r\n\t\t\tFacepunch.Rust.Analytics.Server.SkinUsed(slot.info.shortname, num);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnSkinChanged(player, this, slot, Skin);\r\n\t\t}\r\n\t\tif (flag && skinchangeEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(skinchangeEffect.resourcePath, this, 0u, new Vector3(0f, 1.5f, 0f), Vector3.zero);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSupplyDropDropped","Parameters":"(BaseEntity,CargoPlane)","ClassName":"CargoPlane","MethodCode":"\r\n\tprivate void Update()\r\n\t{\r\n\t\tif (!base.isServer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsecondsTaken += Time.deltaTime;\r\n\t\tfloat num = Mathf.InverseLerp(0f, secondsToTake, secondsTaken);\r\n\t\tif (!dropped && num >= 0.5f)\r\n\t\t{\r\n\t\t\tdropped = true;\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(prefabDrop.resourcePath, base.transform.position);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.globalBroadcast = true;\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t\tInterface.CallHook(\"OnSupplyDropDropped\", baseEntity, this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tbase.transform.position = Vector3.Lerp(startPos, endPos, num);\r\n\t\tbase.transform.hasChanged = true;\r\n\t\tif (num >= 1f)\r\n\t\t{\r\n\t\t\tKill();\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseFuel","Parameters":"(EntityFuelSystem,StorageContainer,float,float)","ClassName":"EntityFuelSystem","MethodCode":"\r\n\tpublic int TryUseFuel(float seconds, float fuelUsedPerSecond)\r\n\t{\r\n\t\tStorageContainer fuelContainer = GetFuelContainer();\r\n\t\tobject obj = Interface.CallHook(\"CanUseFuel\", this, fuelContainer, seconds, fuelUsedPerSecond);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\tif (fuelContainer == null)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tItem slot = fuelContainer.inventory.GetSlot(0);\r\n\t\tif (slot == null || slot.amount < 1)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tpendingFuel += seconds * fuelUsedPerSecond;\r\n\t\tif (pendingFuel >= 1f)\r\n\t\t{\r\n\t\t\tint num = Mathf.FloorToInt(pendingFuel);\r\n\t\t\tslot.UseItem(num);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.AddPendingItems(fuelContainer?.GetParentEntity() ?? fuelContainer, slot.info.shortname, num, \"fuel_system\");\r\n\t\t\tpendingFuel -= num;\r\n\t\t\treturn num;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n"},{"Name":"OnLootSpawn","Parameters":"(LootContainer)","ClassName":"LootContainer","MethodCode":"\r\n\tpublic virtual void SpawnLoot()\r\n\t{\r\n\t\tif (base.inventory == null)\r\n\t\t{\r\n\t\t\tDebug.Log(\"CONTACT DEVELOPERS! LootContainer::PopulateLoot has null inventory!!!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbase.inventory.Clear();\r\n\t\tItemManager.DoRemoves();\r\n\t\tif (Interface.CallHook(\"OnLootSpawn\", this) == null)\r\n\t\t{\r\n\t\t\tPopulateLoot();\r\n\t\t\tif (shouldRefreshContents)\r\n\t\t\t{\r\n\t\t\t\tInvoke(SpawnLoot, UnityEngine.Random.Range(minSecondsBetweenRefresh, maxSecondsBetweenRefresh));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerAssist","Parameters":"(BasePlayer,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_Assist(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && !(msg.player == this) && IsWounded() && Interface.CallHook(\"OnPlayerAssist\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\tStopWounded(msg.player);\r\n\t\t\tmsg.player.stats.Add(\"wounded_assisted\", 1, (Stats)5);\r\n\t\t\tstats.Add(\"wounded_healed\", 1);\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnServerInitialized","Parameters":"()","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic void OpenConnection(bool useSteamServer = true)\r\n\t{\r\n\t\tif (ConVar.Server.queryport <= 0 || ConVar.Server.queryport == ConVar.Server.port)\r\n\t\t{\r\n\t\t\tConVar.Server.queryport = Math.Max(ConVar.Server.port, RCon.Port) + 1;\r\n\t\t}\r\n\t\tNetwork.Net.sv.ip = ConVar.Server.ip;\r\n\t\tNetwork.Net.sv.port = ConVar.Server.port;\r\n\t\tif (useSteamServer)\r\n\t\t{\r\n\t\t\tStartSteamServer();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tPlatformService.Instance.Initialize(RustPlatformHooks.Instance);\r\n\t\t}\r\n\t\tif (!Network.Net.sv.Start())\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.LogWarning(\"Couldn't Start Server.\");\r\n\t\t\tCloseConnection();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tNetwork.Net.sv.callbackHandler = this;\r\n\t\tNetwork.Net.sv.cryptography = new NetworkCryptographyServer();\r\n\t\tEACServer.DoStartup();\r\n\t\tInvokeRepeating(\"DoTick\", 1f, 1f / (float)ConVar.Server.tickrate);\r\n\t\tInvokeRepeating(\"DoHeartbeat\", 1f, 1f);\r\n\t\trunFrameUpdate = true;\r\n\t\tConsoleSystem.OnReplicatedVarChanged += OnReplicatedVarChanged;\r\n\t\tif (ConVar.Server.autoUploadMap)\r\n\t\t{\r\n\t\t\tMapUploader.UploadMap();\r\n\t\t}\r\n\t\tInterface.CallHook(\"IOnServerInitialized\");\r\n\t}\r\n"},{"Name":"OnDecayDamage","Parameters":"(DecayEntity)","ClassName":"DecayEntity","MethodCode":"\r\n\tpublic virtual void OnDecay(Decay decay, float decayDeltaTime)\r\n\t{\r\n\t\tlastDecayTick = UnityEngine.Time.time;\r\n\t\tif (HasParent() || !decay.ShouldDecay(this))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = decayDeltaTime * ConVar.Decay.scale;\r\n\t\tif (ConVar.Decay.upkeep)\r\n\t\t{\r\n\t\t\tupkeepTimer += num;\r\n\t\t\tif (upkeepTimer > 0f)\r\n\t\t\t{\r\n\t\t\t\tBuildingPrivlidge buildingPrivilege = GetBuildingPrivilege();\r\n\t\t\t\tif (buildingPrivilege != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tupkeepTimer -= buildingPrivilege.PurchaseUpkeepTime(this, Mathf.Max(upkeepTimer, 600f));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (upkeepTimer < 1f)\r\n\t\t\t{\r\n\t\t\t\tif (base.healthFraction < 1f && GetEntityHealScale() > 0f && base.SecondsSinceAttacked > 600f && Interface.CallHook(\"OnDecayHeal\", this) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num2 = decayDeltaTime / GetEntityDecayDuration() * GetEntityHealScale();\r\n\t\t\t\t\tHeal(MaxHealth() * num2);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tupkeepTimer = 1f;\r\n\t\t}\r\n\t\tdecayTimer += num;\r\n\t\tif (decayTimer < GetEntityDecayDelay())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"DecayTick\"))\r\n\t\t{\r\n\t\t\tfloat num3 = 1f;\r\n\t\t\tif (ConVar.Decay.upkeep)\r\n\t\t\t{\r\n\t\t\t\tif (!BypassInsideDecayMultiplier && !IsOutside())\r\n\t\t\t\t{\r\n\t\t\t\t\tnum3 *= ConVar.Decay.upkeep_inside_decay_scale;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 0; i < decayPoints.Length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tDecayPoint decayPoint = decayPoints[i];\r\n\t\t\t\t\tif (decayPoint.IsOccupied(this))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum3 -= decayPoint.protection;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnDecayDamage\", this) == null && num3 > 0f)\r\n\t\t\t{\r\n\t\t\t\tfloat num4 = num / GetEntityDecayDuration() * MaxHealth();\r\n\t\t\t\tHurt(num4 * num3 * decayVariance, DamageType.Decay);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnActiveItemChange","Parameters":"(BasePlayer,Item,ItemId)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void UpdateActiveItem(ItemId itemID)\r\n\t{\r\n\t\tAssert.IsTrue(base.isServer, \"Realm should be server!\");\r\n\t\tif (svActiveItemID == itemID)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (equippingBlocked)\r\n\t\t{\r\n\t\t\titemID = default(ItemId);\r\n\t\t}\r\n\t\tItem item = inventory.containerBelt.FindItemByUID(itemID);\r\n\t\tif (IsItemHoldRestricted(item))\r\n\t\t{\r\n\t\t\titemID = default(ItemId);\r\n\t\t}\r\n\t\tItem activeItem = GetActiveItem();\r\n\t\tif (Interface.CallHook(\"OnActiveItemChange\", this, activeItem, itemID) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsvActiveItemID = default(ItemId);\r\n\t\tif (activeItem != null)\r\n\t\t{\r\n\t\t\tHeldEntity heldEntity = activeItem.GetHeldEntity() as HeldEntity;\r\n\t\t\tif (heldEntity != null)\r\n\t\t\t{\r\n\t\t\t\theldEntity.SetHeld(bHeld: false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsvActiveItemID = itemID;\r\n\t\tSendNetworkUpdate();\r\n\t\tItem activeItem2 = GetActiveItem();\r\n\t\tif (activeItem2 != null)\r\n\t\t{\r\n\t\t\tHeldEntity heldEntity2 = activeItem2.GetHeldEntity() as HeldEntity;\r\n\t\t\tif (heldEntity2 != null)\r\n\t\t\t{\r\n\t\t\t\theldEntity2.SetHeld(bHeld: true);\r\n\t\t\t}\r\n\t\t\tNotifyGesturesNewItemEquipped();\r\n\t\t}\r\n\t\tinventory.UpdatedVisibleHolsteredItems();\r\n\t\tInterface.CallHook(\"OnActiveItemChanged\", this, activeItem, activeItem2);\r\n\t}\r\n"},{"Name":"OnOvenStarted","Parameters":"(BaseOven)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic virtual void StartCooking()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnOvenStart\", this) == null && (FindBurnable() != null || CanRunWithNoFuel))\r\n\t\t{\r\n\t\t\tbase.inventory.temperature = cookingTemperature;\r\n\t\t\tUpdateAttachmentTemperature();\r\n\t\t\tInvokeRepeating(Cook, 0.5f, 0.5f);\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tInterface.CallHook(\"OnOvenStarted\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSupplyDropLanded","Parameters":"(SupplyDrop)","ClassName":"SupplyDrop","MethodCode":"\r\n\tprivate void OnCollisionEnter(Collision collision)\r\n\t{\r\n\t\tbool flag = ((1 << collision.collider.gameObject.layer) & 0x40A10111) > 0;\r\n\t\tif (((1 << collision.collider.gameObject.layer) & 0x8000000) > 0 && CollisionEx.GetEntity(collision) is Tugboat)\r\n\t\t{\r\n\t\t\tflag = true;\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tRemoveParachute();\r\n\t\t\tMakeLootable();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnSupplyDropLanded\", this);\r\n\t}\r\n"},{"Name":"OnSignalBroadcast","Parameters":"(BaseEntity,Network.Connection)","ClassName":"BaseEntity","MethodCode":"\r\n\tpublic void SignalBroadcast(Signal signal, string arg, Connection sourceConnection = null)\r\n\t{\r\n\t\tif (net != null && net.group != null && !base.limitNetworking && Interface.CallHook(\"OnSignalBroadcast\", this, sourceConnection) == null)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"SignalFromServerEx\", this, SendMethod.Unreliable, Priority.Immediate), (int)signal, arg, sourceConnection?.userid ?? 0);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnOvenCooked","Parameters":"(BaseOven,Item,BaseEntity)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic void Cook()\r\n\t{\r\n\t\tif (HasFlag(Flags.Reserved8))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem item = FindBurnable();\r\n\t\tif (Interface.CallHook(\"OnOvenCook\", this, item) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (item == null && !CanRunWithNoFuel)\r\n\t\t{\r\n\t\t\tStopCooking();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (Item item2 in base.inventory.itemList)\r\n\t\t{\r\n\t\t\tif (item2.position >= _inputSlotIndex && item2.position < _inputSlotIndex + inputSlots && !item2.HasFlag(Item.Flag.Cooking))\r\n\t\t\t{\r\n\t\t\t\titem2.SetFlag(Item.Flag.Cooking, b: true);\r\n\t\t\t\titem2.MarkDirty();\r\n\t\t\t}\r\n\t\t}\r\n\t\tIncreaseCookTime(0.5f * GetSmeltingSpeed());\r\n\t\tBaseEntity slot = GetSlot(Slot.FireMod);\r\n\t\tif ((bool)slot)\r\n\t\t{\r\n\t\t\tslot.SendMessage(\"Cook\", 0.5f, SendMessageOptions.DontRequireReceiver);\r\n\t\t}\r\n\t\tif (item != null)\r\n\t\t{\r\n\t\t\tItemModBurnable itemModBurnable = item.info.ItemModBurnable;\r\n\t\t\titem.fuel -= 0.5f * (cookingTemperature / 200f);\r\n\t\t\tif (!item.HasFlag(Item.Flag.OnFire))\r\n\t\t\t{\r\n\t\t\t\titem.SetFlag(Item.Flag.OnFire, b: true);\r\n\t\t\t\titem.MarkDirty();\r\n\t\t\t}\r\n\t\t\tif (item.fuel <= 0f)\r\n\t\t\t{\r\n\t\t\t\tConsumeFuel(item, itemModBurnable);\r\n\t\t\t}\r\n\t\t}\r\n\t\tOnCooked();\r\n\t\tInterface.CallHook(\"OnOvenCooked\", this, item, slot);\r\n\t}\r\n"},{"Name":"OnConstructionPlace","Parameters":"(BaseEntity,Construction,Construction.Target,BasePlayer)","ClassName":"Planner","MethodCode":"\r\n\tpublic GameObject DoPlacement(Construction.Target placement, Construction component)\r\n\t{\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = component.CreateConstruction(placement, bNeedsValidPlacement: true);\r\n\t\tif (!baseEntity)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfloat num = 1f;\r\n\t\tfloat num2 = 0f;\r\n\t\tItem ownerItem = GetOwnerItem();\r\n\t\tif (ownerItem != null)\r\n\t\t{\r\n\t\t\tbaseEntity.skinID = ownerItem.skin;\r\n\t\t\tif (ownerItem.hasCondition)\r\n\t\t\t{\r\n\t\t\t\tnum = ownerItem.conditionNormalized;\r\n\t\t\t}\r\n\t\t}\r\n\t\tPoolableEx.AwakeFromInstantiate(baseEntity.gameObject);\r\n\t\tBuildingBlock buildingBlock = baseEntity as BuildingBlock;\r\n\t\tif ((bool)buildingBlock)\r\n\t\t{\r\n\t\t\tbuildingBlock.blockDefinition = PrefabAttribute.server.Find<Construction>(buildingBlock.prefabID);\r\n\t\t\tif (!buildingBlock.blockDefinition)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogError(\"Placing a building block that has no block definition!\");\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tbuildingBlock.SetGrade(buildingBlock.blockDefinition.defaultGrade.gradeBase.type);\r\n\t\t\tnum2 = buildingBlock.currentGrade.maxHealth;\r\n\t\t}\r\n\t\tBaseCombatEntity baseCombatEntity = baseEntity as BaseCombatEntity;\r\n\t\tif ((bool)baseCombatEntity)\r\n\t\t{\r\n\t\t\tnum2 = ((buildingBlock != null) ? buildingBlock.currentGrade.maxHealth : baseCombatEntity.startHealth);\r\n\t\t\tbaseCombatEntity.ResetLifeStateOnSpawn = false;\r\n\t\t\tbaseCombatEntity.InitializeHealth(num2 * num, num2);\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnConstructionPlace\", baseEntity, component, placement, ownerPlayer) != null)\r\n\t\t{\r\n\t\t\tif (baseEntity.IsValid())\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.KillMessage();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tGameManager.Destroy(baseEntity);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tbaseEntity.OnPlaced(ownerPlayer);\r\n\t\tbaseEntity.OwnerID = ownerPlayer.userID;\r\n\t\tbaseEntity.Spawn();\r\n\t\tif ((bool)buildingBlock)\r\n\t\t{\r\n\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/build/frame_place.prefab\", baseEntity, 0u, Vector3.zero, Vector3.zero);\r\n\t\t}\r\n\t\tStabilityEntity stabilityEntity = baseEntity as StabilityEntity;\r\n\t\tif ((bool)stabilityEntity)\r\n\t\t{\r\n\t\t\tstabilityEntity.UpdateSurroundingEntities();\r\n\t\t}\r\n\t\treturn baseEntity.gameObject;\r\n\t}\r\n"},{"Name":"OnGrowableStateChange","Parameters":"(GrowableEntity,PlantProperties.State)","ClassName":"GrowableEntity","MethodCode":"\r\n\tpublic void ChangeState(PlantProperties.State state, bool resetAge, bool loading = false)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnGrowableStateChange\", this, state) != null || (base.isServer && State == state))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tState = state;\r\n\t\tif (!base.isServer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!loading)\r\n\t\t{\r\n\t\t\tif (currentStage.resources > 0f)\r\n\t\t\t{\r\n\t\t\t\tyieldPool = currentStage.yield;\r\n\t\t\t}\r\n\t\t\tif (state == PlantProperties.State.Crossbreed)\r\n\t\t\t{\r\n\t\t\t\tif (Properties.CrossBreedEffect.isValid)\r\n\t\t\t\t{\r\n\t\t\t\t\tEffect.server.Run(Properties.CrossBreedEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t\t}\r\n\t\t\t\tGrowableGenetics.CrossBreed(this);\r\n\t\t\t}\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t\tif (resetAge)\r\n\t\t{\r\n\t\t\tstageAge = 0f;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootEntityEnd","Parameters":"(BasePlayer,ContainerIOEntity)","ClassName":"ContainerIOEntity","MethodCode":"\r\n\tpublic virtual void PlayerStoppedLooting(BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnLootEntityEnd\", player, this);\r\n\t\tSetFlag(Flags.Open, b: false);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"CanBeTargeted","Parameters":"(BaseCombatEntity,HelicopterTurret)","ClassName":"HelicopterTurret","MethodCode":"\r\n\tpublic bool InFiringArc(BaseCombatEntity potentialtarget)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeTargeted\", potentialtarget, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn AngleToTarget(potentialtarget) < 80f;\r\n\t}\r\n"},{"Name":"OnRackedWeaponLoad","Parameters":"(Item,ItemDefinition,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\t[RPC_Server]\r\n\tprivate void LoadWeaponAmmo(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!player)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint gridIndex = msg.read.Int32();\r\n\t\tint num = msg.read.Int32();\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(gridIndex);\r\n\t\tif (weaponAtIndex == null || !weaponAtIndex.CanBeReloadedAtWeaponRack())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.GetSlot(weaponAtIndex.InventoryIndex);\r\n\t\tif (slot == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity heldEntity = slot.GetHeldEntity();\r\n\t\tif (heldEntity == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseProjectile component = heldEntity.GetComponent<BaseProjectile>();\r\n\t\tif (component == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(num);\r\n\t\tif (itemDefinition == null || Interface.CallHook(\"OnRackedWeaponLoad\", slot, itemDefinition, player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (itemDefinition == SnowballGun.SnowballInventoryItem)\r\n\t\t{\r\n\t\t\titemDefinition = SnowballGun.SnowballAmmoItem;\r\n\t\t\tif (!(itemDefinition != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tnum = itemDefinition.itemid;\r\n\t\t}\r\n\t\tif (itemDefinition == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModProjectile component2 = itemDefinition.GetComponent<ItemModProjectile>();\r\n\t\tif (!(component2 == null) && component2.IsAmmo(component.primaryMagazine.definition.ammoTypes))\r\n\t\t{\r\n\t\t\tif (num != component.primaryMagazine.ammoType.itemid && component.primaryMagazine.contents > 0)\r\n\t\t\t{\r\n\t\t\t\tplayer.GiveItem(ItemManager.CreateByItemID(component.primaryMagazine.ammoType.itemid, component.primaryMagazine.contents, 0uL));\r\n\t\t\t\tcomponent.SetAmmoCount(0);\r\n\t\t\t}\r\n\t\t\tcomponent.primaryMagazine.ammoType = itemDefinition;\r\n\t\t\tcomponent.TryReloadMagazine(player.inventory);\r\n\t\t\tSetSlotAmmoDetails(weaponAtIndex, slot);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tClientRPC(RpcTarget.Player(\"PlayAmmoSound\", player), itemDefinition.itemid, 0);\r\n\t\t\tInterface.CallHook(\"OnRackedWeaponLoaded\", slot, itemDefinition, player, this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamUpdated","Parameters":"(ulong,ProtoBuf.PlayerTeam,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void TeamUpdate(bool fullTeamUpdate)\r\n\t{\r\n\t\tif (!RelationshipManager.TeamsEnabled() || !IsConnected || currentTeam == 0L)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRelationshipManager.PlayerTeam playerTeam = RelationshipManager.ServerInstance.FindTeam(currentTeam);\r\n\t\tif (playerTeam == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = 0;\r\n\t\tint num2 = 0;\r\n\t\tusing PlayerTeam playerTeam2 = Facepunch.Pool.Get<PlayerTeam>();\r\n\t\tplayerTeam2.teamLeader = playerTeam.teamLeader;\r\n\t\tplayerTeam2.teamID = playerTeam.teamID;\r\n\t\tplayerTeam2.teamName = playerTeam.teamName;\r\n\t\tplayerTeam2.members = Facepunch.Pool.Get<List<PlayerTeam.TeamMember>>();\r\n\t\tplayerTeam2.teamLifetime = playerTeam.teamLifetime;\r\n\t\tplayerTeam2.teamPings = Facepunch.Pool.Get<List<MapNote>>();\r\n\t\tforeach (ulong member in playerTeam.members)\r\n\t\t{\r\n\t\t\tBasePlayer basePlayer = RelationshipManager.FindByID(member);\r\n\t\t\tif ((bool)basePlayer && basePlayer.IsInTutorial)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tPlayerTeam.TeamMember teamMember = Facepunch.Pool.Get<PlayerTeam.TeamMember>();\r\n\t\t\tteamMember.displayName = ((basePlayer != null) ? basePlayer.displayName : (SingletonComponent<ServerMgr>.Instance.persistance.GetPlayerName(member) ?? \"DEAD\"));\r\n\t\t\tteamMember.healthFraction = ((basePlayer != null && basePlayer.IsAlive()) ? basePlayer.healthFraction : 0f);\r\n\t\t\tteamMember.position = ((basePlayer != null) ? basePlayer.transform.position : Vector3.zero);\r\n\t\t\tteamMember.online = basePlayer != null && !basePlayer.IsSleeping();\r\n\t\t\tteamMember.wounded = basePlayer != null && basePlayer.IsWounded();\r\n\t\t\tif ((!sentInstrumentTeamAchievement || !sentSummerTeamAchievement) && basePlayer != null)\r\n\t\t\t{\r\n\t\t\t\tif ((bool)basePlayer.GetHeldEntity() && basePlayer.GetHeldEntity().IsInstrument())\r\n\t\t\t\t{\r\n\t\t\t\t\tnum++;\r\n\t\t\t\t}\r\n\t\t\t\tif (basePlayer.isMounted)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (basePlayer.GetMounted().IsInstrument())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (basePlayer.GetMounted().IsSummerDlcVehicle)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum2++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (num >= 4 && !sentInstrumentTeamAchievement)\r\n\t\t\t\t{\r\n\t\t\t\t\tGiveAchievement(\"TEAM_INSTRUMENTS\");\r\n\t\t\t\t\tsentInstrumentTeamAchievement = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (num2 >= 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tGiveAchievement(\"SUMMER_INFLATABLE\");\r\n\t\t\t\t\tsentSummerTeamAchievement = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tteamMember.userID = member;\r\n\t\t\tplayerTeam2.members.Add(teamMember);\r\n\t\t\tif (basePlayer != null)\r\n\t\t\t{\r\n\t\t\t\tif (basePlayer.State.pings != null && basePlayer.State.pings.Count > 0 && basePlayer != this)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayerTeam2.teamPings.AddRange(basePlayer.State.pings);\r\n\t\t\t\t}\r\n\t\t\t\tif (fullTeamUpdate && basePlayer != this)\r\n\t\t\t\t{\r\n\t\t\t\t\tbasePlayer.TeamUpdate(fullTeamUpdate: false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayerTeam2.leaderMapNotes = Facepunch.Pool.Get<List<MapNote>>();\r\n\t\tPlayerState playerState = SingletonComponent<ServerMgr>.Instance.playerStateManager.Get(playerTeam.teamLeader);\r\n\t\tif (playerState?.pointsOfInterest != null)\r\n\t\t{\r\n\t\t\tforeach (MapNote item in playerState.pointsOfInterest)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam2.leaderMapNotes.Add(item);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnTeamUpdated\", currentTeam, playerTeam2, this) == null)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.PlayerAndSpectators(\"CLIENT_ReceiveTeamInfo\", this), playerTeam2);\r\n\t\t\tif (playerTeam2.leaderMapNotes != null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam2.leaderMapNotes.Clear();\r\n\t\t\t}\r\n\t\t\tif (playerTeam2.teamPings != null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam2.teamPings.Clear();\r\n\t\t\t}\r\n\t\t\tBasePlayer basePlayer2 = FindByID(playerTeam.teamLeader);\r\n\t\t\tif (fullTeamUpdate && basePlayer2 != null && basePlayer2 != this)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer2.TeamUpdate(fullTeamUpdate: false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRconConnection","Parameters":"(System.Net.IPAddress)","ClassName":"RCon","MethodCode":"\r\n\t\tprivate void ProcessConnections()\r\n\t\t{\r\n\t\t\tif (!server.Pending())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tSocket socket = server.AcceptSocket();\r\n\t\t\tif (socket != null)\r\n\t\t\t{\r\n\t\t\t\tIPEndPoint iPEndPoint = socket.RemoteEndPoint as IPEndPoint;\r\n\t\t\t\tif (Interface.CallHook(\"OnRconConnection\", iPEndPoint.Address) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tsocket.Close();\r\n\t\t\t\t}\r\n\t\t\t\telse if (IsBanned(iPEndPoint.Address))\r\n\t\t\t\t{\r\n\t\t\t\t\tUnityEngine.Debug.Log(\"[RCON] Ignoring connection - banned. \" + iPEndPoint.Address.ToString());\r\n\t\t\t\t\tsocket.Close();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tclients.Add(new RConClient(socket));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n"},{"Name":"OnEntityTakeDamage","Parameters":"(ResourceEntity,HitInfo)","ClassName":"ResourceEntity","MethodCode":"\r\n\tpublic override void OnAttacked(HitInfo info)\r\n\t{\r\n\t\tif (!base.isServer || isKilled || Interface.CallHook(\"OnEntityTakeDamage\", this, info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (resourceDispenser != null)\r\n\t\t{\r\n\t\t\tresourceDispenser.OnAttacked(info);\r\n\t\t}\r\n\t\tif (!info.DidGather)\r\n\t\t{\r\n\t\t\tif ((bool)baseProtection)\r\n\t\t\t{\r\n\t\t\t\tbaseProtection.Scale(info.damageTypes);\r\n\t\t\t}\r\n\t\t\tfloat num = info.damageTypes.Total();\r\n\t\t\thealth -= num;\r\n\t\t\tif (health <= 0f)\r\n\t\t\t{\r\n\t\t\t\tOnKilled(info);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tOnHealthChanged();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnOutputUpdate","Parameters":"(IOEntity)","ClassName":"IOEntity","MethodCode":"\r\n\tpublic virtual void UpdateOutputs()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnOutputUpdate\", this) != null || !ShouldUpdateOutputs() || !ensureOutputsUpdated)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tensureOutputsUpdated = false;\r\n\t\tusing (TimeWarning.New(\"ProcessIOOutputs\"))\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < outputs.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tIOSlot iOSlot = outputs[i];\r\n\t\t\t\tbool flag = true;\r\n\t\t\t\tIOEntity iOEntity = iOSlot.connectedTo.Get();\r\n\t\t\t\tif (!(iOEntity != null))\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (ioType == IOType.Fluidic && !DisregardGravityRestrictionsOnLiquid && !iOEntity.DisregardGravityRestrictionsOnLiquid)\r\n\t\t\t\t{\r\n\t\t\t\t\tusing (TimeWarning.New(\"FluidOutputProcessing\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!iOEntity.AllowLiquidPassthrough(this, base.transform.TransformPoint(iOSlot.handlePosition)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint passthroughAmount = GetPassthroughAmount(i);\r\n\t\t\t\tiOEntity.UpdateFromInput(flag ? passthroughAmount : 0, iOSlot.connectedToSlot);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExcavatorResourceSet","Parameters":"(ExcavatorArm,string,BasePlayer)","ClassName":"ExcavatorArm","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_SetResourceTarget(RPCMessage msg)\r\n\t{\r\n\t\tstring text = msg.read.String();\r\n\t\tif (Interface.CallHook(\"OnExcavatorResourceSet\", this, text, msg.player) == null)\r\n\t\t{\r\n\t\t\tswitch (text)\r\n\t\t\t{\r\n\t\t\tcase \"HQM\":\r\n\t\t\t\tresourceMiningIndex = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Sulfur\":\r\n\t\t\t\tresourceMiningIndex = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Stone\":\r\n\t\t\t\tresourceMiningIndex = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Metal\":\r\n\t\t\t\tresourceMiningIndex = 3;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!IsOn())\r\n\t\t\t{\r\n\t\t\t\tBeginMining();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerPveDamage","Parameters":"(BaseEntity,HitInfo,BuildingBlock)","ClassName":"BuildingBlock","MethodCode":"\r\n\tpublic override void Hurt(HitInfo info)\r\n\t{\r\n\t\tif (ConVar.Server.pve && (bool)info.Initiator && info.Initiator is BasePlayer)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnPlayerPveDamage\", info.Initiator, info, this) == null)\r\n\t\t\t{\r\n\t\t\t\t(info.Initiator as BasePlayer).Hurt(info.damageTypes.Total(), DamageType.Generic);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif ((bool)info.Initiator && info.Initiator is BasePlayer { IsInTutorial: not false })\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (HasWallpaper())\r\n\t\t\t{\r\n\t\t\t\tDamageType majorityDamageType = info.damageTypes.GetMajorityDamageType();\r\n\t\t\t\tbool flag = info.damageTypes.Contains(DamageType.Explosion);\r\n\t\t\t\tDamageTypeList damageTypeList = info.damageTypes.Clone();\r\n\t\t\t\tif (wallpaperProtection != null)\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProtection.Scale(damageTypeList);\r\n\t\t\t\t}\r\n\t\t\t\tfloat totalDamage = damageTypeList.Total();\r\n\t\t\t\tif (majorityDamageType == DamageType.Decay || flag || majorityDamageType == DamageType.Heat)\r\n\t\t\t\t{\r\n\t\t\t\t\tDamageWallpaper(totalDamage);\r\n\t\t\t\t\tDamageWallpaper(totalDamage, 1);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tbool flag2 = false;\r\n\t\t\t\t\tfor (int i = 0; i < propDirection.Length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (propDirection[i].IsWeakspot(base.transform, info))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tflag2 = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDamageWallpaper(totalDamage, (!flag2) ? 1 : 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbase.Hurt(info);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnContainerDropItems","Parameters":"(ItemContainer)","ClassName":"DropUtil","MethodCode":"\tpublic static void DropItems(ItemContainer container, Vector3 position)\r\n\t{\r\n\t\tif (!Server.dropitems || container == null || container.itemList == null || Interface.CallHook(\"OnContainerDropItems\", container) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = 0.25f;\r\n\t\tItem[] array = container.itemList.ToArray();\r\n\t\tforeach (Item item in array)\r\n\t\t{\r\n\t\t\tfloat num2 = UnityEngine.Random.Range(0f, 2f);\r\n\t\t\titem.RemoveFromContainer();\r\n\t\t\tBaseEntity baseEntity = item.CreateWorldObject(position + new Vector3(UnityEngine.Random.Range(0f - num, num), 1f, UnityEngine.Random.Range(0f - num, num)));\r\n\t\t\tif (baseEntity == null)\r\n\t\t\t{\r\n\t\t\t\titem.Remove();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (baseEntity is DroppedItem droppedItem && container.entityOwner is LootContainer)\r\n\t\t\t{\r\n\t\t\t\tdroppedItem.DropReason = DroppedItem.DropReasonEnum.Loot;\r\n\t\t\t}\r\n\t\t\tif (num2 > 0f)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.SetVelocity(new Vector3(UnityEngine.Random.Range(-1f, 1f), UnityEngine.Random.Range(0f, 1f), UnityEngine.Random.Range(-1f, 1f)) * num2);\r\n\t\t\t\tbaseEntity.SetAngularVelocity(new Vector3(UnityEngine.Random.Range(-10f, 10f), UnityEngine.Random.Range(-10f, 10f), UnityEngine.Random.Range(-10f, 10f)) * num2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnGrowableGathered","Parameters":"(GrowableEntity,Item,BasePlayer)","ClassName":"GrowableEntity","MethodCode":"\r\n\tpublic void GiveFruit(BasePlayer player, int amount, bool applyCondition, bool eat)\r\n\t{\r\n\t\tItem item = ItemManager.Create(Properties.pickupItem, amount, 0uL);\r\n\t\tif (applyCondition)\r\n\t\t{\r\n\t\t\titem.conditionNormalized = Properties.fruitVisualScaleCurve.Evaluate(StageProgressFraction);\r\n\t\t}\r\n\t\tif (eat && player != null && IsFood())\r\n\t\t{\r\n\t\t\tItemModConsume component = item.info.GetComponent<ItemModConsume>();\r\n\t\t\tif (component != null)\r\n\t\t\t{\r\n\t\t\t\tcomponent.DoAction(item, player);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (player != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnGrowableGathered\", this, item, player);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, this, player);\r\n\t\t\tplayer.GiveItem(item, GiveItemReason.ResourceHarvested);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\titem.Drop(base.transform.position + Vector3.up * 0.5f, Vector3.up * 1f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemDeployed","Parameters":"(Deployer,BaseEntity,BaseEntity)","ClassName":"Deployer","MethodCode":"\r\n\tpublic void DoDeploy_Slot(Deployable deployable, Ray ray, NetworkableId entityID)\r\n\t{\r\n\t\tif (!HasItemAmount())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!ownerPlayer.CanBuild())\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.NoPermission, false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = BaseNetworkable.serverEntities.Find(entityID) as BaseEntity;\r\n\t\tif (baseEntity == null || !baseEntity.HasSlot(deployable.slot) || baseEntity.GetSlot(deployable.slot) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ownerPlayer.Distance(baseEntity) > 3f)\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.TooFarAway, false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!ownerPlayer.CanBuild(baseEntity.WorldSpaceBounds()))\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.NoPermission, false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ownerPlayer.IsInTutorial)\r\n\t\t{\r\n\t\t\tTutorialIsland currentTutorialIsland = ownerPlayer.GetCurrentTutorialIsland();\r\n\t\t\tif (currentTutorialIsland != null && !currentTutorialIsland.CheckPlacement(ownerPlayer, deployable, baseEntity.transform.position, baseEntity.transform.rotation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tItem ownerItem = GetOwnerItem();\r\n\t\tItemModDeployable modDeployable = GetModDeployable();\r\n\t\tBaseEntity baseEntity2 = GameManager.server.CreateEntity(modDeployable.entityPrefab.resourcePath);\r\n\t\tif (baseEntity2 != null)\r\n\t\t{\r\n\t\t\tbaseEntity2.skinID = ownerItem.skin;\r\n\t\t\tbaseEntity2.SetParent(baseEntity, baseEntity.GetSlotAnchorName(deployable.slot));\r\n\t\t\tbaseEntity2.OwnerID = ownerPlayer.userID;\r\n\t\t\tbaseEntity2.OnDeployed(baseEntity, ownerPlayer, ownerItem);\r\n\t\t\tbaseEntity2.Spawn();\r\n\t\t\tbaseEntity.SetSlot(deployable.slot, baseEntity2);\r\n\t\t\tif (deployable.placeEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(deployable.placeEffect.resourcePath, baseEntity.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tif (ownerPlayer.IsInTutorial)\r\n\t\t\t{\r\n\t\t\t\tTutorialIsland currentTutorialIsland2 = ownerPlayer.GetCurrentTutorialIsland();\r\n\t\t\t\tif (currentTutorialIsland2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentTutorialIsland2.OnPlayerBuiltConstruction(ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (GetOwnerItemDefinition() != null)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ProcessMissionEvent(BaseMission.MissionEventType.DEPLOY, new BaseMission.MissionEventPayload\r\n\t\t\t\t{\r\n\t\t\t\t\tWorldPosition = baseEntity2.transform.position,\r\n\t\t\t\t\tUintIdentifier = baseEntity2.prefabID,\r\n\t\t\t\t\tIntIdentifier = GetOwnerItemDefinition().itemid\r\n\t\t\t\t}, 1f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tmodDeployable.OnDeployed(baseEntity2, ownerPlayer);\r\n\t\tInterface.CallHook(\"OnItemDeployed\", this, baseEntity, baseEntity2);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnEntityBuilt(baseEntity2, ownerPlayer);\r\n\t\tif (!ownerPlayer.IsInCreativeMode || !Creative.freeBuild)\r\n\t\t{\r\n\t\t\tUseItemAmount(1);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStructureUpgrade","Parameters":"(BuildingBlock,BasePlayer,BuildingGrade.Enum,ulong)","ClassName":"BuildingBlock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server]\r\n\tpublic void DoUpgradeToGrade(RPCMessage msg)\r\n\t{\r\n\t\tif (!msg.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConstructionGrade constructionGrade = blockDefinition.GetGrade((BuildingGrade.Enum)msg.read.Int32(), msg.read.UInt64());\r\n\t\tif (constructionGrade == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CanChangeToGrade(constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin, msg.player))\r\n\t\t{\r\n\t\t\tif (!(DeployVolume.LastDeployHit != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBaseEntity baseEntity = GameObjectEx.ToBaseEntity(DeployVolume.LastDeployHit);\r\n\t\t\tif (baseEntity != null && baseEntity is BasePlayer basePlayer)\r\n\t\t\t{\r\n\t\t\t\tulong currentTeam = msg.player.currentTeam;\r\n\t\t\t\tif (currentTeam != 0L && currentTeam == basePlayer.currentTeam)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring playerNameStreamSafe = NameHelper.GetPlayerNameStreamSafe(msg.player, basePlayer);\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, ConstructionErrors.BlockedByPlayer, false, playerNameStreamSafe);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnStructureUpgrade\", this, msg.player, constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin) != null || !CanAffordUpgrade(constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin, msg.player))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (base.SecondsSinceAttacked < 30f)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, ConstructionErrors.CantUpgradeRecentlyDamaged, false, (30f - base.SecondsSinceAttacked).ToString(\"N0\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!constructionGrade.gradeBase.alwaysUnlock && constructionGrade.gradeBase.skin != 0L && !msg.player.blueprints.steamInventory.HasItem((int)constructionGrade.gradeBase.skin))\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, ConstructionErrors.SkinNotOwned, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tPayForUpgrade(constructionGrade, msg.player);\r\n\t\t\tif (msg.player != null)\r\n\t\t\t{\r\n\t\t\t\tplayerCustomColourToApply = GetShippingContainerBlockColourForPlayer(msg.player);\r\n\t\t\t}\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"DoUpgradeEffect\"), (int)constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin);\r\n\t\t\tBuildingGrade.Enum @enum = grade;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnBuildingBlockUpgraded(msg.player, this, constructionGrade.gradeBase.type, playerCustomColourToApply, constructionGrade.gradeBase.skin);\r\n\t\t\tOnSkinChanged(skinID, constructionGrade.gradeBase.skin);\r\n\t\t\tChangeGrade(constructionGrade.gradeBase.type, playEffect: true);\r\n\t\t\tif (msg.player != null && @enum != constructionGrade.gradeBase.type)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ProcessMissionEvent(BaseMission.MissionEventType.UPGRADE_BUILDING_GRADE, new BaseMission.MissionEventPayload\r\n\t\t\t\t{\r\n\t\t\t\t\tNetworkIdentifier = net.ID,\r\n\t\t\t\t\tIntIdentifier = (int)constructionGrade.gradeBase.type\r\n\t\t\t\t}, 1f);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnStructureUpgraded\", this, msg.player, constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseMailbox","Parameters":"(BasePlayer,Mailbox)","ClassName":"Mailbox","MethodCode":"\r\n\tpublic virtual bool PlayerIsOwner(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseMailbox\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn player.CanBuild();\r\n\t}\r\n"},{"Name":"OnRotateVendingMachine","Parameters":"(VendingMachine,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_RotateVM(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnRotateVendingMachine\", this, msg.player) == null && CanRotate())\r\n\t\t{\r\n\t\t\tUpdateEmptyFlag();\r\n\t\t\tif (msg.player.CanBuild() && IsInventoryEmpty())\r\n\t\t\t{\r\n\t\t\t\tbase.transform.rotation = Quaternion.LookRotation(-base.transform.forward, base.transform.up);\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootEntityEnd","Parameters":"(BasePlayer,LootableCorpse)","ClassName":"LootableCorpse","MethodCode":"\r\n\tpublic void PlayerStoppedLooting(BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnLootEntityEnd\", player, this);\r\n\t\tResetRemovalTime();\r\n\t\tSetFlag(Flags.Open, b: false);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnTrapDisarm","Parameters":"(Landmine,BasePlayer)","ClassName":"Landmine","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_Disarm(RPCMessage rpc)\r\n\t{\r\n\t\tif ((ulong)rpc.player.userID != triggerPlayerID && Armed() && Interface.CallHook(\"OnTrapDisarm\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.On, b: false);\r\n\t\t\tif (UnityEngine.Random.Range(0, 100) < 15)\r\n\t\t\t{\r\n\t\t\t\tInvoke(TryExplode, 0.05f);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\trpc.player.GiveItem(ItemManager.CreateByName(\"trap.landmine\", 1, 0uL), GiveItemReason.PickedUp);\r\n\t\t\tKill();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretRotate","Parameters":"(AutoTurret,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tprivate void FlipAim(RPCMessage rpc)\r\n\t{\r\n\t\tif (!IsOnline() && IsAuthed(rpc.player) && !booting && Interface.CallHook(\"OnTurretRotate\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tbase.transform.rotation = Quaternion.LookRotation(-base.transform.forward, base.transform.up);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBookmarkControlEnded","Parameters":"(ComputerStation,BasePlayer,IRemoteControllable)","ClassName":"ComputerStation","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void BeginControllingBookmark(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!IsPlayerAdmin(player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (!IsValidIdentifier(text) || !controlBookmarks.Contains(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIRemoteControllable remoteControllable = RemoteControlEntity.FindByID(text);\r\n\t\tif (remoteControllable == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity ent = remoteControllable.GetEnt();\r\n\t\tif (ent == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"RC identifier \" + text + \" was found but has a null or destroyed entity, this should never happen\");\r\n\t\t}\r\n\t\telse if (remoteControllable.CanControl(player.userID) && !(Vector3.Distance(base.transform.position, ent.transform.position) >= remoteControllable.MaxRange) && Interface.CallHook(\"OnBookmarkControl\", this, player, text, remoteControllable) == null)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = currentlyControllingEnt.Get(serverside: true);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tIRemoteControllable component = baseEntity.GetComponent<IRemoteControllable>();\r\n\t\t\t\tcomponent?.StopControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t\t\tInterface.CallHook(\"OnBookmarkControlEnded\", this, player, component);\r\n\t\t\t}\r\n\t\t\tplayer.net.SwitchSecondaryGroup(ent.net.group);\r\n\t\t\tcurrentlyControllingEnt.uid = ent.net.ID;\r\n\t\t\tcurrentPlayerID = player.userID;\r\n\t\t\tbool b = remoteControllable.InitializeControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t\tSetFlag(Flags.Reserved2, b, recursive: false, networkupdate: false);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tSendControlBookmarks(player);\r\n\t\t\tif (Rust.GameInfo.HasAchievements && remoteControllable.GetEnt() is CCTV_RC)\r\n\t\t\t{\r\n\t\t\t\tInvokeRepeating(CheckCCTVAchievement, 1f, 3f);\r\n\t\t\t}\r\n\t\t\tInvokeRepeating(ControlCheck, 0f, 0f);\r\n\t\t\tInterface.CallHook(\"OnBookmarkControlStarted\", this, player, text, remoteControllable);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseGesture","Parameters":"(BasePlayer,GestureConfig)","ClassName":"GestureConfig","MethodCode":"\r\n\tpublic bool IsOwnedBy(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseGesture\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (forceUnlock)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (gestureType == GestureType.NPC)\r\n\t\t{\r\n\t\t\treturn player.IsNpc;\r\n\t\t}\r\n\t\tif (gestureType == GestureType.Cinematic)\r\n\t\t{\r\n\t\t\treturn player.IsAdmin;\r\n\t\t}\r\n\t\tif (dlcItem != null && dlcItem.CanUse(player))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (inventoryItem != null && player.blueprints.steamInventory.HasItem(inventoryItem.id))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnClientDisconnect","Parameters":"(Network.Connection,string)","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic void ReadDisconnectReason(Message packet)\r\n\t{\r\n\t\tstring text = packet.read.String(4096);\r\n\t\tstring text2 = packet.connection.ToString();\r\n\t\tif (!string.IsNullOrEmpty(text) && !string.IsNullOrEmpty(text2))\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnClientDisconnect\", packet.connection, text);\r\n\t\t\tDebugEx.Log(text2 + \" disconnecting: \" + text);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityMarkHostile","Parameters":"(BaseCombatEntity,float)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual void MarkHostileFor(float duration = 60f)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEntityMarkHostile\", this, duration) == null)\r\n\t\t{\r\n\t\t\tfloat b = UnityEngine.Time.realtimeSinceStartup + duration;\r\n\t\t\tunHostileTime = Mathf.Max(unHostileTime, b);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSprayRemove","Parameters":"(SprayCanSpray,BasePlayer)","ClassName":"SprayCanSpray","MethodCode":"\r\n\t[RPC_Server]\r\n\tprivate void Server_RequestWaterClear(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!(player == null) && Menu_WaterClear_ShowIf(player) && Interface.CallHook(\"OnSprayRemove\", this, player) == null)\r\n\t\t{\r\n\t\t\tKill();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnServerRestartInterrupt","Parameters":"()","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic static void RestartServer(string strNotice, int iSeconds)\r\n\t{\r\n\t\tif (SingletonComponent<ServerMgr>.Instance == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (SingletonComponent<ServerMgr>.Instance.restartCoroutine != null)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnServerRestartInterrupt\") != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tConsoleNetwork.BroadcastToAllClients(\"chat.add\", 2, 0, \"<color=#fff>SERVER</color> Restart interrupted!\");\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.StopCoroutine(SingletonComponent<ServerMgr>.Instance.restartCoroutine);\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.restartCoroutine = null;\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnServerRestart\", strNotice, iSeconds) == null)\r\n\t\t{\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.restartCoroutine = SingletonComponent<ServerMgr>.Instance.ServerRestartWarning(strNotice, iSeconds);\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.StartCoroutine(SingletonComponent<ServerMgr>.Instance.restartCoroutine);\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.UpdateServerInformation();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerRevive","Parameters":"(BasePlayer,BasePlayer)","ClassName":"MedicalTool","MethodCode":"\r\n\tprivate void GiveEffectsTo(BasePlayer player)\r\n\t{\r\n\t\tif (!player)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition ownerItemDefinition = GetOwnerItemDefinition();\r\n\t\tItemModConsumable component = ownerItemDefinition.GetComponent<ItemModConsumable>();\r\n\t\tif (!component)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"No consumable for medicaltool :\" + base.name);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnHealingItemUse\", this, player) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnMedUsed(ownerItemDefinition.shortname, ownerPlayer, player);\r\n\t\t\tif (player != ownerPlayer)\r\n\t\t\t{\r\n\t\t\t\tif (Interface.CallHook(\"OnPlayerRevive\", GetOwnerPlayer(), player) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (player.IsWounded() && canRevive)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.StopWounded(ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tforeach (ItemModConsumable.ConsumableEffect effect in component.effects)\r\n\t\t\t{\r\n\t\t\t\tif (effect.type == MetabolismAttribute.Type.Health)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.health += effect.amount;\r\n\t\t\t\t\tplayer.ProcessMissionEvent(BaseMission.MissionEventType.HEAL, prefabID, effect.amount);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.metabolism.ApplyChange(effect.type, effect.amount, effect.time);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (player is BasePet)\r\n\t\t\t{\r\n\t\t\t\tplayer.SendNetworkUpdateImmediate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNpcRadioChatter","Parameters":"(ScientistNPC)","ClassName":"ScientistNPC","MethodCode":"\r\n\tpublic void PlayRadioChatter()\r\n\t{\r\n\t\tif (RadioChatterEffects.Length != 0)\r\n\t\t{\r\n\t\t\tif (base.IsDestroyed || base.transform == null)\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(PlayRadioChatter);\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnNpcRadioChatter\", this) == null)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(RadioChatterEffects[UnityEngine.Random.Range(0, RadioChatterEffects.Length)].resourcePath, this, StringPool.Get(\"head\"), Vector3.zero, Vector3.zero);\r\n\t\t\t\tQueueRadioChatter();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTechTreeNodeUnlocked","Parameters":"(Workbench,TechTreeData.NodeInstance,BasePlayer)","ClassName":"Workbench","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_TechTreeUnlock(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tint id = msg.read.Int32();\r\n\t\tint level = msg.read.Int32();\r\n\t\tTechTreeData techTreeForLevel = GetTechTreeForLevel(level);\r\n\t\tif (techTreeForLevel == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tTechTreeData.NodeInstance byID = techTreeForLevel.GetByID(id);\r\n\t\tif (byID == null)\r\n\t\t{\r\n\t\t\tDebug.Log(\"Node for unlock not found :\" + id);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!techTreeForLevel.PlayerCanUnlock(player, byID))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (byID.IsGroup())\r\n\t\t\t{\r\n\t\t\t\tforeach (int output in byID.outputs)\r\n\t\t\t\t{\r\n\t\t\t\t\tTechTreeData.NodeInstance byID2 = techTreeForLevel.GetByID(output);\r\n\t\t\t\t\tif (byID2 != null && byID2.itemDef != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tplayer.blueprints.Unlock(byID2.itemDef);\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnBlueprintLearned(player, byID2.itemDef, \"techtree\", 0, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDebug.Log(\"Player unlocked group :\" + byID.groupName);\r\n\t\t\t}\r\n\t\t\telse if (byID.itemDef != null && Interface.CallHook(\"OnTechTreeNodeUnlock\", this, byID, player) == null)\r\n\t\t\t{\r\n\t\t\t\tint tax;\r\n\t\t\t\tint num = ScrapForResearch(byID.itemDef, techTreeForLevel.techTreeLevel, out tax);\r\n\t\t\t\tint itemid = ItemManager.FindItemDefinition(\"scrap\").itemid;\r\n\t\t\t\tif (player.inventory.GetAmount(itemid) >= num + tax)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.inventory.Take(null, itemid, num + tax);\r\n\t\t\t\t\tplayer.blueprints.Unlock(byID.itemDef);\r\n\t\t\t\t\tInterface.CallHook(\"OnTechTreeNodeUnlocked\", this, byID, player);\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnBlueprintLearned(player, byID.itemDef, \"techtree\", num + tax, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnAmmoUnload","Parameters":"(BaseProjectile,Item,BasePlayer)","ClassName":"BaseProjectile","MethodCode":"\r\n\tpublic void UnloadAmmo(Item item, BasePlayer player)\r\n\t{\r\n\t\tBaseProjectile component = item.GetHeldEntity().GetComponent<BaseProjectile>();\r\n\t\tif (!component.canUnloadAmmo || Interface.CallHook(\"OnAmmoUnload\", component, item, player) != null || !component)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = component.primaryMagazine.contents;\r\n\t\tif (num <= 0)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tcomponent.SetAmmoCount(0);\r\n\t\titem.MarkDirty();\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tint stackable = component.primaryMagazine.ammoType.stackable;\r\n\t\tif (num > stackable)\r\n\t\t{\r\n\t\t\tint num2 = Mathf.FloorToInt(num / component.primaryMagazine.ammoType.stackable);\r\n\t\t\tnum %= stackable;\r\n\t\t\tfor (int i = 0; i < num2; i++)\r\n\t\t\t{\r\n\t\t\t\tItem item2 = ItemManager.Create(component.primaryMagazine.ammoType, stackable, 0uL);\r\n\t\t\t\tplayer.GiveItem(item2);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (num > 0)\r\n\t\t{\r\n\t\t\tItem item3 = ItemManager.Create(component.primaryMagazine.ammoType, num, 0uL);\r\n\t\t\tplayer.GiveItem(item3);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerRecovered","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void RecoverFromWounded()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerRecover\", this) == null)\r\n\t\t{\r\n\t\t\tif (IsCrawling())\r\n\t\t\t{\r\n\t\t\t\tbase.health = UnityEngine.Random.Range(2f, 6f) + healingWhileCrawling;\r\n\t\t\t}\r\n\t\t\thealingWhileCrawling = 0f;\r\n\t\t\tSetPlayerFlag(PlayerFlags.Wounded, b: false);\r\n\t\t\tSetPlayerFlag(PlayerFlags.Incapacitated, b: false);\r\n\t\t\tif ((bool)BaseGameMode.GetActiveGameMode(base.isServer))\r\n\t\t\t{\r\n\t\t\t\tBaseGameMode.GetActiveGameMode(base.isServer).OnPlayerRevived(null, this);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnPlayerRecovered\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLiquidWeaponFired","Parameters":"(LiquidWeapon,BasePlayer)","ClassName":"LiquidWeapon","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\tprivate void StartFiring(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (OnCooldown())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!RequiresPumping)\r\n\t\t{\r\n\t\t\tpressure = MaxPressure;\r\n\t\t}\r\n\t\tif (CanFire(player))\r\n\t\t{\r\n\t\t\tCancelInvoke(FireTick);\r\n\t\t\tInvokeRepeating(FireTick, 0f, FireRate);\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tStartCooldown(FireRate);\r\n\t\t\tif (base.isServer)\r\n\t\t\t{\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnLiquidWeaponFired\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNetworkGroupEntered","Parameters":"(BaseNetworkable,Network.Visibility.Group)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic virtual void OnNetworkGroupEnter(Group group)\r\n\t{\r\n\t\tInterface.CallHook(\"OnNetworkGroupEntered\", this, group);\r\n\t}\r\n"},{"Name":"CanStackItem","Parameters":"(Item,Item)","ClassName":"Item","MethodCode":"\r\n\tpublic bool CanStack(Item item)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanStackItem\", this, item);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (item == this)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (MaxStackable() <= 1)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.info.stackable <= 1)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.info.itemid != info.itemid)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (hasCondition && condition != item.info.condition.max)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.hasCondition && item.condition != item.info.condition.max)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!IsValid())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsBlueprint() && blueprintTarget != item.blueprintTarget)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.skin != skin)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.info.amountType == ItemDefinition.AmountType.Genetics || info.amountType == ItemDefinition.AmountType.Genetics)\r\n\t\t{\r\n\t\t\tint num = ((item.instanceData != null) ? item.instanceData.dataInt : (-1));\r\n\t\t\tint num2 = ((instanceData != null) ? instanceData.dataInt : (-1));\r\n\t\t\tif (num != num2)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (item.instanceData != null && instanceData != null && (item.IsOn() != IsOn() || (item.instanceData.dataInt != instanceData.dataInt && item.info.Blueprint != null && item.info.Blueprint.workbenchLevelRequired == 3)))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (instanceData != null && instanceData.subEntity.IsValid && (bool)info.GetComponent<ItemModSign>())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.instanceData != null && item.instanceData.subEntity.IsValid && (bool)item.info.GetComponent<ItemModSign>())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnDieselEngineToggled","Parameters":"(DieselEngine)","ClassName":"DieselEngine","MethodCode":"\r\n\tpublic void EngineOff()\r\n\t{\r\n\t\tSetFlag(Flags.On, b: false);\r\n\t\tBroadcastEntityMessage(\"DieselEngineOff\");\r\n\t\tInterface.CallHook(\"OnDieselEngineToggled\", this);\r\n\t}\r\n"},{"Name":"OnPhoneDial","Parameters":"(PhoneController,PhoneController,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void CallPhone(int number)\r\n\t{\r\n\t\tif (number == PhoneNumber)\r\n\t\t{\r\n\t\t\tOnDialFailed(Telephone.DialFailReason.CallSelf);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (TelephoneManager.GetCurrentActiveCalls() + 1 > TelephoneManager.MaxConcurrentCalls)\r\n\t\t{\r\n\t\t\tOnDialFailed(Telephone.DialFailReason.NetworkBusy);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPhoneController telephone = TelephoneManager.GetTelephone(number);\r\n\t\tif (telephone != null)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnPhoneDial\", this, telephone, currentPlayer) == null)\r\n\t\t\t{\r\n\t\t\t\tif (telephone.serverState == Telephone.CallState.Idle && telephone.CanReceiveCall())\r\n\t\t\t\t{\r\n\t\t\t\t\tSetPhoneState(Telephone.CallState.Dialing);\r\n\t\t\t\t\tlastDialedNumber = number;\r\n\t\t\t\t\tactiveCallTo = telephone;\r\n\t\t\t\t\tactiveCallTo.ReceiveCallFrom(this);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tOnDialFailed(Telephone.DialFailReason.Engaged);\r\n\t\t\t\t\ttelephone.OnIncomingCallWhileBusy();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tOnDialFailed(Telephone.DialFailReason.WrongNumber);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootEntityEnd","Parameters":"(BasePlayer,DroppedItemContainer)","ClassName":"DroppedItemContainer","MethodCode":"\r\n\tpublic void PlayerStoppedLooting(BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnLootEntityEnd\", player, this);\r\n\t\tif (inventory == null || inventory.itemList == null || inventory.itemList.Count == 0)\r\n\t\t{\r\n\t\t\tKill();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tResetRemovalTime();\r\n\t\t\tSetFlag(Flags.Open, b: false);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t\tEvaluateBagConditions();\r\n\t}\r\n"},{"Name":"OnInventoryItemsTake","Parameters":"(PlayerInventory,System.Collections.Generic.List<Item>,int,int)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic int Take(List<Item> collect, int itemid, int amount)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnInventoryItemsTake\", this, collect, itemid, amount);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\tint num = 0;\r\n\t\tif (containerMain != null)\r\n\t\t{\r\n\t\t\tint num2 = containerMain.Take(collect, itemid, amount);\r\n\t\t\tnum += num2;\r\n\t\t\tamount -= num2;\r\n\t\t}\r\n\t\tif (amount <= 0)\r\n\t\t{\r\n\t\t\treturn num;\r\n\t\t}\r\n\t\tif (containerBelt != null)\r\n\t\t{\r\n\t\t\tint num3 = containerBelt.Take(collect, itemid, amount);\r\n\t\t\tnum += num3;\r\n\t\t\tamount -= num3;\r\n\t\t}\r\n\t\tif (amount <= 0)\r\n\t\t{\r\n\t\t\treturn num;\r\n\t\t}\r\n\t\tif (containerWear != null)\r\n\t\t{\r\n\t\t\tint num4 = containerWear.Take(collect, itemid, amount);\r\n\t\t\tnum += num4;\r\n\t\t\tamount -= num4;\r\n\t\t}\r\n\t\treturn num;\r\n\t}\r\n"},{"Name":"OnCargoShipHarborApproach","Parameters":"(CargoShip,CargoNotifier)","ClassName":"CargoShip","MethodCode":"\r\n\tpublic void StartHarborApproach(CargoNotifier cn)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnCargoShipHarborApproach\", this, cn) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPlayHorn();\r\n\t\tisDoingHarborApproach = true;\r\n\t\tdockCount++;\r\n\t\tshouldLookAhead = false;\r\n\t\tif (proxManager != null)\r\n\t\t{\r\n\t\t\tproxManager.StartMovement();\r\n\t\t}\r\n\t\tClearAllHarborEntitiesOnShip();\r\n\t\tforeach (HarborCraneContainerPickup allCrane in HarborCraneContainerPickup.AllCranes)\r\n\t\t{\r\n\t\t\tif (!(allCrane == null) && !allCrane.isClient && !(allCrane.Distance2D(harborApproachPath.nodes[harborApproachPath.nodes.Count / 2].Position) > 150f))\r\n\t\t\t{\r\n\t\t\t\tallCrane.ReplenishContainers();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanCombineDroppedItem","Parameters":"(DroppedItem,DroppedItem)","ClassName":"DroppedItem","MethodCode":"\r\n\tpublic void OnDroppedOn(DroppedItem di)\r\n\t{\r\n\t\tif (item == null || di.item == null || Interface.CallHook(\"CanCombineDroppedItem\", this, di) != null || di.item.info != item.info || (di.item.IsBlueprint() && di.item.blueprintTarget != item.blueprintTarget) || NeverCombine || di.NeverCombine || (di.item.hasCondition && di.item.condition != di.item.maxCondition) || (item.hasCondition && item.condition != item.maxCondition))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (di.item.info != null)\r\n\t\t{\r\n\t\t\tif (di.item.info.amountType == ItemDefinition.AmountType.Genetics)\r\n\t\t\t{\r\n\t\t\t\tint num = ((di.item.instanceData != null) ? di.item.instanceData.dataInt : (-1));\r\n\t\t\t\tint num2 = ((item.instanceData != null) ? item.instanceData.dataInt : (-1));\r\n\t\t\t\tif (num != num2)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((di.item.info.GetComponent<ItemModSign>() != null && ItemModAssociatedEntity<SignContent>.GetAssociatedEntity(di.item) != null) || (item.info != null && item.info.GetComponent<ItemModSign>() != null && ItemModAssociatedEntity<SignContent>.GetAssociatedEntity(item) != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tint num3 = di.item.amount + item.amount;\r\n\t\tif (num3 <= item.MaxStackable() && num3 != 0)\r\n\t\t{\r\n\t\t\tif (di.DropReason == DropReasonEnum.Player)\r\n\t\t\t{\r\n\t\t\t\tDropReason = DropReasonEnum.Player;\r\n\t\t\t}\r\n\t\t\tdi.DestroyItem();\r\n\t\t\tdi.Kill();\r\n\t\t\tInterface.CallHook(\"OnDroppedItemCombined\", this);\r\n\t\t\tint worldModelIndex = item.info.GetWorldModelIndex(item.amount);\r\n\t\t\titem.amount = num3;\r\n\t\t\titem.MarkDirty();\r\n\t\t\tif (GetDespawnDuration() < float.PositiveInfinity)\r\n\t\t\t{\r\n\t\t\t\tInvoke(IdleDestroy, GetDespawnDuration());\r\n\t\t\t}\r\n\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/notice/stack.world.fx.prefab\", this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\tint worldModelIndex2 = item.info.GetWorldModelIndex(item.amount);\r\n\t\t\tif (worldModelIndex != worldModelIndex2)\r\n\t\t\t{\r\n\t\t\t\titem.Drop(base.transform.position, Vector3.zero, base.transform.rotation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDefaultItemsReceived","Parameters":"(PlayerInventory)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic void GiveDefaultItems()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnDefaultItemsReceive\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tStrip();\r\n\t\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\t\tif (activeGameMode != null && activeGameMode.HasLoadouts())\r\n\t\t{\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).LoadoutPlayer(base.baseEntity);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tGiveDefaultItemWithSkin(\"client.rockskin\", \"rock\");\r\n\t\tGiveDefaultItemWithSkin(\"client.torchskin\", \"torch\");\r\n\t\tif (IsBirthday() && !base.baseEntity.IsInTutorial)\r\n\t\t{\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"cakefiveyear\", 1, 0uL), containerBelt);\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"partyhat\", 1, 0uL), containerWear);\r\n\t\t}\r\n\t\tif (IsChristmas() && !base.baseEntity.IsInTutorial)\r\n\t\t{\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"snowball\", 1, 0uL), containerBelt);\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"snowball\", 1, 0uL), containerBelt);\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"snowball\", 1, 0uL), containerBelt);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnDefaultItemsReceived\", this);\r\n\t\tvoid GiveDefaultItemWithSkin(string convarSkinName, string itemShortName)\r\n\t\t{\r\n\t\t\tulong num = 0uL;\r\n\t\t\tint infoInt = base.baseEntity.GetInfoInt(convarSkinName, 0);\r\n\t\t\tbool flag = false;\r\n\t\t\tbool flag2 = false;\r\n\t\t\tflag2 = base.baseEntity?.UnlockAllSkins ?? false;\r\n\t\t\tif (infoInt > 0 && (base.baseEntity.blueprints.CheckSkinOwnership(infoInt, base.baseEntity.userID) || flag2))\r\n\t\t\t{\r\n\t\t\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(itemShortName);\r\n\t\t\t\tif (itemDefinition != null && ItemDefinition.FindSkin(itemDefinition.itemid, infoInt) != 0L)\r\n\t\t\t\t{\r\n\t\t\t\t\tIPlayerItemDefinition itemDefinition2 = PlatformService.Instance.GetItemDefinition(infoInt);\r\n\t\t\t\t\tif (itemDefinition2 != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum = itemDefinition2.WorkshopDownload;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (num == 0L && itemDefinition.skins != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItemSkinDirectory.Skin[] skins = itemDefinition.skins;\r\n\t\t\t\t\t\tfor (int i = 0; i < skins.Length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tItemSkinDirectory.Skin skin = skins[i];\r\n\t\t\t\t\t\t\tif (skin.id == infoInt && skin.invItem != null && skin.invItem is ItemSkin itemSkin && itemSkin.Redirect != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tGiveItem(ItemManager.CreateByName(itemSkin.Redirect.shortname, 1, 0uL), containerBelt);\r\n\t\t\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tGiveItem(ItemManager.CreateByName(itemShortName, 1, num), containerBelt);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityLeave","Parameters":"(TriggerComfort,BaseEntity)","ClassName":"TriggerComfort","MethodCode":"\r\n\tpublic override void OnEntityLeave(BaseEntity ent)\r\n\t{\r\n\t\tBasePlayer basePlayer = ent as BasePlayer;\r\n\t\tif ((bool)basePlayer && Interface.CallHook(\"OnEntityLeave\", this, ent) == null)\r\n\t\t{\r\n\t\t\t_players.Remove(basePlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeHomingTargeted","Parameters":"(PatrolHelicopter)","ClassName":"PatrolHelicopter","MethodCode":"\r\n\tpublic bool IsValidHomingTarget()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeHomingTargeted\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnBradleyApcPatrol","Parameters":"(BradleyAPC)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic void UpdateMovement_Patrol()\r\n\t{\r\n\t\tif (patrolPath == null || UnityEngine.Time.time < nextPatrolTime)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tnextPatrolTime = UnityEngine.Time.time + 20f;\r\n\t\tif ((HasPath() && !IsAtFinalDestination()) || Interface.CallHook(\"OnBradleyApcPatrol\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIAIPathInterestNode randomInterestNodeAwayFrom = patrolPath.GetRandomInterestNodeAwayFrom(base.transform.position);\r\n\t\tIAIPathNode closestToPoint = patrolPath.GetClosestToPoint(randomInterestNodeAwayFrom.Position);\r\n\t\tbool flag = false;\r\n\t\tList<IAIPathNode> nodes = Facepunch.Pool.Get<List<IAIPathNode>>();\r\n\t\tIAIPathNode iAIPathNode;\r\n\t\tif (GetEngagementPath(ref nodes))\r\n\t\t{\r\n\t\t\tflag = true;\r\n\t\t\tiAIPathNode = nodes[nodes.Count - 1];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tiAIPathNode = patrolPath.GetClosestToPoint(base.transform.position);\r\n\t\t}\r\n\t\tif (!(Vector3.Distance(finalDestination, closestToPoint.Position) > 2f))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (closestToPoint == iAIPathNode)\r\n\t\t{\r\n\t\t\tcurrentPath.Clear();\r\n\t\t\tcurrentPath.Add(closestToPoint.Position);\r\n\t\t\tcurrentPathIndex = -1;\r\n\t\t\tpathLooping = false;\r\n\t\t\tfinalDestination = closestToPoint.Position;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!AStarPath.FindPath(iAIPathNode, closestToPoint, out var path, out var _))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPath.Clear();\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 0; i < nodes.Count - 1; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentPath.Add(nodes[i].Position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tforeach (IAIPathNode item in path)\r\n\t\t\t{\r\n\t\t\t\tcurrentPath.Add(item.Position);\r\n\t\t\t}\r\n\t\t\tcurrentPathIndex = -1;\r\n\t\t\tpathLooping = false;\r\n\t\t\tfinalDestination = closestToPoint.Position;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnAdventGiftAwarded","Parameters":"(AdventCalendar,BasePlayer)","ClassName":"AdventCalendar","MethodCode":"\r\n\tpublic void AwardGift(BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnAdventGiftAward\", this, player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDateTime now = DateTime.Now;\r\n\t\tint num = ((overrideAdventCalendarDay > 0) ? overrideAdventCalendarDay : now.Day) - startDay;\r\n\t\tif (((overrideAdventCalendarMonth > 0) ? overrideAdventCalendarMonth : now.Month) == startMonth && num >= 0 && num < days.Length)\r\n\t\t{\r\n\t\t\tif (!playerRewardHistory.ContainsKey(player.userID))\r\n\t\t\t{\r\n\t\t\t\tplayerRewardHistory.Add(player.userID, new List<int>());\r\n\t\t\t}\r\n\t\t\tplayerRewardHistory[player.userID].Add(num);\r\n\t\t\tEffect.server.Run(giftEffect.resourcePath, player.transform.position);\r\n\t\t\tif (num >= 0 && num < crosses.Length)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(boxCloseEffect.resourcePath, base.transform.position + Vector3.up * 1.5f);\r\n\t\t\t}\r\n\t\t\tDayReward dayReward = days[num];\r\n\t\t\tfor (int i = 0; i < dayReward.rewards.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tItemAmount itemAmount = dayReward.rewards[i];\r\n\t\t\t\tplayer.GiveItem(ItemManager.CreateByItemID(itemAmount.itemid, Mathf.CeilToInt(itemAmount.amount), 0uL), GiveItemReason.PickedUp);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnAdventGiftAwarded\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerSleepEnded","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual void EndSleeping()\r\n\t{\r\n\t\tif (IsSleeping() && Interface.CallHook(\"OnPlayerSleepEnd\", this) == null)\r\n\t\t{\r\n\t\t\tif (IsRestrained)\r\n\t\t\t{\r\n\t\t\t\tinventory.SetLockedByRestraint(flag: true);\r\n\t\t\t}\r\n\t\t\tSetPlayerFlag(PlayerFlags.Sleeping, b: false);\r\n\t\t\tsleepStartTime = -1f;\r\n\t\t\tsleepingPlayerList.Remove(this);\r\n\t\t\tif ((ulong)userID < 10000000 && !bots.Contains(this))\r\n\t\t\t{\r\n\t\t\t\tbots.Add(this);\r\n\t\t\t}\r\n\t\t\tCancelInvoke(ScheduledDeath);\r\n\t\t\tInvokeRepeating(InventoryUpdate, 1f, 0.1f * UnityEngine.Random.Range(0.99f, 1.01f));\r\n\t\t\tif (RelationshipManager.TeamsEnabled())\r\n\t\t\t{\r\n\t\t\t\tInvokeRandomized(TeamUpdate, 1f, 4f, 1f);\r\n\t\t\t}\r\n\t\t\tInvokeRandomized(UpdateClanLastSeen, 300f, 300f, 60f);\r\n\t\t\tEnablePlayerCollider();\r\n\t\t\tAddPlayerRigidbody();\r\n\t\t\tSetServerFall(wantsOn: false);\r\n\t\t\tif (HasParent())\r\n\t\t\t{\r\n\t\t\t\tSetParent(null, worldPositionStays: true);\r\n\t\t\t\tRemoveFromTriggers();\r\n\t\t\t\tForceUpdateTriggers();\r\n\t\t\t}\r\n\t\t\tinventory.containerMain.OnChanged();\r\n\t\t\tinventory.containerBelt.OnChanged();\r\n\t\t\tinventory.containerWear.OnChanged();\r\n\t\t\tInterface.CallHook(\"OnPlayerSleepEnded\", this);\r\n\t\t\tEACServer.LogPlayerSpawn(this);\r\n\t\t\tif (TotalPingCount > 0)\r\n\t\t\t{\r\n\t\t\t\tSendPingsToClient();\r\n\t\t\t}\r\n\t\t\tif (TutorialIsland.ShouldPlayerBeAskedToStartTutorial(this))\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"PromptToStartTutorial\", this));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnAmmoSwitch","Parameters":"(BaseProjectile,BasePlayer,ItemDefinition)","ClassName":"BaseProjectile","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\tprivate void SwitchAmmoTo(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = msg.read.Int32();\r\n\t\tif (num == primaryMagazine.ammoType.itemid)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(num);\r\n\t\tif (itemDefinition == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModProjectile component = itemDefinition.GetComponent<ItemModProjectile>();\r\n\t\tif ((bool)component && component.IsAmmo(primaryMagazine.definition.ammoTypes) && Interface.CallHook(\"OnAmmoSwitch\", this, ownerPlayer, itemDefinition) == null)\r\n\t\t{\r\n\t\t\tif (primaryMagazine.contents > 0)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.GiveItem(ItemManager.CreateByItemID(primaryMagazine.ammoType.itemid, primaryMagazine.contents, 0uL));\r\n\t\t\t\tSetAmmoCount(0);\r\n\t\t\t}\r\n\t\t\tprimaryMagazine.ammoType = itemDefinition;\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\townerPlayer.inventory.ServerUpdate(0f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnInterferenceOthersUpdate","Parameters":"(AutoTurret)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void UpdateInterferenceOnOthers()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnInterferenceOthersUpdate\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (AutoTurret nearbyTurret in nearbyTurrets)\r\n\t\t{\r\n\t\t\tif (nearbyTurret != null)\r\n\t\t\t{\r\n\t\t\t\tnearbyTurret.TryRegisterForInterferenceUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityDeath","Parameters":"(ResourceEntity,HitInfo)","ClassName":"ResourceEntity","MethodCode":"\r\n\tpublic virtual void OnKilled(HitInfo info)\r\n\t{\r\n\t\tisKilled = true;\r\n\t\tInterface.CallHook(\"OnEntityDeath\", this, info);\r\n\t\tKill();\r\n\t}\r\n"},{"Name":"OnFireworkExhausted","Parameters":"(BaseFirework)","ClassName":"BaseFirework","MethodCode":"\r\n\tpublic virtual void OnExhausted()\r\n\t{\r\n\t\tSetFlag(Flags.Reserved8, b: true, recursive: false, networkupdate: false);\r\n\t\tSetFlag(Flags.OnFire, b: false, recursive: false, networkupdate: false);\r\n\t\tSetFlag(Flags.On, b: false, recursive: false, networkupdate: false);\r\n\t\tEnableGlobalBroadcast(wants: false);\r\n\t\tSendNetworkUpdate_Flags();\r\n\t\tInterface.CallHook(\"OnFireworkExhausted\", this);\r\n\t\tInvoke(Cleanup, corpseDuration);\r\n\t\t_activeFireworks.Remove(this);\r\n\t}\r\n"},{"Name":"OnVehicleLockRequest","Parameters":"(ModularCarGarage,BasePlayer,string)","ClassName":"ModularCarGarage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void RPC_RequestAddLock(RPCMessage msg)\r\n\t{\r\n\t\tif (!HasOccupant || carOccupant.CarLock.HasALock)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (Interface.CallHook(\"OnVehicleLockRequest\", this, player, text) == null)\r\n\t\t{\r\n\t\t\tItemAmount itemAmount = lockResourceCost;\r\n\t\t\tif ((float)player.inventory.GetAmount(itemAmount.itemDef.itemid) >= itemAmount.amount && carOccupant.CarLock.TryAddALock(text, player.userID))\r\n\t\t\t{\r\n\t\t\t\tplayer.inventory.Take(null, itemAmount.itemDef.itemid, Mathf.CeilToInt(itemAmount.amount));\r\n\t\t\t\tEffect.server.Run(addRemoveLockEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnServerInformationUpdated","Parameters":"()","ClassName":"ServerMgr","MethodCode":"\r\n\tprivate void UpdateServerInformation()\r\n\t{\r\n\t\tif (!SteamServer.IsValid)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"UpdateServerInformation\"))\r\n\t\t{\r\n\t\t\tSteamServer.ServerName = ConVar.Server.hostname;\r\n\t\t\tSteamServer.MaxPlayers = ConVar.Server.maxplayers;\r\n\t\t\tSteamServer.Passworded = false;\r\n\t\t\tSteamServer.MapName = World.GetServerBrowserMapName();\r\n\t\t\tstring value = \"stok\";\r\n\t\t\tif (Restarting)\r\n\t\t\t{\r\n\t\t\t\tvalue = \"strst\";\r\n\t\t\t}\r\n\t\t\tstring text = $\"born{Epoch.FromDateTime(SaveRestore.SaveCreatedTime)}\";\r\n\t\t\tstring text2 = $\"gm{GamemodeName()}\";\r\n\t\t\tstring text3 = (ConVar.Server.pve ? \",pve\" : string.Empty);\r\n\t\t\tstring text4 = ConVar.Server.tags?.Trim(',') ?? \"\";\r\n\t\t\tstring text5 = ((!string.IsNullOrWhiteSpace(text4)) ? (\",\" + text4) : \"\");\r\n\t\t\tstring text6 = BuildInfo.Current?.Scm?.ChangeId ?? \"0\";\r\n\t\t\tstring text7 = PingEstimater.GetCachedClosestRegion().Code;\r\n\t\t\tif (!string.IsNullOrEmpty(ConVar.Server.ping_region_code_override))\r\n\t\t\t{\r\n\t\t\t\ttext7 = ConVar.Server.ping_region_code_override;\r\n\t\t\t}\r\n\t\t\tSteamServer.GameTags = ServerTagCompressor.CompressTags($\"mp{ConVar.Server.maxplayers},cp{BasePlayer.activePlayerList.Count},pt{Network.Net.sv.ProtocolId},qp{SingletonComponent<ServerMgr>.Instance.connectionQueue.Queued},$r{text7},v{2564}{text3}{text5},{text},{text2},cs{text6}\");\r\n\t\t\tif (ConVar.Server.description != null && ConVar.Server.description.Length > 100)\r\n\t\t\t{\r\n\t\t\t\tstring[] array = ConVar.Server.description.SplitToChunks(100).ToArray();\r\n\t\t\t\tfor (int i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i < array.Length)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSteamServer.SetKey($\"description_{i:00}\", array[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSteamServer.SetKey($\"description_{i:00}\", string.Empty);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSteamServer.SetKey(\"description_0\", ConVar.Server.description);\r\n\t\t\t\tfor (int j = 1; j < 16; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tSteamServer.SetKey($\"description_{j:00}\", string.Empty);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSteamServer.SetKey(\"hash\", AssemblyHash);\r\n\t\t\tSteamServer.SetKey(\"status\", value);\r\n\t\t\tstring value2 = World.Seed.ToString();\r\n\t\t\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\t\t\tif (activeGameMode != null && !activeGameMode.ingameMap)\r\n\t\t\t{\r\n\t\t\t\tvalue2 = \"0\";\r\n\t\t\t}\r\n\t\t\tSteamServer.SetKey(\"world.seed\", value2);\r\n\t\t\tSteamServer.SetKey(\"world.size\", World.Size.ToString());\r\n\t\t\tSteamServer.SetKey(\"pve\", ConVar.Server.pve.ToString());\r\n\t\t\tSteamServer.SetKey(\"headerimage\", ConVar.Server.headerimage);\r\n\t\t\tSteamServer.SetKey(\"logoimage\", ConVar.Server.logoimage);\r\n\t\t\tSteamServer.SetKey(\"url\", ConVar.Server.url);\r\n\t\t\tif (!string.IsNullOrWhiteSpace(ConVar.Server.favoritesEndpoint))\r\n\t\t\t{\r\n\t\t\t\tSteamServer.SetKey(\"favendpoint\", ConVar.Server.favoritesEndpoint);\r\n\t\t\t}\r\n\t\t\tSteamServer.SetKey(\"gmn\", GamemodeName());\r\n\t\t\tSteamServer.SetKey(\"gmt\", GamemodeTitle());\r\n\t\t\tSteamServer.SetKey(\"uptime\", ((int)UnityEngine.Time.realtimeSinceStartup).ToString());\r\n\t\t\tSteamServer.SetKey(\"gc_mb\", Performance.report.memoryAllocations.ToString());\r\n\t\t\tSteamServer.SetKey(\"gc_cl\", Performance.report.memoryCollections.ToString());\r\n\t\t\tSteamServer.SetKey(\"ram_sys\", (Performance.report.memoryUsageSystem / 1000000).ToString());\r\n\t\t\tSteamServer.SetKey(\"fps\", Performance.report.frameRate.ToString());\r\n\t\t\tSteamServer.SetKey(\"fps_avg\", Performance.report.frameRateAverage.ToString(\"0.00\"));\r\n\t\t\tSteamServer.SetKey(\"ent_cnt\", BaseNetworkable.serverEntities.Count.ToString());\r\n\t\t\tSteamServer.SetKey(\"build\", BuildInfo.Current.Scm.ChangeId);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnServerInformationUpdated\");\r\n\t}\r\n"},{"Name":"OnQuarryGather","Parameters":"(MiningQuarry,Item)","ClassName":"MiningQuarry","MethodCode":"\r\n\tpublic void ProcessResources()\r\n\t{\r\n\t\tif (_linkedDeposit == null || hopperPrefab.instance == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!FuelCheck())\r\n\t\t{\r\n\t\t\tSetOn(isOn: false);\r\n\t\t}\r\n\t\tfloat num = Mathf.Min(workToAdd, pendingWork);\r\n\t\tpendingWork -= num;\r\n\t\tforeach (ResourceDepositManager.ResourceDeposit.ResourceDepositEntry resource in _linkedDeposit._resources)\r\n\t\t{\r\n\t\t\tif ((!canExtractLiquid && resource.isLiquid) || (!canExtractSolid && !resource.isLiquid))\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfloat workNeeded = resource.workNeeded;\r\n\t\t\tint num2 = Mathf.FloorToInt(resource.workDone / workNeeded);\r\n\t\t\tresource.workDone += num;\r\n\t\t\tint num3 = Mathf.FloorToInt(resource.workDone / workNeeded);\r\n\t\t\tif (resource.workDone > workNeeded)\r\n\t\t\t{\r\n\t\t\t\tresource.workDone %= workNeeded;\r\n\t\t\t}\r\n\t\t\tif (num2 != num3)\r\n\t\t\t{\r\n\t\t\t\tint iAmount = num3 - num2;\r\n\t\t\t\tItem item = ItemManager.Create(resource.type, iAmount, 0uL);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnQuarryItem(Facepunch.Rust.Analytics.Azure.ResourceMode.Produced, item.info.shortname, item.amount, this);\r\n\t\t\t\tif (Interface.CallHook(\"OnQuarryGather\", this, item) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t}\r\n\t\t\t\telse if (!item.MoveToContainer(hopperPrefab.instance.GetComponent<StorageContainer>().inventory))\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t\tSetOn(isOn: false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVehicleModuleSelect","Parameters":"(Item,ModularCarGarage,BasePlayer)","ClassName":"ModularCarGarage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void RPC_SelectedLootItem(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tItemId itemUID = msg.read.ItemID();\r\n\t\tif (player == null || !player.inventory.loot.IsLooting() || player.inventory.loot.entitySource != this || !HasOccupant)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem vehicleItem = carOccupant.GetVehicleItem(itemUID);\r\n\t\tif (vehicleItem == null || Interface.CallHook(\"OnVehicleModuleSelect\", vehicleItem, this, player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = player.inventory.loot.RemoveContainerAt(3);\r\n\t\tif (TryGetModuleForItem(vehicleItem, out var result))\r\n\t\t{\r\n\t\t\tif (result is VehicleModuleStorage vehicleModuleStorage)\r\n\t\t\t{\r\n\t\t\t\tIItemContainerEntity container = vehicleModuleStorage.GetContainer();\r\n\t\t\t\tif (!ObjectEx.IsUnityNull(container))\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.inventory.loot.AddContainer(container.inventory);\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (result is VehicleModuleCamper vehicleModuleCamper)\r\n\t\t\t{\r\n\t\t\t\tIItemContainerEntity container2 = vehicleModuleCamper.GetContainer();\r\n\t\t\t\tif (!ObjectEx.IsUnityNull(container2))\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.inventory.loot.AddContainer(container2.inventory);\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnVehicleModuleSelected\", vehicleItem, this, player);\r\n\t}\r\n"},{"Name":"OnRackedWeaponTaken","Parameters":"(Item,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate void GivePlayerWeapon(BasePlayer player, int mountSlotIndex, int playerBeltIndex = -1, bool tryHold = true, bool sendUpdate = true)\r\n\t{\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(mountSlotIndex);\r\n\t\tif (weaponAtIndex == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.GetSlot(weaponAtIndex.InventoryIndex);\r\n\t\tif (slot == null || Interface.CallHook(\"OnRackedWeaponTake\", slot, player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tClearSlot(weaponAtIndex);\r\n\t\tif (slot.MoveToContainer(player.inventory.containerBelt, playerBeltIndex))\r\n\t\t{\r\n\t\t\tif ((tryHold && player.GetHeldEntity() == null) || playerBeltIndex != -1)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"SetActiveBeltSlot\", player), slot.position, slot.uid);\r\n\t\t\t}\r\n\t\t\tClientRPC(RpcTarget.Player(\"PlayGrabSound\", player), slot.info.itemid);\r\n\t\t}\r\n\t\telse if (!slot.MoveToContainer(player.inventory.containerMain))\r\n\t\t{\r\n\t\t\tslot.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);\r\n\t\t}\r\n\t\tif (sendUpdate)\r\n\t\t{\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnRackedWeaponTaken\", slot, player, this);\r\n\t}\r\n"},{"Name":"CanAffordUpgrade","Parameters":"(BasePlayer,BuildingBlock,BuildingGrade.Enum,ulong)","ClassName":"BuildingBlock","MethodCode":"\r\n\tpublic bool CanAffordUpgrade(BuildingGrade.Enum iGrade, ulong iSkin, BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanAffordUpgrade\", player, this, iGrade, iSkin);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player != null && player.IsInCreativeMode && Creative.freeBuild)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tforeach (ItemAmount item in blockDefinition.GetGrade(iGrade, iSkin).CostToBuild(grade))\r\n\t\t{\r\n\t\t\tif ((float)player.inventory.GetAmount(item.itemid) < item.amount)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,ContainerIOEntity)","ClassName":"ContainerIOEntity","MethodCode":"\r\n\tpublic virtual bool PlayerOpenLoot(BasePlayer player, string panelToOpen = \"\", bool doPositionChecks = true)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanLootEntity\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (needsBuildingPrivilegeToUse && !player.CanBuild())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif ((onlyOneUser && IsOpen()) || IsTransferring())\r\n\t\t{\r\n\t\t\tplayer.ShowToast(GameTip.Styles.Red_Normal, StorageContainer.LockedMessage, false);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (panelToOpen == \"\")\r\n\t\t{\r\n\t\t\tpanelToOpen = lootPanelName;\r\n\t\t}\r\n\t\tif (player.inventory.loot.StartLootingEntity(this, doPositionChecks))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Open, b: true);\r\n\t\t\tplayer.inventory.loot.AddContainer(_inventory);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), lootPanelName);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnEntityFromOwnerCheck","Parameters":"(BaseEntity,BasePlayer,uint,string)","ClassName":"BaseEntity","MethodCode":"\t\t\tpublic static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player)\r\n\t\t\t{\r\n\t\t\t\tif (ent == null || player == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (ent.net == null || player.net == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnEntityFromOwnerCheck\", ent, player, id, debugName);\r\n\t\t\t\tif (obj is bool)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (bool)obj;\r\n\t\t\t\t}\r\n\t\t\t\tif (ent.net.ID == player.net.ID)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (ent.parentEntity.uid != player.net.ID)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n"},{"Name":"OnCupboardAuthorize","Parameters":"(BuildingPrivlidge,BasePlayer)","ClassName":"ItemModDeployable","MethodCode":"\r\n\tinternal void OnDeployed(BaseEntity ent, BasePlayer player)\r\n\t{\r\n\t\tif (player.IsValid() && !string.IsNullOrEmpty(UnlockAchievement))\r\n\t\t{\r\n\t\t\tplayer.GiveAchievement(UnlockAchievement);\r\n\t\t}\r\n\t\tif (ent is BuildingPrivlidge buildingPrivlidge && Interface.CallHook(\"OnCupboardAuthorize\", buildingPrivlidge, player) == null)\r\n\t\t{\r\n\t\t\tbuildingPrivlidge.AddPlayer(player, player.userID);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityMarkHostile","Parameters":"(BasePlayer,float)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override void MarkHostileFor(float duration = 60f)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEntityMarkHostile\", this, duration) == null)\r\n\t\t{\r\n\t\t\tdouble currentTimestamp = TimeEx.currentTimestamp;\r\n\t\t\tdouble val = currentTimestamp + (double)duration;\r\n\t\t\tState.unHostileTimestamp = Math.Max(State.unHostileTimestamp, val);\r\n\t\t\tDirtyPlayerState();\r\n\t\t\tdouble num = Math.Max(State.unHostileTimestamp - currentTimestamp, 0.0);\r\n\t\t\tClientRPC(RpcTarget.Player(\"SetHostileLength\", this), (float)num);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMagazineReload","Parameters":"(BaseProjectile,IAmmoContainer,BasePlayer)","ClassName":"BaseProjectile","MethodCode":"\r\n\tpublic virtual bool TryReloadMagazine(IAmmoContainer ammoSource, int desiredAmount = -1)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnMagazineReload\", this, ammoSource, GetOwnerPlayer());\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!TryReload(ammoSource, desiredAmount))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tItemManager.DoRemoves();\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (ownerPlayer != null)\r\n\t\t{\r\n\t\t\townerPlayer.inventory.ServerUpdate(0f);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnSendModelState","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void SendModelState(bool force = false)\r\n\t{\r\n\t\tif (!force && (!wantsSendModelState || nextModelStateUpdate > UnityEngine.Time.time))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\twantsSendModelState = false;\r\n\t\tnextModelStateUpdate = UnityEngine.Time.time + 0.1f;\r\n\t\tif (!IsDead() && !IsSpectating())\r\n\t\t{\r\n\t\t\tmodelState.sleeping = IsSleeping();\r\n\t\t\tmodelState.mounted = isMounted;\r\n\t\t\tmodelState.relaxed = IsRelaxed();\r\n\t\t\tmodelState.onPhone = HasActiveTelephone && !activeTelephone.IsMobile;\r\n\t\t\tmodelState.crawling = IsCrawling();\r\n\t\t\tif (!base.limitNetworking && Interface.CallHook(\"OnSendModelState\", this) == null)\r\n\t\t\t{\r\n\t\t\t\tmodelState.loading = IsLoadingAfterTransfer();\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"OnModelState\"), modelState);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFireworkDesignChange","Parameters":"(PatternFirework,ProtoBuf.PatternFirework.Design,BasePlayer)","ClassName":"PatternFirework","MethodCode":"\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tprivate void ServerSetFireworkDesign(RPCMessage rpc)\r\n\t{\r\n\t\tif (!PlayerCanModify(rpc.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tProtoBuf.PatternFirework.Design design = ProtoBuf.PatternFirework.Design.Deserialize(rpc.read);\r\n\t\tif (Interface.CallHook(\"OnFireworkDesignChange\", this, design, rpc.player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (design?.stars != null)\r\n\t\t{\r\n\t\t\twhile (design.stars.Count > MaxStars)\r\n\t\t\t{\r\n\t\t\t\tint index = design.stars.Count - 1;\r\n\t\t\t\tdesign.stars[index].Dispose();\r\n\t\t\t\tdesign.stars.RemoveAt(index);\r\n\t\t\t}\r\n\t\t\tforeach (ProtoBuf.PatternFirework.Star star in design.stars)\r\n\t\t\t{\r\n\t\t\t\tstar.position = new Vector2(Mathf.Clamp(star.position.x, -1f, 1f), Mathf.Clamp(star.position.y, -1f, 1f));\r\n\t\t\t\tstar.color = new Color(Mathf.Clamp01(star.color.r), Mathf.Clamp01(star.color.g), Mathf.Clamp01(star.color.b), 1f);\r\n\t\t\t}\r\n\t\t\tdesign.editedBy = rpc.player.userID;\r\n\t\t}\r\n\t\tDesign?.Dispose();\r\n\t\tDesign = design;\r\n\t\tInterface.CallHook(\"OnFireworkDesignChanged\", this, design, rpc.player);\r\n\t\tSendNetworkUpdateImmediate();\r\n\t}\r\n"},{"Name":"CanVendingAcceptItem","Parameters":"(VendingMachine,Item,int)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic bool CanAcceptItem(Item item, int targetSlot)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanVendingAcceptItem\", this, item, targetSlot);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tBasePlayer basePlayer = item.GetRootContainer()?.GetOwnerPlayer();\r\n\t\tif (transactionActive || industrialItemIncoming)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (item.parent == null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (base.inventory.itemList.Contains(item))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (basePlayer == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn CanPlayerAdmin(basePlayer);\r\n\t}\r\n"},{"Name":"OnItemAddedToContainer","Parameters":"(ItemContainer,Item)","ClassName":"ItemContainer","MethodCode":"\r\n\tpublic bool Insert(Item item)\r\n\t{\r\n\t\tif (itemList.Contains(item))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsFull())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\titemList.Add(item);\r\n\t\titem.parent = this;\r\n\t\tif (!FindPosition(item))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tMarkDirty();\r\n\t\tif (onItemAddedRemoved != null)\r\n\t\t{\r\n\t\t\tonItemAddedRemoved(item, arg2: true);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnItemAddedToContainer\", this, item);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnFeedbackReported","Parameters":"(BasePlayer,string,string,Facepunch.Models.ReportType)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(1uL)]\r\n\tpublic void OnFeedbackReport(RPCMessage msg)\r\n\t{\r\n\t\tstring text = msg.read.String();\r\n\t\tstring text2 = msg.read.StringMultiLine();\r\n\t\tReportType reportType = (ReportType)Mathf.Clamp(msg.read.Int32(), 0, 5);\r\n\t\tif (ConVar.Server.printReportsToConsole)\r\n\t\t{\r\n\t\t\tDebugEx.Log($\"[FeedbackReport] {this} reported {reportType} - \\\"{text}\\\" \\\"{text2}\\\"\");\r\n\t\t\tRCon.Broadcast(RCon.LogType.Report, new\r\n\t\t\t{\r\n\t\t\t\tPlayerId = UserIDString,\r\n\t\t\t\tPlayerName = displayName,\r\n\t\t\t\tSubject = text,\r\n\t\t\t\tMessage = text2,\r\n\t\t\t\tType = reportType\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!string.IsNullOrEmpty(ConVar.Server.reportsServerEndpoint))\r\n\t\t{\r\n\t\t\tstring image = msg.read.StringMultiLine(60000);\r\n\t\t\tFacepunch.Models.Feedback feedback = default(Facepunch.Models.Feedback);\r\n\t\t\tfeedback.Type = reportType;\r\n\t\t\tfeedback.Message = text2;\r\n\t\t\tfeedback.Subject = text;\r\n\t\t\tFacepunch.Models.Feedback feedback2 = feedback;\r\n\t\t\tfeedback2.AppInfo.Image = image;\r\n\t\t\tFacepunch.Feedback.ServerReport(ConVar.Server.reportsServerEndpoint, userID, ConVar.Server.reportsServerEndpointKey, feedback2);\r\n\t\t\tInterface.CallHook(\"OnFeedbackReported\", this, text, text2, reportType);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnQueueCycle","Parameters":"(int)","ClassName":"ConnectionQueue","MethodCode":"\r\n\tpublic void Cycle(int availableSlots)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnQueueCycle\", availableSlots) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (UnityEngine.Time.realtimeSinceStartup > nextCleanupReservedSlots)\r\n\t\t{\r\n\t\t\tnextCleanupReservedSlots = UnityEngine.Time.realtimeSinceStartup + 1f;\r\n\t\t\tCleanupExpiredReservedSlots();\r\n\t\t}\r\n\t\tif (queue.Count != 0)\r\n\t\t{\r\n\t\t\tif (availableSlots - Joining > 0)\r\n\t\t\t{\r\n\t\t\t\tJoinGame(queue[0]);\r\n\t\t\t}\r\n\t\t\tSendMessages();\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanMoveItem","Parameters":"(Item,PlayerInventory,ItemContainerId,int,int,ItemMoveModifier)","ClassName":"PlayerInventory","MethodCode":"\r\n\t[BaseEntity.RPC_Server]\r\n\t[BaseEntity.RPC_Server.FromOwner]\r\n\tpublic void MoveItem(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif (base.baseEntity.IsTransferring())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemId id = msg.read.ItemID();\r\n\t\tItemContainerId itemContainerId = msg.read.ItemContainerID();\r\n\t\tint num = msg.read.Int8();\r\n\t\tint num2 = (int)msg.read.UInt32();\r\n\t\tItemMoveModifier itemMoveModifier = (ItemMoveModifier)msg.read.Int32();\r\n\t\tItem item = FindItemByUID(id);\r\n\t\tif (item == null)\r\n\t\t{\r\n\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, PlayerInventoryErrors.InvalidItem, false);\r\n\t\t\tConstructionErrors.Log(msg.player, id.ToString());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"CanMoveItem\", item, this, itemContainerId, num, num2, itemMoveModifier) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBaseEntity entityOwner = item.GetEntityOwner();\r\n\t\t\tif (entityOwner != null && entityOwner == msg.player && msg.player.IsRestrainedOrSurrendering)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!CanMoveItemsFrom(entityOwner, item))\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, PlayerInventoryErrors.CannotMoveItem, true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (num2 <= 0)\r\n\t\t\t{\r\n\t\t\t\tnum2 = item.amount;\r\n\t\t\t}\r\n\t\t\tnum2 = Mathf.Clamp(num2, 1, item.MaxStackable());\r\n\t\t\tif (msg.player.GetActiveItem() == item)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.UpdateActiveItem(default(ItemId));\r\n\t\t\t}\r\n\t\t\tif (!itemContainerId.IsValid)\r\n\t\t\t{\r\n\t\t\t\tBaseEntity baseEntity = entityOwner;\r\n\t\t\t\tif (loot.containers.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (entityOwner == base.baseEntity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!itemMoveModifier.HasFlag(ItemMoveModifier.Alt))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbaseEntity = loot.entitySource;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseEntity = base.baseEntity;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (baseEntity is IIdealSlotEntity idealSlotEntity)\r\n\t\t\t\t{\r\n\t\t\t\t\titemContainerId = idealSlotEntity.GetIdealContainer(base.baseEntity, item, itemMoveModifier);\r\n\t\t\t\t\tif (itemContainerId == ItemContainerId.Invalid)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tItemContainer parent = item.parent;\r\n\t\t\t\tif (parent != null && parent.IsLocked())\r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, PlayerInventoryErrors.ContainerLocked, false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (!itemContainerId.IsValid)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (baseEntity == loot.entitySource)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (ItemContainer container in loot.containers)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (!container.PlayerItemInputBlocked() && !container.IsLocked() && item.MoveToContainer(container, -1, allowStack: true, ignoreStackLimit: false, base.baseEntity))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!GiveItem(item, itemMoveModifier))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, \"GiveItem failed!\", true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tItemContainer itemContainer = FindContainer(itemContainerId);\r\n\t\t\tif (itemContainer == null)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, PlayerInventoryErrors.InvalidContainer, false);\r\n\t\t\t\tConstructionErrors.Log(msg.player, itemContainerId.ToString());\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (itemContainer.IsLocked())\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, PlayerInventoryErrors.ContainerLocked, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (itemContainer.PlayerItemInputBlocked())\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, PlayerInventoryErrors.DoesntAcceptPlayerItems, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (itemContainer.maxStackSize > 0)\r\n\t\t\t{\r\n\t\t\t\tnum2 = Mathf.Clamp(num2, 1, itemContainer.maxStackSize);\r\n\t\t\t}\r\n\t\t\tusing (TimeWarning.New(\"Split\"))\r\n\t\t\t{\r\n\t\t\t\tif (item.amount > num2)\r\n\t\t\t\t{\r\n\t\t\t\t\tint split_Amount = num2;\r\n\t\t\t\t\tItem item2 = item.SplitItem(split_Amount);\r\n\t\t\t\t\tItem slot = itemContainer.GetSlot(num);\r\n\t\t\t\t\tif (slot != null && !item.CanStack(slot) && item.parent != null && !item2.MoveToContainer(item.parent, -1, allowStack: false, ignoreStackLimit: false, base.baseEntity, allowSwap: false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem.amount += item2.amount;\r\n\t\t\t\t\t\titem2.Remove();\r\n\t\t\t\t\t\tItemManager.DoRemoves();\r\n\t\t\t\t\t\tServerUpdate(0f);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!item2.MoveToContainer(itemContainer, num, allowStack: true, ignoreStackLimit: false, base.baseEntity))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem.amount += item2.amount;\r\n\t\t\t\t\t\titem2.Remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem.parent.onItemRemovedFromStack?.Invoke(item, num2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tItemManager.DoRemoves();\r\n\t\t\t\t\tServerUpdate(0f);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (item.MoveToContainer(itemContainer, num, allowStack: true, ignoreStackLimit: false, base.baseEntity))\r\n\t\t\t{\r\n\t\t\t\tItemManager.DoRemoves();\r\n\t\t\t\tServerUpdate(0f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBuildingMerge","Parameters":"(ServerBuildingManager,BuildingManager.Building,BuildingManager.Building)","ClassName":"ServerBuildingManager","MethodCode":"\r\n\tprivate void Merge(Building building1, Building building2)\r\n\t{\r\n\t\tInterface.CallHook(\"OnBuildingMerge\", this, building1, building2);\r\n\t\twhile (building2.HasDecayEntities())\r\n\t\t{\r\n\t\t\tbuilding2.decayEntities[0].AttachToBuilding(building1.ID);\r\n\t\t}\r\n\t\tif (AI.nav_carve_use_building_optimization)\r\n\t\t{\r\n\t\t\tbuilding1.isNavMeshCarvingDirty = true;\r\n\t\t\tbuilding2.isNavMeshCarvingDirty = true;\r\n\t\t\tint ticks = 3;\r\n\t\t\tUpdateNavMeshCarver(building1, ref ticks, 0);\r\n\t\t\tUpdateNavMeshCarver(building1, ref ticks, 0);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLock","Parameters":"(BasePlayer,CodeLock)","ClassName":"CodeLock","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f, CheckParent = true)]\r\n\tprivate void TryLock(RPCMessage rpc)\r\n\t{\r\n\t\tif (rpc.player.CanInteract() && !IsLocked() && code.Length == 4 && Interface.CallHook(\"CanLock\", rpc.player, this) == null && whitelistPlayers.Contains(rpc.player.userID))\r\n\t\t{\r\n\t\t\tDoEffect(effectLocked.resourcePath);\r\n\t\t\tSetFlag(Flags.Locked, b: true);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCrateDropped","Parameters":"(HackableLockedCrate)","ClassName":"HackableLockedCrate","MethodCode":"\r\n\tpublic void SetWasDropped()\r\n\t{\r\n\t\twasDropped = true;\r\n\t\tInterface.CallHook(\"OnCrateDropped\", this);\r\n\t}\r\n"},{"Name":"OnConnectionDequeue","Parameters":"(Network.Connection)","ClassName":"ConnectionQueue","MethodCode":"\r\n\tpublic void RemoveConnection(Connection connection)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnConnectionDequeue\", connection) == null)\r\n\t\t{\r\n\t\t\tif (queue.Remove(connection))\r\n\t\t\t{\r\n\t\t\t\tnextMessageTime = 0f;\r\n\t\t\t}\r\n\t\t\tjoining.Remove(connection);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSendCommand","Parameters":"(Network.Connection,string,object[])","ClassName":"ConsoleNetwork","MethodCode":"\r\n\tpublic static void SendClientCommand(Connection cn, string strCommand, params object[] args)\r\n\t{\r\n\t\tif (Network.Net.sv.IsConnected() && Interface.CallHook(\"OnSendCommand\", cn, strCommand, args) == null)\r\n\t\t{\r\n\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\tnetWrite.PacketID(Message.Type.ConsoleCommand);\r\n\t\t\tstring val = ConsoleSystem.BuildCommand(strCommand, args);\r\n\t\t\tnetWrite.String(val);\r\n\t\t\tnetWrite.Send(new SendInfo(cn));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootNetworkUpdate","Parameters":"(PlayerLoot)","ClassName":"PlayerLoot","MethodCode":"\r\n\tprivate void SendUpdate()\r\n\t{\r\n\t\tisInvokingSendUpdate = false;\r\n\t\tif (!base.baseEntity.IsValid() || Interface.CallHook(\"OnLootNetworkUpdate\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing PlayerUpdateLoot playerUpdateLoot = Pool.Get<PlayerUpdateLoot>();\r\n\t\tif ((bool)entitySource && entitySource.net != null)\r\n\t\t{\r\n\t\t\tplayerUpdateLoot.entityID = entitySource.net.ID;\r\n\t\t}\r\n\t\tif (itemSource != null)\r\n\t\t{\r\n\t\t\tplayerUpdateLoot.itemID = itemSource.uid;\r\n\t\t}\r\n\t\tif (containers.Count > 0)\r\n\t\t{\r\n\t\t\tplayerUpdateLoot.containers = Pool.Get<List<ProtoBuf.ItemContainer>>();\r\n\t\t\tforeach (ItemContainer container in containers)\r\n\t\t\t{\r\n\t\t\t\tplayerUpdateLoot.containers.Add(container.Save());\r\n\t\t\t}\r\n\t\t}\r\n\t\tbase.baseEntity.ClientRPC(RpcTarget.Player(\"UpdateLoot\", base.baseEntity), playerUpdateLoot);\r\n\t}\r\n"},{"Name":"CanUnlockTechTreeNode","Parameters":"(BasePlayer,TechTreeData.NodeInstance,TechTreeData)","ClassName":"TechTreeData","MethodCode":"\r\n\tpublic bool PlayerCanUnlock(BasePlayer player, NodeInstance node)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUnlockTechTreeNode\", player, node, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (PlayerHasPathForUnlock(player, node))\r\n\t\t{\r\n\t\t\treturn !HasPlayerUnlocked(player, node);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"CanBeTargeted","Parameters":"(BaseCombatEntity,AutoTurret)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic bool ObjectVisible(BaseCombatEntity obj)\r\n\t{\r\n\t\tobject obj2 = Interface.CallHook(\"CanBeTargeted\", obj, this);\r\n\t\tif (obj2 is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj2;\r\n\t\t}\r\n\t\tList<RaycastHit> obj3 = Facepunch.Pool.Get<List<RaycastHit>>();\r\n\t\tVector3 position = eyePos.transform.position;\r\n\t\tif (GamePhysics.CheckSphere(position, 0.1f, 2097152))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tVector3 vector = AimOffset(obj);\r\n\t\tfloat num = Vector3.Distance(vector, position);\r\n\t\tVector3 vector2 = Vector3.Cross((vector - position).normalized, Vector3.up);\r\n\t\tfor (int i = 0; (float)i < (CheckPeekers() ? 3f : 1f); i++)\r\n\t\t{\r\n\t\t\tVector3 normalized = (vector + vector2 * visibilityOffsets[i] - position).normalized;\r\n\t\t\tobj3.Clear();\r\n\t\t\tGamePhysics.TraceAll(new Ray(position, normalized), 0f, obj3, num * 1.1f, 1218652417);\r\n\t\t\tfor (int j = 0; j < obj3.Count; j++)\r\n\t\t\t{\r\n\t\t\t\tBaseEntity entity = RaycastHitEx.GetEntity(obj3[j]);\r\n\t\t\t\tif ((!(entity != null) || !entity.isClient) && (!(entity != null) || !(entity.ToPlayer() != null) || entity.EqualNetID(obj)) && (!(entity != null) || !entity.EqualNetID(this)))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (entity != null && (entity == obj || entity.EqualNetID(obj)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj3);\r\n\t\t\t\t\t\tpeekIndex = i;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(entity != null) || entity.ShouldBlockProjectiles())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj3);\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnCollectiblePickup","Parameters":"(CollectibleEntity,BasePlayer,bool)","ClassName":"CollectibleEntity","MethodCode":"\r\n\tpublic void DoPickup(BasePlayer reciever, bool eat = false)\r\n\t{\r\n\t\tif (itemList == null || Interface.CallHook(\"OnCollectiblePickup\", this, reciever, eat) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemAmount[] array = itemList;\r\n\t\tforeach (ItemAmount itemAmount in array)\r\n\t\t{\r\n\t\t\tif (reciever != null && reciever.IsInTutorial && itemAmount.ignoreInTutorial)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tItem item = ItemManager.Create(itemAmount.itemDef, (int)itemAmount.amount, 0uL);\r\n\t\t\tif (item == null)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (eat && item.info.category == ItemCategory.Food && reciever != null)\r\n\t\t\t{\r\n\t\t\t\tItemModConsume component = item.info.GetComponent<ItemModConsume>();\r\n\t\t\t\tif (component != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tcomponent.DoAction(item, reciever);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((bool)reciever)\r\n\t\t\t{\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, this, reciever);\r\n\t\t\t\tInterface.CallHook(\"OnCollectiblePickedup\", this, reciever, item);\r\n\t\t\t\treciever.GiveItem(item, GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\titem.Drop(base.transform.position + Vector3.up * 0.5f, Vector3.up);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemList = null;\r\n\t\tif (pickupEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(pickupEffect.resourcePath, base.transform.position, base.transform.up);\r\n\t\t}\r\n\t\tRandomItemDispenser randomItemDispenser = PrefabAttribute.server.Find<RandomItemDispenser>(prefabID);\r\n\t\tif (randomItemDispenser != null)\r\n\t\t{\r\n\t\t\trandomItemDispenser.DistributeItems(reciever, base.transform.position);\r\n\t\t}\r\n\t\tKill();\r\n\t}\r\n"},{"Name":"OnBoomboxStationUpdate","Parameters":"(BoomBox,string,BasePlayer)","ClassName":"BoomBox","MethodCode":"\r\n\tpublic void Server_UpdateRadioIP(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tstring text = msg.read.String();\r\n\t\tif (Interface.CallHook(\"OnBoomboxStationUpdate\", this, text, msg.player) == null && IsStationValid(text))\r\n\t\t{\r\n\t\t\tif (msg.player != null)\r\n\t\t\t{\r\n\t\t\t\tulong assignedRadioBy = msg.player.userID.Get();\r\n\t\t\t\tAssignedRadioBy = assignedRadioBy;\r\n\t\t\t}\r\n\t\t\tCurrentRadioIp = text;\r\n\t\t\tbase.baseEntity.ClientRPC(RpcTarget.NetworkGroup(\"OnRadioIPChanged\"), CurrentRadioIp);\r\n\t\t\tInterface.CallHook(\"OnBoomboxStationUpdated\", this, text, msg.player);\r\n\t\t\tif (IsOn())\r\n\t\t\t{\r\n\t\t\t\tServerTogglePlay(play: false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDispenserBonusReceived","Parameters":"(ResourceDispenser,BasePlayer,Item)","ClassName":"ResourceDispenser","MethodCode":"\r\n\tpublic void AssignFinishBonus(BasePlayer player, float fraction, AttackEntity weapon)\r\n\t{\r\n\t\tif (forceFullFinishBonus)\r\n\t\t{\r\n\t\t\tfraction = 1f;\r\n\t\t}\r\n\t\tSendMessage(\"FinishBonusAssigned\", SendMessageOptions.DontRequireReceiver);\r\n\t\tif (fraction <= 0f || finishBonus == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (ItemAmount finishBonu in finishBonus)\r\n\t\t{\r\n\t\t\tint num = Mathf.CeilToInt((float)(int)finishBonu.amount * Mathf.Clamp01(fraction));\r\n\t\t\tint num2 = CalculateGatherBonus(player, finishBonu, num);\r\n\t\t\tItem item = ItemManager.Create(finishBonu.itemDef, num + num2, 0uL);\r\n\t\t\tif (item != null)\r\n\t\t\t{\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnDispenserBonus\", this, player, item);\r\n\t\t\t\tif (obj is Item)\r\n\t\t\t\t{\r\n\t\t\t\t\titem = (Item)obj;\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, base.baseEntity, player, weapon);\r\n\t\t\t\tInterface.CallHook(\"OnDispenserBonusReceived\", this, player, item);\r\n\t\t\t\tplayer.GiveItem(item, BaseEntity.GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnBasePlayerAttacked","Parameters":"(BasePlayer,HitInfo)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override void OnAttacked(HitInfo info)\r\n\t{\r\n\t\tif (Interface.CallHook(\"IOnBasePlayerAttacked\", this, info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat oldHealth = base.health;\r\n\t\tif (InSafeZone() && !IsHostile() && info.Initiator != null && info.Initiator != this)\r\n\t\t{\r\n\t\t\tinfo.damageTypes.ScaleAll(0f);\r\n\t\t}\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tHitArea boneArea = info.boneArea;\r\n\t\t\tif (boneArea != (HitArea)(-1))\r\n\t\t\t{\r\n\t\t\t\tList<Item> obj = Facepunch.Pool.Get<List<Item>>();\r\n\t\t\t\tobj.AddRange(inventory.containerWear.itemList);\r\n\t\t\t\tfor (int i = 0; i < obj.Count; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tItem item = obj[i];\r\n\t\t\t\t\tif (item != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItemModWearable component = item.info.GetComponent<ItemModWearable>();\r\n\t\t\t\t\t\tif (!(component == null) && component.ProtectsArea(boneArea))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem.OnAttacked(info);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Pool.Free(ref obj, freeElements: false);\r\n\t\t\t\tinventory.ServerUpdate(0f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tbase.OnAttacked(info);\r\n\t\tif (base.isServer && base.isServer && info.hasDamage)\r\n\t\t{\r\n\t\t\tif (!info.damageTypes.Has(DamageType.Bleeding) && info.damageTypes.IsBleedCausing() && !IsWounded() && !IsImmortalTo(info))\r\n\t\t\t{\r\n\t\t\t\tmetabolism.bleeding.Add(info.damageTypes.Total() * 0.2f);\r\n\t\t\t}\r\n\t\t\tif (isMounted)\r\n\t\t\t{\r\n\t\t\t\tGetMounted().MounteeTookDamage(this, info);\r\n\t\t\t}\r\n\t\t\tCheckDeathCondition(info);\r\n\t\t\tif (net != null && net.connection != null)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"TakeDamageHit\", this));\r\n\t\t\t}\r\n\t\t\tstring text = StringPool.Get(info.HitBone);\r\n\t\t\tbool flag = Vector3.Dot((info.PointEnd - info.PointStart).normalized, eyes.BodyForward()) > 0.4f;\r\n\t\t\tBasePlayer initiatorPlayer = info.InitiatorPlayer;\r\n\t\t\tif ((bool)initiatorPlayer && !info.damageTypes.IsMeleeType())\r\n\t\t\t{\r\n\t\t\t\tinitiatorPlayer.LifeStoryShotHit(info.Weapon);\r\n\t\t\t}\r\n\t\t\tif (info.isHeadshot)\r\n\t\t\t{\r\n\t\t\t\tif (flag)\r\n\t\t\t\t{\r\n\t\t\t\t\tSignalBroadcast(Signal.Flinch_RearHead, string.Empty);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tSignalBroadcast(Signal.Flinch_Head, string.Empty);\r\n\t\t\t\t}\r\n\t\t\t\tif (!initiatorPlayer || !initiatorPlayer.limitNetworking)\r\n\t\t\t\t{\r\n\t\t\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/headshot.prefab\", this, 0u, new Vector3(0f, 2f, 0f), Vector3.zero, (initiatorPlayer != null) ? initiatorPlayer.net.connection : null);\r\n\t\t\t\t}\r\n\t\t\t\tif ((bool)initiatorPlayer)\r\n\t\t\t\t{\r\n\t\t\t\t\tinitiatorPlayer.stats.Add(\"headshot\", 1, (Stats)5);\r\n\t\t\t\t\tif (initiatorPlayer.IsBeingSpectated)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (BaseEntity child in initiatorPlayer.children)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (child is BasePlayer basePlayer)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbasePlayer.ClientRPC(RpcTarget.Player(\"SpectatedPlayerHeadshot\", basePlayer));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (flag)\r\n\t\t\t{\r\n\t\t\t\tSignalBroadcast(Signal.Flinch_RearTorso, string.Empty);\r\n\t\t\t}\r\n\t\t\telse if (text == \"spine\" || text == \"spine2\")\r\n\t\t\t{\r\n\t\t\t\tSignalBroadcast(Signal.Flinch_Stomach, string.Empty);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSignalBroadcast(Signal.Flinch_Chest, string.Empty);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (stats != null)\r\n\t\t{\r\n\t\t\tif (IsWounded())\r\n\t\t\t{\r\n\t\t\t\tstats.combat.LogAttack(info, \"wounded\", oldHealth);\r\n\t\t\t}\r\n\t\t\telse if (IsDead())\r\n\t\t\t{\r\n\t\t\t\tstats.combat.LogAttack(info, \"killed\", oldHealth);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstats.combat.LogAttack(info, \"\", oldHealth);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ConVar.Global.cinematicGingerbreadCorpses)\r\n\t\t{\r\n\t\t\tinfo.HitMaterial = ConVar.Global.GingerbreadMaterialID();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMlrsFire","Parameters":"(MLRS,BasePlayer)","ClassName":"MLRS","MethodCode":"\r\n\tpublic void Fire(BasePlayer owner)\r\n\t{\r\n\t\tUpdateStorageState();\r\n\t\tif (CanFire && !(_mounted == null) && Interface.CallHook(\"OnMlrsFire\", this, owner) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved6, b: true);\r\n\t\t\tradiusModIndex = 0;\r\n\t\t\tnextRocketIndex = Mathf.Min(RocketAmmoCount - 1, rocketTubes.Length - 1);\r\n\t\t\trocketOwnerRef.Set(owner);\r\n\t\t\tInvokeRepeating(FireNextRocket, 0f, 0.5f);\r\n\t\t\tInterface.CallHook(\"OnMlrsFired\", this, owner);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFlameThrowerBurn","Parameters":"(FlameThrower,BaseEntity)","ClassName":"FlameThrower","MethodCode":"\r\n\tpublic void FlameTick()\r\n\t{\r\n\t\tfloat num = UnityEngine.Time.realtimeSinceStartup - lastFlameTick;\r\n\t\tlastFlameTick = UnityEngine.Time.realtimeSinceStartup;\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tReduceAmmo(num);\r\n\t\tSendNetworkUpdate();\r\n\t\tRay ray = ownerPlayer.eyes.BodyRay();\r\n\t\tVector3 origin = ray.origin;\r\n\t\tRaycastHit hitInfo;\r\n\t\tbool num2 = UnityEngine.Physics.SphereCast(ray, 0.3f, out hitInfo, flameRange, 1218652417);\r\n\t\tif (!num2)\r\n\t\t{\r\n\t\t\thitInfo.point = origin + ray.direction * flameRange;\r\n\t\t}\r\n\t\tfloat num3 = (ownerPlayer.IsNpc ? npcDamageScale : 1f);\r\n\t\tfloat amount = damagePerSec[0].amount;\r\n\t\tdamagePerSec[0].amount = amount * num * num3;\r\n\t\tint num4 = 2146305;\r\n\t\tint layers = 133376;\r\n\t\tif (!ownerPlayer.IsNpc)\r\n\t\t{\r\n\t\t\tnum4 |= 0x800;\r\n\t\t}\r\n\t\tDamageUtil.RadiusDamage(ownerPlayer, LookupPrefab(), hitInfo.point - ray.direction * 0.1f, flameRadius * 0.5f, flameRadius, damagePerSec, num4, useLineOfSight: true, ignoreAI: false, ignoreAttackingPlayer: true);\r\n\t\tdamagePerSec[0].amount = damagePerSec[0].amount * playerDamageMultiplier;\r\n\t\tDamageUtil.RadiusDamage(ownerPlayer, LookupPrefab(), hitInfo.point - ray.direction * 0.1f, flameRadius * 0.5f, flameRadius, damagePerSec, layers, useLineOfSight: true, ignoreAI: false, ignoreAttackingPlayer: true);\r\n\t\tdamagePerSec[0].amount = amount;\r\n\t\tif (num2 && UnityEngine.Time.realtimeSinceStartup >= nextFlameTime && hitInfo.distance > 1.1f)\r\n\t\t{\r\n\t\t\tnextFlameTime = UnityEngine.Time.realtimeSinceStartup + (ownerPlayer.IsNpc ? 0.25f : 0.45f);\r\n\t\t\tVector3 point = hitInfo.point;\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(fireballPrefab.resourcePath, point - ray.direction * 0.25f);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnFlameThrowerBurn\", this, baseEntity);\r\n\t\t\t\tbaseEntity.creatorEntity = ownerPlayer;\r\n\t\t\t\tFireBall fireBall = baseEntity as FireBall;\r\n\t\t\t\tif (fireBall != null && ownerPlayer.IsNpc)\r\n\t\t\t\t{\r\n\t\t\t\t\tfireBall.ignoreNPC = true;\r\n\t\t\t\t}\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ammo == 0)\r\n\t\t{\r\n\t\t\tSetFlameState(wantsOn: false);\r\n\t\t}\r\n\t\tItem ownerItem = GetOwnerItem();\r\n\t\tif (ownerItem != null && !base.UsingInfiniteAmmoCheat && !ownerPlayer.IsNpc)\r\n\t\t{\r\n\t\t\townerItem.LoseCondition(num);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerPingsSend","Parameters":"(BasePlayer,ProtoBuf.MapNoteList)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void SendPingsToClient()\r\n\t{\r\n\t\tusing MapNoteList mapNoteList = Facepunch.Pool.Get<MapNoteList>();\r\n\t\tmapNoteList.notes = Facepunch.Pool.Get<List<MapNote>>();\r\n\t\tmapNoteList.notes.AddRange(State.pings);\r\n\t\tInterface.CallHook(\"OnPlayerPingsSend\", this, mapNoteList);\r\n\t\tClientRPC(RpcTarget.Player(\"Client_ReceivePings\", this), mapNoteList);\r\n\t\tmapNoteList.notes.Clear();\r\n\t}\r\n"},{"Name":"OnTimedExplosiveExplode","Parameters":"(TimedExplosive,UnityEngine.Vector3)","ClassName":"TimedExplosive","MethodCode":"\r\n\tpublic virtual void Explode(Vector3 explosionFxPos)\r\n\t{\r\n\t\tFacepunch.Rust.Analytics.Azure.OnExplosion(this);\r\n\t\tCollider component = GetComponent<Collider>();\r\n\t\tif ((bool)component)\r\n\t\t{\r\n\t\t\tcomponent.enabled = false;\r\n\t\t}\r\n\t\tWaterLevel.WaterInfo waterInfo = WaterLevel.GetWaterInfo(explosionFxPos - new Vector3(0f, 0.25f, 0f), waves: true, volumes: true);\r\n\t\tif (underwaterExplosionEffect.isValid && waterInfo.isValid && waterInfo.currentDepth >= underwaterExplosionDepth)\r\n\t\t{\r\n\t\t\tEffect.server.Run(underwaterExplosionEffect.resourcePath, explosionFxPos, GetExplosionNormal(), null, broadcast: true);\r\n\t\t}\r\n\t\telse if (explosionEffect.isValid)\r\n\t\t{\r\n\t\t\tVector3 posWorld = explosionFxPos;\r\n\t\t\tif (explosionOffsetMode == ExplosionEffectOffsetMode.Local)\r\n\t\t\t{\r\n\t\t\t\tVector3 vector = base.transform.TransformPoint(explosionEffectOffset) - base.transform.position;\r\n\t\t\t\tposWorld += vector;\r\n\t\t\t}\r\n\t\t\tif (explosionOffsetMode == ExplosionEffectOffsetMode.World)\r\n\t\t\t{\r\n\t\t\t\tposWorld += explosionEffectOffset;\r\n\t\t\t}\r\n\t\t\tEffect.server.Run(explosionEffect.resourcePath, posWorld, GetExplosionNormal(), null, broadcast: true);\r\n\t\t}\r\n\t\tif (watersurfaceExplosionEffect.isValid && waterInfo.isValid && waterInfo.overallDepth >= watersurfaceExplosionDepth.x && waterInfo.currentDepth <= watersurfaceExplosionDepth.y)\r\n\t\t{\r\n\t\t\tEffect.server.Run(watersurfaceExplosionEffect.resourcePath, explosionFxPos.WithY(waterInfo.surfaceLevel), GetExplosionNormal(), null, broadcast: true);\r\n\t\t}\r\n\t\tif (damageTypes.Count > 0)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnTimedExplosiveExplode\", this, explosionFxPos) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tVector3 vector2 = ExplosionCenter();\r\n\t\t\tif (onlyDamageParent)\r\n\t\t\t{\r\n\t\t\t\tDamageUtil.RadiusDamage(creatorEntity, LookupPrefab(), vector2, minExplosionRadius, explosionRadius, damageTypes, 166144, useLineOfSight: true, IgnoreAI);\r\n\t\t\t\tBaseEntity baseEntity = GetParentEntity();\r\n\t\t\t\tBaseCombatEntity baseCombatEntity = baseEntity as BaseCombatEntity;\r\n\t\t\t\twhile (baseCombatEntity == null && baseEntity != null && baseEntity.HasParent())\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseEntity = baseEntity.GetParentEntity();\r\n\t\t\t\t\tbaseCombatEntity = baseEntity as BaseCombatEntity;\r\n\t\t\t\t}\r\n\t\t\t\tif (baseEntity == null || !GameObjectEx.IsOnLayer(baseEntity.gameObject, Layer.Construction))\r\n\t\t\t\t{\r\n\t\t\t\t\tList<BuildingBlock> obj = Pool.Get<List<BuildingBlock>>();\r\n\t\t\t\t\tVis.Entities(vector2, explosionRadius, obj, 2097152, QueryTriggerInteraction.Ignore);\r\n\t\t\t\t\tBuildingBlock buildingBlock = null;\r\n\t\t\t\t\tfloat num = float.PositiveInfinity;\r\n\t\t\t\t\tforeach (BuildingBlock item in obj)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!item.isClient && !item.IsDestroyed && !(item.healthFraction <= 0f))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfloat num2 = Vector3.Distance(item.ClosestPoint(vector2), vector2);\r\n\t\t\t\t\t\t\tif (num2 < num && item.IsVisible(vector2, explosionRadius))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuildingBlock = item;\r\n\t\t\t\t\t\t\t\tnum = num2;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((bool)buildingBlock)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHitInfo hitInfo = new HitInfo();\r\n\t\t\t\t\t\thitInfo.Initiator = creatorEntity;\r\n\t\t\t\t\t\thitInfo.WeaponPrefab = LookupPrefab();\r\n\t\t\t\t\t\thitInfo.damageTypes.Add(damageTypes);\r\n\t\t\t\t\t\thitInfo.PointStart = vector2;\r\n\t\t\t\t\t\thitInfo.PointEnd = buildingBlock.transform.position;\r\n\t\t\t\t\t\tfloat amount = 1f - Mathf.Clamp01((num - minExplosionRadius) / (explosionRadius - minExplosionRadius));\r\n\t\t\t\t\t\thitInfo.damageTypes.ScaleAll(amount);\r\n\t\t\t\t\t\tbuildingBlock.Hurt(hitInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tPool.FreeUnmanaged(ref obj);\r\n\t\t\t\t}\r\n\t\t\t\tif ((bool)baseCombatEntity)\r\n\t\t\t\t{\r\n\t\t\t\t\tHitInfo hitInfo2 = new HitInfo();\r\n\t\t\t\t\thitInfo2.Initiator = creatorEntity;\r\n\t\t\t\t\thitInfo2.WeaponPrefab = LookupPrefab();\r\n\t\t\t\t\thitInfo2.damageTypes.Add(damageTypes);\r\n\t\t\t\t\tbaseCombatEntity.Hurt(hitInfo2);\r\n\t\t\t\t}\r\n\t\t\t\telse if (baseEntity != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tHitInfo hitInfo3 = new HitInfo();\r\n\t\t\t\t\thitInfo3.Initiator = creatorEntity;\r\n\t\t\t\t\thitInfo3.WeaponPrefab = LookupPrefab();\r\n\t\t\t\t\thitInfo3.damageTypes.Add(damageTypes);\r\n\t\t\t\t\thitInfo3.PointStart = vector2;\r\n\t\t\t\t\thitInfo3.PointEnd = baseEntity.transform.position;\r\n\t\t\t\t\tbaseEntity.OnAttacked(hitInfo3);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tDamageUtil.RadiusDamage(creatorEntity, LookupPrefab(), vector2, minExplosionRadius, explosionRadius, damageTypes, 1210222849, useLineOfSight: true, IgnoreAI);\r\n\t\t\t}\r\n\t\t\tSeismicSensor.Notify(vector2, vibrationLevel);\r\n\t\t\tBlindAnyAI();\r\n\t\t}\r\n\t\tif (!base.IsDestroyed && !HasFlag(Flags.Broken))\r\n\t\t{\r\n\t\t\tKill(DestroyMode.Gib);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,LootableCorpse)","ClassName":"LootableCorpse","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_LootCorpse(RPCMessage rpc)\r\n\t{\r\n\t\tBasePlayer player = rpc.player;\r\n\t\tif (!player || !player.CanInteract() || !CanLoot() || containers == null || Interface.CallHook(\"CanLootEntity\", player, this) != null || !player.inventory.loot.StartLootingEntity(this))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetFlag(Flags.Open, b: true);\r\n\t\tfor (int i = 0; i < containers.Length; i++)\r\n\t\t{\r\n\t\t\tItemContainer itemContainer = containers[i];\r\n\t\t\tif (CanLootContainer(itemContainer, i))\r\n\t\t\t{\r\n\t\t\t\tplayer.inventory.loot.AddContainer(itemContainer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayer.inventory.loot.SendImmediate();\r\n\t\tplayer.RadioactiveLootCheck(player.inventory.loot.containers);\r\n\t\tClientRPC(RpcTarget.Player(\"RPC_ClientLootCorpse\", player));\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnTeamUpdate","Parameters":"(ulong,ulong,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void UpdateTeam(ulong newTeam)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnTeamUpdate\", currentTeam, newTeam, this) == null)\r\n\t\t{\r\n\t\t\tcurrentTeam = newTeam;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tif (RelationshipManager.ServerInstance.FindTeam(newTeam) == null)\r\n\t\t\t{\r\n\t\t\t\tClearTeam();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tTeamUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnPlayerConnected","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void PlayerInit(Network.Connection c)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"PlayerInit\", 10))\r\n\t\t{\r\n\t\t\tCancelInvoke(base.KillMessage);\r\n\t\t\tSetPlayerFlag(PlayerFlags.Connected, b: true);\r\n\t\t\tactivePlayerList.Add(this);\r\n\t\t\tbots.Remove(this);\r\n\t\t\tuserID = c.userid;\r\n\t\t\tUserIDString = userID.Get().ToString();\r\n\t\t\tdisplayName = c.username;\r\n\t\t\tc.player = this;\r\n\t\t\tsecondsConnected = 0;\r\n\t\t\tcurrentTeam = RelationshipManager.ServerInstance.FindPlayersTeam(userID)?.teamID ?? 0;\r\n\t\t\tSingletonComponent<ServerMgr>.Instance.persistance.SetPlayerName(userID, displayName);\r\n\t\t\ttickInterpolator.Reset(base.transform.position);\r\n\t\t\ttickHistory.Reset(base.transform.position);\r\n\t\t\teyeHistory.Clear();\r\n\t\t\tlastTickTime = 0f;\r\n\t\t\tlastInputTime = 0f;\r\n\t\t\tSetPlayerFlag(PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\t\tstats.Init();\r\n\t\t\tInvokeRandomized(StatSave, UnityEngine.Random.Range(5f, 10f), 30f, UnityEngine.Random.Range(0f, 6f));\r\n\t\t\tpreviousLifeStory = SingletonComponent<ServerMgr>.Instance.persistance.GetLastLifeStory(userID);\r\n\t\t\tSetPlayerFlag(PlayerFlags.IsAdmin, c.authLevel != 0);\r\n\t\t\tSetPlayerFlag(PlayerFlags.IsDeveloper, DeveloperList.IsDeveloper(this));\r\n\t\t\tif (IsDead() && net.SwitchGroup(BaseNetworkable.LimboNetworkGroup))\r\n\t\t\t{\r\n\t\t\t\tSendNetworkGroupChange();\r\n\t\t\t}\r\n\t\t\tnet.OnConnected(c);\r\n\t\t\tnet.StartSubscriber();\r\n\t\t\tSendAsSnapshot(net.connection);\r\n\t\t\tGlobalNetworkHandler.server.StartSendingSnapshot(this);\r\n\t\t\tClientRPC(RpcTarget.Player(\"StartLoading\", this));\r\n\t\t\tif ((bool)BaseGameMode.GetActiveGameMode(serverside: true))\r\n\t\t\t{\r\n\t\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnPlayerConnected(this);\r\n\t\t\t}\r\n\t\t\tif (net != null)\r\n\t\t\t{\r\n\t\t\t\tEACServer.OnStartLoading(net.connection);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"IOnPlayerConnected\", this);\r\n\t\t\tif (IsAdmin)\r\n\t\t\t{\r\n\t\t\t\tif (ConVar.AntiHack.noclip_protection <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tChatMessage(\"antihack.noclip_protection is disabled!\");\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.speedhack_protection <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tChatMessage(\"antihack.speedhack_protection is disabled!\");\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.flyhack_protection <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tChatMessage(\"antihack.flyhack_protection is disabled!\");\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.projectile_protection <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tChatMessage(\"antihack.projectile_protection is disabled!\");\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.melee_protection <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tChatMessage(\"antihack.melee_protection is disabled!\");\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.eye_protection <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tChatMessage(\"antihack.eye_protection is disabled!\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinventory.crafting.SendToOwner();\r\n\t\t\tif (TerrainMeta.Path != null && TerrainMeta.Path.OceanPatrolFar != null)\r\n\t\t\t{\r\n\t\t\t\tSendCargoPatrolPath();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMaxStackable","Parameters":"(Item)","ClassName":"Item","MethodCode":"\r\n\tpublic int MaxStackable()\r\n\t{\r\n\t\tint num = info.stackable;\r\n\t\tif (parent != null && parent.maxStackSize > 0)\r\n\t\t{\r\n\t\t\tnum = Mathf.Min(parent.maxStackSize, num);\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnMaxStackable\", this);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\treturn num;\r\n\t}\r\n"},{"Name":"OnFireworkDesignChanged","Parameters":"(PatternFirework,ProtoBuf.PatternFirework.Design,BasePlayer)","ClassName":"PatternFirework","MethodCode":"\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tprivate void ServerSetFireworkDesign(RPCMessage rpc)\r\n\t{\r\n\t\tif (!PlayerCanModify(rpc.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tProtoBuf.PatternFirework.Design design = ProtoBuf.PatternFirework.Design.Deserialize(rpc.read);\r\n\t\tif (Interface.CallHook(\"OnFireworkDesignChange\", this, design, rpc.player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (design?.stars != null)\r\n\t\t{\r\n\t\t\twhile (design.stars.Count > MaxStars)\r\n\t\t\t{\r\n\t\t\t\tint index = design.stars.Count - 1;\r\n\t\t\t\tdesign.stars[index].Dispose();\r\n\t\t\t\tdesign.stars.RemoveAt(index);\r\n\t\t\t}\r\n\t\t\tforeach (ProtoBuf.PatternFirework.Star star in design.stars)\r\n\t\t\t{\r\n\t\t\t\tstar.position = new Vector2(Mathf.Clamp(star.position.x, -1f, 1f), Mathf.Clamp(star.position.y, -1f, 1f));\r\n\t\t\t\tstar.color = new Color(Mathf.Clamp01(star.color.r), Mathf.Clamp01(star.color.g), Mathf.Clamp01(star.color.b), 1f);\r\n\t\t\t}\r\n\t\t\tdesign.editedBy = rpc.player.userID;\r\n\t\t}\r\n\t\tDesign?.Dispose();\r\n\t\tDesign = design;\r\n\t\tInterface.CallHook(\"OnFireworkDesignChanged\", this, design, rpc.player);\r\n\t\tSendNetworkUpdateImmediate();\r\n\t}\r\n"},{"Name":"OnVendingShopOpen","Parameters":"(InvisibleVendingMachine,BasePlayer)","ClassName":"NPCTalking","MethodCode":"\r\n\tpublic virtual void OnConversationAction(BasePlayer player, string action)\r\n\t{\r\n\t\tif (action == \"openvending\")\r\n\t\t{\r\n\t\t\tInvisibleVendingMachine vendingMachine = GetVendingMachine();\r\n\t\t\tif (vendingMachine != null && Vector3.Distance(player.transform.position, base.transform.position) < 5f)\r\n\t\t\t{\r\n\t\t\t\tForceEndConversation(player);\r\n\t\t\t\tif (Interface.CallHook(\"OnVendingShopOpen\", vendingMachine, player) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tvendingMachine.PlayerOpenLoot(player, \"vendingmachine.customer\", doPositionChecks: false);\r\n\t\t\t\t\tInterface.CallHook(\"OnVendingShopOpened\", vendingMachine, player);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(\"scrap\");\r\n\t\tNPCConversationResultAction[] array = conversationResultActions;\r\n\t\tforeach (NPCConversationResultAction nPCConversationResultAction in array)\r\n\t\t{\r\n\t\t\tif (!(nPCConversationResultAction.action == action))\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tCleanupConversingPlayers();\r\n\t\t\tforeach (BasePlayer conversingPlayer in conversingPlayers)\r\n\t\t\t{\r\n\t\t\t\tif (!(conversingPlayer == player) && !(conversingPlayer == null))\r\n\t\t\t\t{\r\n\t\t\t\t\tint speechNodeIndex = GetConversationFor(player).GetSpeechNodeIndex(\"startbusy\");\r\n\t\t\t\t\tForceSpeechNode(conversingPlayer, speechNodeIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint num = nPCConversationResultAction.scrapCost;\r\n\t\t\tList<Item> list = player.inventory.FindItemsByItemID(itemDefinition.itemid);\r\n\t\t\tforeach (Item item in list)\r\n\t\t\t{\r\n\t\t\t\tnum -= item.amount;\r\n\t\t\t}\r\n\t\t\tif (num > 0)\r\n\t\t\t{\r\n\t\t\t\tint speechNodeIndex2 = GetConversationFor(player).GetSpeechNodeIndex(\"toopoor\");\r\n\t\t\t\tForceSpeechNode(player, speechNodeIndex2);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnNPCVendor(player, this, nPCConversationResultAction.scrapCost, nPCConversationResultAction.action);\r\n\t\t\tnum = nPCConversationResultAction.scrapCost;\r\n\t\t\tforeach (Item item2 in list)\r\n\t\t\t{\r\n\t\t\t\tint num2 = Mathf.Min(num, item2.amount);\r\n\t\t\t\titem2.UseItem(num2);\r\n\t\t\t\tnum -= num2;\r\n\t\t\t\tif (num <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlastActionPlayer = player;\r\n\t\t\tBroadcastEntityMessage(nPCConversationResultAction.broadcastMessage, nPCConversationResultAction.broadcastRange);\r\n\t\t\tlastActionPlayer = null;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDemoRecordingStarted","Parameters":"(string,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void StartDemoRecording()\r\n\t{\r\n\t\tif (net != null && net.connection != null && !net.connection.IsRecording)\r\n\t\t{\r\n\t\t\tstring text = $\"demos/{UserIDString}/{DateTime.Now:yyyy-MM-dd-hhmmss}.dem\";\r\n\t\t\tif (Interface.CallHook(\"OnDemoRecordingStart\", text, this) == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.Log(ToString() + \" recording started: \" + text);\r\n\t\t\t\tnet.connection.StartRecording(text, new Demo.Header\r\n\t\t\t\t{\r\n\t\t\t\t\tversion = Demo.Version,\r\n\t\t\t\t\tlevel = UnityEngine.Application.loadedLevelName,\r\n\t\t\t\t\tlevelSeed = World.Seed,\r\n\t\t\t\t\tlevelSize = World.Size,\r\n\t\t\t\t\tchecksum = World.Checksum,\r\n\t\t\t\t\tlocalclient = userID,\r\n\t\t\t\t\tposition = eyes.position,\r\n\t\t\t\t\trotation = eyes.HeadForward(),\r\n\t\t\t\t\tlevelUrl = World.Url,\r\n\t\t\t\t\trecordedTime = DateTime.Now.ToBinary()\r\n\t\t\t\t});\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tSendGlobalSnapshot();\r\n\t\t\t\tSendFullSnapshot();\r\n\t\t\t\tSendEntityUpdate();\r\n\t\t\t\tTreeManager.SendSnapshot(this);\r\n\t\t\t\tServerMgr.SendReplicatedVars(net.connection);\r\n\t\t\t\tInvokeRepeating(MonitorDemoRecording, 10f, 10f);\r\n\t\t\t\tInterface.CallHook(\"OnDemoRecordingStarted\", text, this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHealingItemUse","Parameters":"(MedicalTool,BasePlayer)","ClassName":"MedicalTool","MethodCode":"\r\n\tprivate void GiveEffectsTo(BasePlayer player)\r\n\t{\r\n\t\tif (!player)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition ownerItemDefinition = GetOwnerItemDefinition();\r\n\t\tItemModConsumable component = ownerItemDefinition.GetComponent<ItemModConsumable>();\r\n\t\tif (!component)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"No consumable for medicaltool :\" + base.name);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnHealingItemUse\", this, player) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnMedUsed(ownerItemDefinition.shortname, ownerPlayer, player);\r\n\t\t\tif (player != ownerPlayer)\r\n\t\t\t{\r\n\t\t\t\tif (Interface.CallHook(\"OnPlayerRevive\", GetOwnerPlayer(), player) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (player.IsWounded() && canRevive)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.StopWounded(ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tforeach (ItemModConsumable.ConsumableEffect effect in component.effects)\r\n\t\t\t{\r\n\t\t\t\tif (effect.type == MetabolismAttribute.Type.Health)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.health += effect.amount;\r\n\t\t\t\t\tplayer.ProcessMissionEvent(BaseMission.MissionEventType.HEAL, prefabID, effect.amount);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.metabolism.ApplyChange(effect.type, effect.amount, effect.time);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (player is BasePet)\r\n\t\t\t{\r\n\t\t\t\tplayer.SendNetworkUpdateImmediate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSleepingBagDestroy","Parameters":"(SleepingBag,ulong)","ClassName":"SleepingBag","MethodCode":"\r\n\tpublic static bool DestroyBag(ulong userID, NetworkableId sleepingBag)\r\n\t{\r\n\t\tSleepingBag sleepingBag2 = FindForPlayer(userID, ignoreTimers: true).FirstOrDefault((SleepingBag x) => x.net.ID == sleepingBag);\r\n\t\tif (sleepingBag2 == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnSleepingBagDestroy\", sleepingBag2, userID) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tRemoveBagForPlayer(sleepingBag2, sleepingBag2.deployerUserID);\r\n\t\tsleepingBag2.deployerUserID = 0uL;\r\n\t\tsleepingBag2.SendNetworkUpdate();\r\n\t\tBasePlayer basePlayer = BasePlayer.FindByID(userID);\r\n\t\tif (basePlayer != null)\r\n\t\t{\r\n\t\t\tbasePlayer.SendRespawnOptions();\r\n\t\t\tInterface.CallHook(\"OnSleepingBagDestroyed\", sleepingBag2, userID);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnBagUnclaimed(basePlayer, sleepingBag2);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnBoatPathGenerate","Parameters":"()","ClassName":"BaseBoat","MethodCode":"\r\n\tpublic static List<Vector3> GenerateOceanPatrolPath(float minDistanceFromShore = 50f, float minWaterDepth = 8f)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnBoatPathGenerate\");\r\n\t\tif (obj is List<Vector3>)\r\n\t\t{\r\n\t\t\treturn (List<Vector3>)obj;\r\n\t\t}\r\n\t\tfloat x = TerrainMeta.Size.x;\r\n\t\tfloat num = x * 2f * MathF.PI;\r\n\t\tfloat num2 = 30f;\r\n\t\tint num3 = Mathf.CeilToInt(num / num2);\r\n\t\tList<Vector3> list = new List<Vector3>();\r\n\t\tfloat num4 = x;\r\n\t\tfloat y = 0f;\r\n\t\tfor (int i = 0; i < num3; i++)\r\n\t\t{\r\n\t\t\tfloat num5 = (float)i / (float)num3 * 360f;\r\n\t\t\tlist.Add(new Vector3(Mathf.Sin(num5 * (MathF.PI / 180f)) * num4, y, Mathf.Cos(num5 * (MathF.PI / 180f)) * num4));\r\n\t\t}\r\n\t\tfloat num6 = 4f;\r\n\t\tfloat num7 = 200f;\r\n\t\tbool flag = true;\r\n\t\tfor (int j = 0; j < AI.ocean_patrol_path_iterations && flag; j++)\r\n\t\t{\r\n\t\t\tflag = false;\r\n\t\t\tfor (int k = 0; k < num3; k++)\r\n\t\t\t{\r\n\t\t\t\tVector3 vector = list[k];\r\n\t\t\t\tint index = ((k == 0) ? (num3 - 1) : (k - 1));\r\n\t\t\t\tint index2 = ((k != num3 - 1) ? (k + 1) : 0);\r\n\t\t\t\tVector3 b = list[index2];\r\n\t\t\t\tVector3 b2 = list[index];\r\n\t\t\t\tVector3 origin = vector;\r\n\t\t\t\tVector3 normalized = (Vector3.zero - vector).normalized;\r\n\t\t\t\tVector3 vector2 = vector + normalized * num6;\r\n\t\t\t\tif (Vector3.Distance(vector2, b) > num7 || Vector3.Distance(vector2, b2) > num7)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tbool flag2 = true;\r\n\t\t\t\tint num8 = 16;\r\n\t\t\t\tfor (int l = 0; l < num8; l++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num9 = (float)l / (float)num8 * 360f;\r\n\t\t\t\t\tVector3 normalized2 = new Vector3(Mathf.Sin(num9 * (MathF.PI / 180f)), y, Mathf.Cos(num9 * (MathF.PI / 180f))).normalized;\r\n\t\t\t\t\tVector3 vector3 = vector2 + normalized2 * 1f;\r\n\t\t\t\t\tVector3 direction = normalized;\r\n\t\t\t\t\tif (vector3 != Vector3.zero)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdirection = (vector3 - vector2).normalized;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (UnityEngine.Physics.SphereCast(origin, 3f, direction, out var _, minDistanceFromShore, 1084293377))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tflag2 = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (flag2)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tlist[k] = vector2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"Failed to generate ocean patrol path\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tList<int> list2 = new List<int>();\r\n\t\tLineUtility.Simplify(list, 5f, list2);\r\n\t\tList<Vector3> list3 = list;\r\n\t\tlist = new List<Vector3>();\r\n\t\tforeach (int item in list2)\r\n\t\t{\r\n\t\t\tlist.Add(list3[item]);\r\n\t\t}\r\n\t\tDebug.Log(\"Generated ocean patrol path with node count: \" + list.Count);\r\n\t\treturn list;\r\n\t}\r\n"},{"Name":"CanUseWires","Parameters":"(BasePlayer)","ClassName":"WireTool","MethodCode":"\r\n\tpublic static bool CanPlayerUseWires(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseWires\", player);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player != null && player.IsInCreativeMode && Creative.unlimitedIo)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!player.CanBuild())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tList<Collider> obj2 = Facepunch.Pool.Get<List<Collider>>();\r\n\t\tGamePhysics.OverlapSphere(player.eyes.position, 0.1f, obj2, 536870912, QueryTriggerInteraction.Collide);\r\n\t\tbool result = true;\r\n\t\tforeach (Collider item in obj2)\r\n\t\t{\r\n\t\t\tif (!item.gameObject.CompareTag(\"IgnoreWireCheck\"))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnRackedWeaponUnload","Parameters":"(Item,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate void UnloadWeapon(BasePlayer player, int mountSlotIndex)\r\n\t{\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(mountSlotIndex);\r\n\t\tif (weaponAtIndex == null || !weaponAtIndex.CanBeReloadedAtWeaponRack())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.GetSlot(weaponAtIndex.InventoryIndex);\r\n\t\tif (slot == null || Interface.CallHook(\"OnRackedWeaponUnload\", slot, player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity heldEntity = slot.GetHeldEntity();\r\n\t\tif (!(heldEntity == null))\r\n\t\t{\r\n\t\t\tBaseProjectile component = heldEntity.GetComponent<BaseProjectile>();\r\n\t\t\tif (!(component == null))\r\n\t\t\t{\r\n\t\t\t\tItemDefinition ammoType = component.primaryMagazine.ammoType;\r\n\t\t\t\tcomponent.UnloadAmmo(slot, player);\r\n\t\t\t\tSetSlotAmmoDetails(weaponAtIndex, slot);\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"PlayAmmoSound\", player), ammoType.itemid, 1);\r\n\t\t\t\tInterface.CallHook(\"OnRackedWeaponUnloaded\", slot, player, this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityEnter","Parameters":"(TriggerBase,BaseEntity)","ClassName":"TriggerBase","MethodCode":"\r\n\tpublic virtual void OnEntityEnter(BaseEntity ent)\r\n\t{\r\n\t\tif (!(ent == null))\r\n\t\t{\r\n\t\t\tif (entityContents == null)\r\n\t\t\t{\r\n\t\t\t\tentityContents = new HashSet<BaseEntity>();\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnEntityEnter\", this, ent) == null)\r\n\t\t\t{\r\n\t\t\t\tentityContents.Add(ent);\r\n\t\t\t\tOnEntityEnterTrigger?.Invoke(ent);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretAuthorize","Parameters":"(AutoTurret,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void AddSelfAuthorize(BasePlayer player)\r\n\t{\r\n\t\tBasePlayer player2 = player;\r\n\t\tif (!IsOnline() && player2.CanBuild() && !AtMaxAuthCapacity() && Interface.CallHook(\"OnTurretAuthorize\", this, player) == null)\r\n\t\t{\r\n\t\t\tauthorizedPlayers.RemoveWhere((PlayerNameID x) => x.userid == (ulong)player2.userID);\r\n\t\t\tPlayerNameID playerNameID = new PlayerNameID();\r\n\t\t\tplayerNameID.userid = player2.userID;\r\n\t\t\tplayerNameID.username = player2.displayName;\r\n\t\t\tauthorizedPlayers.Add(playerNameID);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityAuthChanged(this, player2, authorizedPlayers.Select((PlayerNameID x) => x.userid), \"added\", player2.userID);\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityKill","Parameters":"(BaseNetworkable)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic void Kill(DestroyMode mode = DestroyMode.None)\r\n\t{\r\n\t\tif (IsDestroyed)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"Calling kill - but already IsDestroyed!? \" + this);\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnEntityKill\", this) == null)\r\n\t\t{\r\n\t\t\tEntityProfiler.killed++;\r\n\t\t\tif (EntityProfiler.mode >= 2)\r\n\t\t\t{\r\n\t\t\t\tEntityProfiler.OnKilled(this);\r\n\t\t\t}\r\n\t\t\tOnParentDestroyingEx.BroadcastOnParentDestroying(base.gameObject);\r\n\t\t\tDoEntityDestroy();\r\n\t\t\tTerminateOnClient(mode);\r\n\t\t\tTerminateOnServer();\r\n\t\t\tEntityDestroy();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnClothingItemChanged","Parameters":"(PlayerInventory,Item,bool)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic void OnClothingChanged(Item item, bool bAdded)\r\n\t{\r\n\t\tbase.baseEntity.SV_ClothingChanged();\r\n\t\tif (ItemManager.EnablePooling)\r\n\t\t{\r\n\t\t\tif (!IsInvoking(DeferredServerUpdateAction))\r\n\t\t\t{\r\n\t\t\t\tInvoke(DeferredServerUpdateAction, 0f);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tServerUpdate(0f);\r\n\t\t}\r\n\t\tif (item.position == 7)\r\n\t\t{\r\n\t\t\titem.RecalulateParentEntity(children: true);\r\n\t\t\tInvoke(UpdatedVisibleHolsteredItems, 0.1f);\r\n\t\t\titem?.contents?.onItemAddedRemoved?.Invoke(item, bAdded);\r\n\t\t}\r\n\t\tbase.baseEntity.ProcessMissionEvent(BaseMission.MissionEventType.CLOTHINGCHANGED, 0, 0f);\r\n\t\tInterface.CallHook(\"OnClothingItemChanged\", this, item, bAdded);\r\n\t}\r\n"},{"Name":"CanCatchFish","Parameters":"(BasePlayer,BaseFishingRod,Item)","ClassName":"BaseFishingRod","MethodCode":"\r\n\tprivate void CatchProcessBudgeted()\r\n\t{\r\n\t\tinQueue = false;\r\n\t\tFishingBobber fishingBobber = currentBobber.Get(serverside: true);\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (ownerPlayer == null || ownerPlayer.IsSleeping() || ownerPlayer.IsWounded() || ownerPlayer.IsDead() || fishingBobber == null)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.UserRequested);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 position = ownerPlayer.transform.position;\r\n\t\tfloat num = Vector3.Angle((fishingBobber.transform.position.WithY(0f) - position.WithY(0f)).normalized, ownerPlayer.eyes.HeadForward().WithY(0f));\r\n\t\tfloat num2 = Vector3.Distance(position, fishingBobber.transform.position.WithY(position.y));\r\n\t\tif (num > ((num2 > 1.2f) ? 60f : 180f))\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.BadAngle);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (num2 > 1.2f && (float)lastSightCheck > 0.4f)\r\n\t\t{\r\n\t\t\tif (!GamePhysics.LineOfSight(ownerPlayer.eyes.position, fishingBobber.transform.position, 1084293377))\r\n\t\t\t{\r\n\t\t\t\tServer_Cancel(FailReason.Obstructed);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlastSightCheck = 0f;\r\n\t\t}\r\n\t\tif (Vector3.Distance(position, fishingBobber.transform.position) > MaxCastDistance * 2f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TooFarAway);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Vector3.Distance(playerStartPosition, position) > 1f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.PlayerMoved);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (CurrentState == CatchState.Waiting)\r\n\t\t{\r\n\t\t\tif ((float)catchTime < 0f)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_HookedSomething\"));\r\n\t\t\t\tCurrentState = CatchState.Catching;\r\n\t\t\t\tfishingBobber.SetFlag(Flags.Reserved1, b: true);\r\n\t\t\t\tnextFishStateChange = 0f;\r\n\t\t\t\tfishCatchDuration = 0f;\r\n\t\t\t\tstrainTimer = 0f;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tFishState fishState = currentFishState;\r\n\t\tif ((float)nextFishStateChange < 0f)\r\n\t\t{\r\n\t\t\tfloat num3 = Mathx.RemapValClamped(fishingBobber.TireAmount, 0f, 20f, 0f, 1f);\r\n\t\t\tif (currentFishState != 0)\r\n\t\t\t{\r\n\t\t\t\tcurrentFishState = (FishState)0;\r\n\t\t\t\tnextFishStateChange = UnityEngine.Random.Range(2f, 4f) * (num3 + 1f);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnextFishStateChange = UnityEngine.Random.Range(3f, 7f) * (1f - num3);\r\n\t\t\t\tif (UnityEngine.Random.Range(0, 100) < 50)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState = FishState.PullingLeft;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState = FishState.PullingRight;\r\n\t\t\t\t}\r\n\t\t\t\tif (UnityEngine.Random.Range(0, 100) > 60 && Vector3.Distance(fishingBobber.transform.position, ownerPlayer.transform.position) < MaxCastDistance - 2f)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState |= FishState.PullingBack;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((float)fishCatchDuration > 120f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TimeOut);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = ownerPlayer.serverInput.IsDown(BUTTON.RIGHT);\r\n\t\tbool flag2 = ownerPlayer.serverInput.IsDown(BUTTON.LEFT);\r\n\t\tbool flag3 = HasReelInInput(ownerPlayer.serverInput);\r\n\t\tif (flag2 && flag)\r\n\t\t{\r\n\t\t\tflag2 = (flag = false);\r\n\t\t}\r\n\t\tUpdateFlags(flag2, flag, flag3);\r\n\t\tif (CurrentState == CatchState.Waiting)\r\n\t\t{\r\n\t\t\tflag = (flag2 = (flag3 = false));\r\n\t\t}\r\n\t\tif (flag2 && !AllowPullInDirection(-ownerPlayer.eyes.HeadRight(), fishingBobber.transform.position))\r\n\t\t{\r\n\t\t\tflag2 = false;\r\n\t\t}\r\n\t\tif (flag && !AllowPullInDirection(ownerPlayer.eyes.HeadRight(), fishingBobber.transform.position))\r\n\t\t{\r\n\t\t\tflag = false;\r\n\t\t}\r\n\t\tfishingBobber.ServerMovementUpdate(flag2, flag, flag3, ref currentFishState, position, fishableModifier);\r\n\t\tbool flag4 = false;\r\n\t\tfloat num4 = 0f;\r\n\t\tif (flag3 || flag2 || flag)\r\n\t\t{\r\n\t\t\tflag4 = true;\r\n\t\t\tnum4 = 0.5f;\r\n\t\t}\r\n\t\tif (currentFishState != 0 && flag4)\r\n\t\t{\r\n\t\t\tif (currentFishState.Contains(FishState.PullingBack) && flag3)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 1.5f;\r\n\t\t\t}\r\n\t\t\telse if ((currentFishState.Contains(FishState.PullingLeft) || currentFishState.Contains(FishState.PullingRight)) && flag3)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 1.2f;\r\n\t\t\t}\r\n\t\t\telse if (currentFishState.Contains(FishState.PullingLeft) && flag)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 0.8f;\r\n\t\t\t}\r\n\t\t\telse if (currentFishState.Contains(FishState.PullingRight) && flag2)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 0.8f;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag3 && currentFishState != 0)\r\n\t\t{\r\n\t\t\tnum4 += 1f;\r\n\t\t}\r\n\t\tnum4 *= fishableModifier.StrainModifier * GlobalStrainSpeedMultiplier;\r\n\t\tif (flag4)\r\n\t\t{\r\n\t\t\tstrainTimer += UnityEngine.Time.deltaTime * num4;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstrainTimer = Mathf.MoveTowards(strainTimer, 0f, UnityEngine.Time.deltaTime * 1.5f);\r\n\t\t}\r\n\t\tfloat num5 = strainTimer / 6f;\r\n\t\tSetFlag(Flags.Reserved1, flag4 && num5 > 0.25f);\r\n\t\tif ((float)lastStrainUpdate > 0.4f || fishState != currentFishState)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_UpdateFishState\"), (int)currentFishState, num5);\r\n\t\t\tlastStrainUpdate = 0f;\r\n\t\t}\r\n\t\tif (strainTimer > 7f || ForceFail)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TensionBreak);\r\n\t\t}\r\n\t\telse if (num2 <= FishCatchDistance || ForceSuccess)\r\n\t\t{\r\n\t\t\tCurrentState = CatchState.Caught;\r\n\t\t\tif (currentFishTarget != null)\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(currentFishTarget, 1, 0uL);\r\n\t\t\t\tobject obj = Interface.CallHook(\"CanCatchFish\", ownerPlayer, this, item);\r\n\t\t\t\tif (obj is bool && !(bool)obj)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj2 = Interface.CallHook(\"OnFishCatch\", item, this, ownerPlayer);\r\n\t\t\t\tif (obj2 is Item && obj2 as Item != item)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t\titem = (Item)obj2;\r\n\t\t\t\t}\r\n\t\t\t\townerPlayer.GiveItem(item, GiveItemReason.Crafted);\r\n\t\t\t\tif (currentFishTarget.shortname == \"skull.human\")\r\n\t\t\t\t{\r\n\t\t\t\t\titem.name = RandomUsernames.Get(UnityEngine.Random.Range(0, 1000));\r\n\t\t\t\t}\r\n\t\t\t\tif (Rust.GameInfo.HasAchievements && !string.IsNullOrEmpty(fishableModifier.SteamStatName))\r\n\t\t\t\t{\r\n\t\t\t\t\townerPlayer.stats.Add(fishableModifier.SteamStatName, 1);\r\n\t\t\t\t\townerPlayer.stats.Save(forceSteamSave: true);\r\n\t\t\t\t\tFishLookup.Instance.CheckCatchAllAchievement(ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Server.FishCaught(currentFishTarget);\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_OnCaughtFish\"), currentFishTarget.itemid);\r\n\t\t\townerPlayer.SignalBroadcast(Signal.Alt_Attack);\r\n\t\t\tInvoke(ResetLine, 6f);\r\n\t\t\tfishingBobber.Kill();\r\n\t\t\tcurrentBobber.Set(null);\r\n\t\t\tCancelInvoke(CatchProcess);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnFishCaught\", currentFishTarget, this, ownerPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPhoneNameUpdate","Parameters":"(PhoneController,string,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void UpdatePhoneName(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif (!(msg.player != currentPlayer))\r\n\t\t{\r\n\t\t\tstring text = msg.read.String();\r\n\t\t\tif (text.Length > 20)\r\n\t\t\t{\r\n\t\t\t\ttext = text.Substring(0, 20);\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnPhoneNameUpdate\", this, text, msg.player) == null)\r\n\t\t\t{\r\n\t\t\t\tPhoneName = text;\r\n\t\t\t\tbase.baseEntity.SendNetworkUpdate();\r\n\t\t\t\tInterface.CallHook(\"OnPhoneNameUpdated\", this, PhoneName, msg.player);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,DroppedItemContainer)","ClassName":"DroppedItemContainer","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_OpenLoot(RPCMessage rpc)\r\n\t{\r\n\t\tif (inventory != null)\r\n\t\t{\r\n\t\t\tBasePlayer player = rpc.player;\r\n\t\t\tif ((bool)player && player.CanInteract() && Interface.CallHook(\"CanLootEntity\", player, this) == null && player.inventory.loot.StartLootingEntity(this))\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Open, b: true);\r\n\t\t\t\tplayer.inventory.loot.AddContainer(inventory);\r\n\t\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), lootPanelName);\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCargoShipHarborLeave","Parameters":"(CargoShip)","ClassName":"CargoShip","MethodCode":"\r\n\tprivate void LeaveHarbor()\r\n\t{\r\n\t\tif (docking_debug)\r\n\t\t{\r\n\t\t\tDebug.Log(\"Cargo is leaving harbor.\");\r\n\t\t}\r\n\t\tPlayHorn();\r\n\t\tSetFlag(Flags.Reserved1, b: false);\r\n\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\tcurrentHarborApproachNode++;\r\n\t\tInterface.CallHook(\"OnCargoShipHarborLeave\", this);\r\n\t}\r\n"},{"Name":"OnXmasStockingFill","Parameters":"(Stocking)","ClassName":"Stocking","MethodCode":"\r\n\tpublic override void SpawnLoot()\r\n\t{\r\n\t\tif (base.inventory == null)\r\n\t\t{\r\n\t\t\tDebug.Log(\"CONTACT DEVELOPERS! Stocking::PopulateLoot has null inventory!!! \" + base.name);\r\n\t\t}\r\n\t\telse if (IsEmpty() && Interface.CallHook(\"OnXmasStockingFill\", this) == null)\r\n\t\t{\r\n\t\t\tbase.SpawnLoot();\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tHurt(MaxHealth() * 0.1f, DamageType.Generic, null, useProtection: false);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanNetworkTo","Parameters":"(BaseNetworkable,BasePlayer)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic virtual bool ShouldNetworkTo(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanNetworkTo\", this, player);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (net.group == null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn player.net.subscriber.IsSubscribed(net.group);\r\n\t}\r\n"},{"Name":"OnRecyclerToggle","Parameters":"(Recycler,BasePlayer)","ClassName":"Recycler","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tprivate void SVSwitch(RPCMessage msg)\r\n\t{\r\n\t\tbool flag = msg.read.Bit();\r\n\t\tif (flag == IsOn() || msg.player == null || Interface.CallHook(\"OnRecyclerToggle\", this, msg.player) != null || (!flag && onlyOneUser && msg.player.inventory.loot.entitySource != this) || (flag && !HasRecyclable()))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tforeach (Item item in base.inventory.itemList)\r\n\t\t\t{\r\n\t\t\t\titem.CollectedForCrafting(msg.player);\r\n\t\t\t}\r\n\t\t\tStartRecycling();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tStopRecycling();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnThreatLevelUpdate","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void EnsureUpdated()\r\n\t{\r\n\t\tif (UnityEngine.Time.realtimeSinceStartup - lastUpdateTime < 30f)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlastUpdateTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t\tcachedThreatLevel = 0f;\r\n\t\tif (IsSleeping() || Interface.CallHook(\"OnThreatLevelUpdate\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (inventory.containerWear.itemList.Count > 2)\r\n\t\t{\r\n\t\t\tcachedThreatLevel += 1f;\r\n\t\t}\r\n\t\tforeach (Item item in inventory.containerBelt.itemList)\r\n\t\t{\r\n\t\t\tBaseEntity heldEntity = item.GetHeldEntity();\r\n\t\t\tif ((bool)heldEntity && heldEntity is BaseProjectile && !(heldEntity is BowWeapon))\r\n\t\t\t{\r\n\t\t\t\tcachedThreatLevel += 2f;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeHomingTargeted","Parameters":"(BaseHelicopter)","ClassName":"BaseHelicopter","MethodCode":"\r\n\tpublic virtual bool IsValidHomingTarget()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeHomingTargeted\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanEntityBeHostile","Parameters":"(BaseCombatEntity)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual bool IsHostile()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanEntityBeHostile\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn unHostileTime > UnityEngine.Time.realtimeSinceStartup;\r\n\t}\r\n"},{"Name":"OnPlayerStudyBlueprint","Parameters":"(BasePlayer,Item)","ClassName":"ItemModStudyBlueprint","MethodCode":"\r\n\tpublic override void ServerCommand(Item item, string command, BasePlayer player)\r\n\t{\r\n\t\tif (command != \"study\" || !item.IsBlueprint())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (item.GetOwnerPlayer() != player && player.inventory.GetBackpackWithInventory()?.contents != item.parent)\r\n\t\t{\r\n\t\t\tbool flag = false;\r\n\t\t\tforeach (ItemContainer container in player.inventory.loot.containers)\r\n\t\t\t{\r\n\t\t\t\tif (item.GetRootContainer() == container)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (IsBlueprintUnlocked(item, player, out var blueprintTargetDef, out var blueprint) || Interface.CallHook(\"OnPlayerStudyBlueprint\", player, item) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem item2 = item;\r\n\t\tif (item.amount > 1)\r\n\t\t{\r\n\t\t\titem2 = item.SplitItem(1);\r\n\t\t}\r\n\t\titem2.UseItem();\r\n\t\tplayer.blueprints.Unlock(blueprintTargetDef);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnBlueprintLearned(player, blueprintTargetDef, \"blueprint\", ResearchTable.ScrapForResearch(blueprintTargetDef), player);\r\n\t\tif (blueprint != null && blueprint.additionalUnlocks != null && blueprint.additionalUnlocks.Count > 0)\r\n\t\t{\r\n\t\t\tforeach (ItemDefinition additionalUnlock in blueprint.additionalUnlocks)\r\n\t\t\t{\r\n\t\t\t\tplayer.blueprints.Unlock(additionalUnlock);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnBlueprintLearned(player, additionalUnlock, \"blueprint\", 0, player);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (studyEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(studyEffect.resourcePath, player, StringPool.Get(\"head\"), Vector3.zero, Vector3.zero);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDigitalClockAlarmsSet","Parameters":"(DigitalClock,ProtoBuf.DigitalClockMessage)","ClassName":"DigitalClock","MethodCode":"\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_SetAlarms(RPCMessage msg)\r\n\t{\r\n\t\tif (!CanPlayerAdmin(msg.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDigitalClockMessage digitalClockMessage = DigitalClockMessage.Deserialize(msg.read);\r\n\t\tif (Interface.CallHook(\"OnDigitalClockAlarmsSet\", this, digitalClockMessage) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<DigitalClockAlarm> list = digitalClockMessage.alarms;\r\n\t\talarms.Clear();\r\n\t\tforeach (DigitalClockAlarm item2 in list)\r\n\t\t{\r\n\t\t\tAlarm item = new Alarm(DigitalClockEx.ToTimeSpan(item2.time), item2.active);\r\n\t\t\talarms.Add(item);\r\n\t\t}\r\n\t\tmuted = digitalClockMessage.muted;\r\n\t\tMarkDirty();\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnSensorDetect","Parameters":"(HBHFSensor,BasePlayer)","ClassName":"HBHFSensor","MethodCode":"\r\n\tpublic void UpdatePassthroughAmount()\r\n\t{\r\n\t\tif (base.isClient)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = detectedPlayers;\r\n\t\tdetectedPlayers = 0;\r\n\t\tif (myTrigger.entityContents != null)\r\n\t\t{\r\n\t\t\tforeach (BaseEntity entityContent in myTrigger.entityContents)\r\n\t\t\t{\r\n\t\t\t\tif (entityContent == null || !entityContent.IsVisible(base.transform.position + base.transform.forward * 0.1f, 10f))\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tBasePlayer component = entityContent.GetComponent<BasePlayer>();\r\n\t\t\t\tif (Interface.CallHook(\"OnSensorDetect\", this, component) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tbool flag = component.CanBuild();\r\n\t\t\t\t\tif ((!flag || ShouldIncludeAuthorized()) && (flag || ShouldIncludeOthers()) && component != null && component.IsAlive() && !component.IsSleeping() && component.isServer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdetectedPlayers++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (num != detectedPlayers && IsPowered())\r\n\t\t{\r\n\t\t\tMarkDirty();\r\n\t\t\tif (detectedPlayers > num)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(detectUp.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t\telse if (detectedPlayers < num)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(detectDown.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWallpaperRemove","Parameters":"(BuildingBlock,int)","ClassName":"BuildingBlock","MethodCode":"\r\n\tpublic void RemoveWallpaper(int side)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnWallpaperRemove\", this, side) == null)\r\n\t\t{\r\n\t\t\tswitch (side)\r\n\t\t\t{\r\n\t\t\tcase 0:\r\n\t\t\t\twallpaperHealth = -1f;\r\n\t\t\t\twallpaperID = 0uL;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\twallpaperHealth2 = -1f;\r\n\t\t\t\twallpaperID2 = 0uL;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (base.isServer)\r\n\t\t\t{\r\n\t\t\t\tSetConditionalModel(currentSkin.DetermineConditionalModelState(this));\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"RefreshSkin\"));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnOvenCook","Parameters":"(BaseOven,Item)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic void Cook()\r\n\t{\r\n\t\tif (HasFlag(Flags.Reserved8))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem item = FindBurnable();\r\n\t\tif (Interface.CallHook(\"OnOvenCook\", this, item) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (item == null && !CanRunWithNoFuel)\r\n\t\t{\r\n\t\t\tStopCooking();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (Item item2 in base.inventory.itemList)\r\n\t\t{\r\n\t\t\tif (item2.position >= _inputSlotIndex && item2.position < _inputSlotIndex + inputSlots && !item2.HasFlag(Item.Flag.Cooking))\r\n\t\t\t{\r\n\t\t\t\titem2.SetFlag(Item.Flag.Cooking, b: true);\r\n\t\t\t\titem2.MarkDirty();\r\n\t\t\t}\r\n\t\t}\r\n\t\tIncreaseCookTime(0.5f * GetSmeltingSpeed());\r\n\t\tBaseEntity slot = GetSlot(Slot.FireMod);\r\n\t\tif ((bool)slot)\r\n\t\t{\r\n\t\t\tslot.SendMessage(\"Cook\", 0.5f, SendMessageOptions.DontRequireReceiver);\r\n\t\t}\r\n\t\tif (item != null)\r\n\t\t{\r\n\t\t\tItemModBurnable itemModBurnable = item.info.ItemModBurnable;\r\n\t\t\titem.fuel -= 0.5f * (cookingTemperature / 200f);\r\n\t\t\tif (!item.HasFlag(Item.Flag.OnFire))\r\n\t\t\t{\r\n\t\t\t\titem.SetFlag(Item.Flag.OnFire, b: true);\r\n\t\t\t\titem.MarkDirty();\r\n\t\t\t}\r\n\t\t\tif (item.fuel <= 0f)\r\n\t\t\t{\r\n\t\t\t\tConsumeFuel(item, itemModBurnable);\r\n\t\t\t}\r\n\t\t}\r\n\t\tOnCooked();\r\n\t\tInterface.CallHook(\"OnOvenCooked\", this, item, slot);\r\n\t}\r\n"},{"Name":"OnVendingShopOpened","Parameters":"(InvisibleVendingMachine,BasePlayer)","ClassName":"NPCTalking","MethodCode":"\r\n\tpublic virtual void OnConversationAction(BasePlayer player, string action)\r\n\t{\r\n\t\tif (action == \"openvending\")\r\n\t\t{\r\n\t\t\tInvisibleVendingMachine vendingMachine = GetVendingMachine();\r\n\t\t\tif (vendingMachine != null && Vector3.Distance(player.transform.position, base.transform.position) < 5f)\r\n\t\t\t{\r\n\t\t\t\tForceEndConversation(player);\r\n\t\t\t\tif (Interface.CallHook(\"OnVendingShopOpen\", vendingMachine, player) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tvendingMachine.PlayerOpenLoot(player, \"vendingmachine.customer\", doPositionChecks: false);\r\n\t\t\t\t\tInterface.CallHook(\"OnVendingShopOpened\", vendingMachine, player);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(\"scrap\");\r\n\t\tNPCConversationResultAction[] array = conversationResultActions;\r\n\t\tforeach (NPCConversationResultAction nPCConversationResultAction in array)\r\n\t\t{\r\n\t\t\tif (!(nPCConversationResultAction.action == action))\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tCleanupConversingPlayers();\r\n\t\t\tforeach (BasePlayer conversingPlayer in conversingPlayers)\r\n\t\t\t{\r\n\t\t\t\tif (!(conversingPlayer == player) && !(conversingPlayer == null))\r\n\t\t\t\t{\r\n\t\t\t\t\tint speechNodeIndex = GetConversationFor(player).GetSpeechNodeIndex(\"startbusy\");\r\n\t\t\t\t\tForceSpeechNode(conversingPlayer, speechNodeIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint num = nPCConversationResultAction.scrapCost;\r\n\t\t\tList<Item> list = player.inventory.FindItemsByItemID(itemDefinition.itemid);\r\n\t\t\tforeach (Item item in list)\r\n\t\t\t{\r\n\t\t\t\tnum -= item.amount;\r\n\t\t\t}\r\n\t\t\tif (num > 0)\r\n\t\t\t{\r\n\t\t\t\tint speechNodeIndex2 = GetConversationFor(player).GetSpeechNodeIndex(\"toopoor\");\r\n\t\t\t\tForceSpeechNode(player, speechNodeIndex2);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnNPCVendor(player, this, nPCConversationResultAction.scrapCost, nPCConversationResultAction.action);\r\n\t\t\tnum = nPCConversationResultAction.scrapCost;\r\n\t\t\tforeach (Item item2 in list)\r\n\t\t\t{\r\n\t\t\t\tint num2 = Mathf.Min(num, item2.amount);\r\n\t\t\t\titem2.UseItem(num2);\r\n\t\t\t\tnum -= num2;\r\n\t\t\t\tif (num <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlastActionPlayer = player;\r\n\t\t\tBroadcastEntityMessage(nPCConversationResultAction.broadcastMessage, nPCConversationResultAction.broadcastRange);\r\n\t\t\tlastActionPlayer = null;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCodeChange","Parameters":"(ModularCar,BasePlayer,string)","ClassName":"ModularCarGarage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_RequestNewCode(RPCMessage msg)\r\n\t{\r\n\t\tif (!HasOccupant || !carOccupant.CarLock.HasALock)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!(player == null))\r\n\t\t{\r\n\t\t\tstring text = msg.read.String();\r\n\t\t\tif (Interface.CallHook(\"OnCodeChange\", carOccupant, player, text) == null && carOccupant.CarLock.TrySetNewCode(text, player.userID))\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(changeLockCodeEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPatrolHelicopterTakeDamage","Parameters":"(PatrolHelicopter,HitInfo)","ClassName":"PatrolHelicopter","MethodCode":"\r\n\tpublic override void Hurt(HitInfo info)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPatrolHelicopterTakeDamage\", this, info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tif (info.damageTypes.Total() >= base.health)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnPatrolHelicopterKill\", this, info) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbase.health = 10000f;\r\n\t\t\tmyAI.CriticalDamage();\r\n\t\t\tflag = true;\r\n\t\t}\r\n\t\tbase.Hurt(info);\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tmyAI.OtherDamaged(info);\r\n\t\tweakspot[] array = weakspots;\r\n\t\tforeach (weakspot weakspot in array)\r\n\t\t{\r\n\t\t\tstring[] bonenames = weakspot.bonenames;\r\n\t\t\tforeach (string str in bonenames)\r\n\t\t\t{\r\n\t\t\t\tif (info.HitBone == StringPool.Get(str))\r\n\t\t\t\t{\r\n\t\t\t\t\tweakspot.Hurt(info.damageTypes.Total(), info);\r\n\t\t\t\t\tmyAI.WeakspotDamaged(weakspot, info);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanHelicopterStrafe","Parameters":"(PatrolHelicopterAI)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tpublic bool CanStrafe()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanHelicopterStrafe\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (UnityEngine.Time.realtimeSinceStartup - lastStrafeTime >= UnityEngine.Random.Range(15f, 25f))\r\n\t\t{\r\n\t\t\treturn CanInterruptState();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnWindmillUpdate","Parameters":"(ElectricWindmill)","ClassName":"ElectricWindmill","MethodCode":"\r\n\tpublic void WindUpdate()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnWindmillUpdate\", this) == null)\r\n\t\t{\r\n\t\t\tserverWindSpeed = GetWindSpeedScale();\r\n\t\t\tif (!AmIVisible())\r\n\t\t\t{\r\n\t\t\t\tserverWindSpeed = 0f;\r\n\t\t\t}\r\n\t\t\tint num = Mathf.FloorToInt((float)maxPowerGeneration * serverWindSpeed);\r\n\t\t\tbool num2 = currentEnergy != num;\r\n\t\t\tcurrentEnergy = num;\r\n\t\t\tif (num2)\r\n\t\t\t{\r\n\t\t\t\tMarkDirty();\r\n\t\t\t}\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tInterface.CallHook(\"OnWindmillUpdated\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHelicopterDropCrate","Parameters":"(CH47HelicopterAIController)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic void DropCrate()\r\n\t{\r\n\t\tif (numCrates > 0)\r\n\t\t{\r\n\t\t\tVector3 pos = base.transform.position + Vector3.down * 5f;\r\n\t\t\tQuaternion rot = Quaternion.Euler(0f, UnityEngine.Random.Range(0f, 360f), 0f);\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(lockedCratePrefab.resourcePath, pos, rot);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnHelicopterDropCrate\", this);\r\n\t\t\t\tbaseEntity.SendMessage(\"SetWasDropped\");\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t}\r\n\t\t\tnumCrates--;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemResearch","Parameters":"(ResearchTable,Item,BasePlayer)","ClassName":"ResearchTable","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void DoResearch(RPCMessage msg)\r\n\t{\r\n\t\tif (IsResearching())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer player = msg.player;\r\n\t\tItem targetItem = GetTargetItem();\r\n\t\tif (targetItem != null && Interface.CallHook(\"CanResearchItem\", player, targetItem) == null && targetItem.amount <= 1 && IsItemResearchable(targetItem))\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnItemResearch\", this, targetItem, player);\r\n\t\t\ttargetItem.CollectedForCrafting(player);\r\n\t\t\tresearchFinishedTime = UnityEngine.Time.realtimeSinceStartup + researchDuration;\r\n\t\t\tInvoke(ResearchAttemptFinished, researchDuration);\r\n\t\t\tbase.inventory.SetLocked(isLocked: true);\r\n\t\t\tint scrapCost = ScrapForResearch(targetItem);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnResearchStarted(player, this, targetItem, scrapCost);\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tif (researchStartEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(researchStartEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t\tmsg.player.GiveAchievement(\"RESEARCH_ITEM\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCargoShipEgress","Parameters":"(CargoShip)","ClassName":"CargoShip","MethodCode":"\r\n\tpublic void StartEgress()\r\n\t{\r\n\t\tif (!isDoingHarborApproach && !egressing)\r\n\t\t{\r\n\t\t\tegressing = true;\r\n\t\t\tif (Interface.CallHook(\"OnCargoShipEgress\", this) == null)\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(PlayHorn);\r\n\t\t\t\tradiation.SetActive(value: true);\r\n\t\t\t\tSetFlag(Flags.Reserved8, b: true);\r\n\t\t\t\tInvokeRepeating(UpdateRadiation, 10f, 1f);\r\n\t\t\t\tInvoke(DelayedDestroy, 60f * egress_duration_minutes);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeTargeted","Parameters":"(BasePlayer,GunTrap)","ClassName":"GunTrap","MethodCode":"\r\n\tpublic bool CheckTrigger()\r\n\t{\r\n\t\tHashSet<BaseEntity> entityContents = trigger.entityContents;\r\n\t\tif (entityContents == null || entityContents.Count == 0)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tList<RaycastHit> obj = Pool.Get<List<RaycastHit>>();\r\n\t\tBuildingPrivlidge cachedTc = GetCachedTc();\r\n\t\tbool flag = false;\r\n\t\tforeach (BaseEntity item in entityContents)\r\n\t\t{\r\n\t\t\tBasePlayer component = item.GetComponent<BasePlayer>();\r\n\t\t\tif (component.IsSleeping() || !component.IsAlive())\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tobject obj2 = Interface.CallHook(\"CanBeTargeted\", component, this);\r\n\t\t\tif (obj2 is bool)\r\n\t\t\t{\r\n\t\t\t\tPool.FreeUnmanaged(ref obj);\r\n\t\t\t\treturn (bool)obj2;\r\n\t\t\t}\r\n\t\t\tif (!(cachedTc == null) && cachedTc.IsAuthed(component))\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tobj.Clear();\r\n\t\t\tGamePhysics.TraceAll(new Ray(component.eyes.position, (GetEyePosition() - component.eyes.position).normalized), 0f, obj, 9f, 1218519297);\r\n\t\t\tfor (int i = 0; i < obj.Count; i++)\r\n\t\t\t{\r\n\t\t\t\tBaseEntity entity = RaycastHitEx.GetEntity(obj[i]);\r\n\t\t\t\tif (entity != null && (entity == this || entity.EqualNetID(this)))\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (!(entity != null) || entity.ShouldBlockProjectiles())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tPool.FreeUnmanaged(ref obj);\r\n\t\treturn flag;\r\n\t}\r\n"},{"Name":"CanSamSiteShoot","Parameters":"(SamSite)","ClassName":"SamSite","MethodCode":"\r\n\tpublic void WeaponTick()\r\n\t{\r\n\t\tif (IsDead() || UnityEngine.Time.time < lockOnTime || UnityEngine.Time.time < nextBurstTime)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!IsPowered())\r\n\t\t{\r\n\t\t\tfiredCount = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (firedCount >= 6)\r\n\t\t{\r\n\t\t\tfloat timeBetweenBursts = mostRecentTargetType.timeBetweenBursts;\r\n\t\t\tnextBurstTime = UnityEngine.Time.time + timeBetweenBursts;\r\n\t\t\tfiredCount = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tEnsureReloaded();\r\n\t\tif (Interface.CallHook(\"CanSamSiteShoot\", this) == null && HasAmmo())\r\n\t\t{\r\n\t\t\tbool num = ammoItem != null && ammoItem.amount == lowAmmoThreshold;\r\n\t\t\tif (!staticRespawn && ammoItem != null)\r\n\t\t\t{\r\n\t\t\t\tammoItem.UseItem();\r\n\t\t\t}\r\n\t\t\tfiredCount++;\r\n\t\t\tfloat speedMultiplier = 1f;\r\n\t\t\tif (!ObjectEx.IsUnityNull(currentTarget))\r\n\t\t\t{\r\n\t\t\t\tspeedMultiplier = currentTarget.SAMTargetType.speedMultiplier;\r\n\t\t\t}\r\n\t\t\tFireProjectile(tubes[currentTubeIndex].position, currentAimDir, speedMultiplier);\r\n\t\t\tEffect.server.Run(muzzleFlashTest.resourcePath, this, StringPool.Get(\"Tube \" + (currentTubeIndex + 1)), Vector3.zero, Vector3.up);\r\n\t\t\tcurrentTubeIndex++;\r\n\t\t\tif (currentTubeIndex >= tubes.Length)\r\n\t\t\t{\r\n\t\t\t\tcurrentTubeIndex = 0;\r\n\t\t\t}\r\n\t\t\tif (num)\r\n\t\t\t{\r\n\t\t\t\tMarkIODirty();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDispenserGathered","Parameters":"(ResourceDispenser,BasePlayer,Item)","ClassName":"ResourceDispenser","MethodCode":"\r\n\tprivate void GiveResourceFromItem(BasePlayer entity, ItemAmount itemAmt, float gatherDamage, float destroyFraction, AttackEntity attackWeapon)\r\n\t{\r\n\t\tif (itemAmt.amount == 0f)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = Mathf.Min(gatherDamage, base.baseEntity.Health()) / base.baseEntity.MaxHealth();\r\n\t\tfloat num2 = itemAmt.startAmount / startingItemCounts;\r\n\t\tfloat f = Mathf.Clamp(itemAmt.startAmount * num / num2, 0f, itemAmt.amount);\r\n\t\tf = Mathf.Round(f);\r\n\t\tfloat num3 = f * destroyFraction * 2f;\r\n\t\tif (itemAmt.amount <= f + num3)\r\n\t\t{\r\n\t\t\tfloat num4 = (f + num3) / itemAmt.amount;\r\n\t\t\tf /= num4;\r\n\t\t\tnum3 /= num4;\r\n\t\t}\r\n\t\titemAmt.amount -= Mathf.Floor(f);\r\n\t\titemAmt.amount -= Mathf.Floor(num3);\r\n\t\tif (f < 1f)\r\n\t\t{\r\n\t\t\tf = ((UnityEngine.Random.Range(0f, 1f) <= f) ? 1f : 0f);\r\n\t\t\titemAmt.amount = 0f;\r\n\t\t}\r\n\t\tif (itemAmt.amount < 0f)\r\n\t\t{\r\n\t\t\titemAmt.amount = 0f;\r\n\t\t}\r\n\t\tif (f >= 1f)\r\n\t\t{\r\n\t\t\tint num5 = CalculateGatherBonus(entity, itemAmt, f);\r\n\t\t\tint iAmount = Mathf.FloorToInt(f) + num5;\r\n\t\t\tItem item = ItemManager.CreateByItemID(itemAmt.itemid, iAmount, 0uL);\r\n\t\t\tif (Interface.CallHook(\"OnDispenserGather\", this, entity, item) == null && item != null)\r\n\t\t\t{\r\n\t\t\t\tOverrideOwnership(item, attackWeapon);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, base.baseEntity, entity, attackWeapon);\r\n\t\t\t\tInterface.CallHook(\"OnDispenserGathered\", this, entity, item);\r\n\t\t\t\tentity.GiveItem(item, BaseEntity.GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBypassQueue","Parameters":"(Network.Connection)","ClassName":"ConnectionQueue","MethodCode":"\r\n\tprivate bool CanJumpQueue(Connection connection)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBypassQueue\", connection);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (DeveloperList.Contains(connection.userid))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tServerUsers.User user = ServerUsers.Get(connection.userid);\r\n\t\tif (user != null && user.group == ServerUsers.UserGroup.Moderator)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (user != null && user.group == ServerUsers.UserGroup.Owner)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (user != null && user.group == ServerUsers.UserGroup.SkipQueue)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tfor (int i = 0; i < reservedSlots.Count; i++)\r\n\t\t{\r\n\t\t\tif (reservedSlots[i].UserId == connection.userid && reservedSlots[i].Expiry > UnityEngine.Time.realtimeSinceStartup)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnNpcConversationRespond","Parameters":"(NPCTalking,BasePlayer,ConversationData,ConversationData.ResponseNode)","ClassName":"NPCTalking","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\tpublic void Server_ResponsePressed(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tint num = msg.read.Int32();\r\n\t\tint num2 = msg.read.Int32();\r\n\t\tConversationData conversationFor = GetConversationFor(player);\r\n\t\tif (conversationFor == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConversationData.ResponseNode responseNode = conversationFor.speeches[num].responses[num2];\r\n\t\tif (responseNode == null || Interface.CallHook(\"OnNpcConversationRespond\", this, player, conversationFor, responseNode) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (responseNode.conditions.Length != 0)\r\n\t\t{\r\n\t\t\tUpdateFlags();\r\n\t\t}\r\n\t\tbool flag = responseNode.PassesConditions(player, this);\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tstring actionString = responseNode.GetActionString();\r\n\t\t\tif (!string.IsNullOrEmpty(actionString))\r\n\t\t\t{\r\n\t\t\t\tOnConversationAction(player, actionString);\r\n\t\t\t}\r\n\t\t}\r\n\t\tint speechNodeIndex = conversationFor.GetSpeechNodeIndex(flag ? responseNode.resultingSpeechNode : responseNode.GetFailedSpeechNode(player, this));\r\n\t\tif (speechNodeIndex == -1)\r\n\t\t{\r\n\t\t\tForceEndConversation(player);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tForceSpeechNode(player, speechNodeIndex);\r\n\t\tInterface.CallHook(\"OnNpcConversationResponded\", this, player, conversationFor, responseNode);\r\n\t}\r\n"},{"Name":"OnCrateLaptopAttack","Parameters":"(HackableLockedCrate,HitInfo)","ClassName":"HackableLockedCrate","MethodCode":"\r\n\tpublic override void OnAttacked(HitInfo info)\r\n\t{\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tif (StringPool.Get(info.HitBone) == \"laptopcollision\")\r\n\t\t\t{\r\n\t\t\t\tif (Interface.CallHook(\"OnCrateLaptopAttack\", this, info) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tEffect.server.Run(shockEffect.resourcePath, info.HitPositionWorld, Vector3.up);\r\n\t\t\t\thackSeconds -= 8f * (info.damageTypes.Total() / 50f);\r\n\t\t\t\tif (hackSeconds < 0f)\r\n\t\t\t\t{\r\n\t\t\t\t\thackSeconds = 0f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tRefreshDecay();\r\n\t\t}\r\n\t\tbase.OnAttacked(info);\r\n\t}\r\n"},{"Name":"OnFindSpawnPoint","Parameters":"(BasePlayer)","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic static BasePlayer.SpawnPoint FindSpawnPoint(BasePlayer forPlayer = null)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnFindSpawnPoint\", forPlayer);\r\n\t\tif (obj is BasePlayer.SpawnPoint)\r\n\t\t{\r\n\t\t\treturn (BasePlayer.SpawnPoint)obj;\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tif (forPlayer != null && forPlayer.IsInTutorial)\r\n\t\t{\r\n\t\t\tTutorialIsland currentTutorialIsland = forPlayer.GetCurrentTutorialIsland();\r\n\t\t\tif (currentTutorialIsland != null)\r\n\t\t\t{\r\n\t\t\t\tBasePlayer.SpawnPoint spawnPoint = new BasePlayer.SpawnPoint();\r\n\t\t\t\tif (forPlayer.CurrentTutorialAllowance > BasePlayer.TutorialItemAllowance.Level1_HatchetPickaxe)\r\n\t\t\t\t{\r\n\t\t\t\t\tspawnPoint.pos = currentTutorialIsland.MidMissionSpawnPoint.position;\r\n\t\t\t\t\tspawnPoint.rot = currentTutorialIsland.MidMissionSpawnPoint.rotation;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tspawnPoint.pos = currentTutorialIsland.InitialSpawnPoint.position;\r\n\t\t\t\t\tspawnPoint.rot = currentTutorialIsland.InitialSpawnPoint.rotation;\r\n\t\t\t\t}\r\n\t\t\t\treturn spawnPoint;\r\n\t\t\t}\r\n\t\t}\r\n\t\tBaseGameMode baseGameMode = Gamemode();\r\n\t\tif ((bool)baseGameMode && baseGameMode.useCustomSpawns)\r\n\t\t{\r\n\t\t\tBasePlayer.SpawnPoint playerSpawn = baseGameMode.GetPlayerSpawn(forPlayer);\r\n\t\t\tif (playerSpawn != null)\r\n\t\t\t{\r\n\t\t\t\treturn playerSpawn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (SingletonComponent<SpawnHandler>.Instance != null && !flag)\r\n\t\t{\r\n\t\t\tBasePlayer.SpawnPoint spawnPoint2 = SpawnHandler.GetSpawnPoint();\r\n\t\t\tif (spawnPoint2 != null)\r\n\t\t\t{\r\n\t\t\t\treturn spawnPoint2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tBasePlayer.SpawnPoint spawnPoint3 = new BasePlayer.SpawnPoint();\r\n\t\tif (forPlayer != null && forPlayer.IsInTutorial)\r\n\t\t{\r\n\t\t\tTutorialIsland currentTutorialIsland2 = forPlayer.GetCurrentTutorialIsland();\r\n\t\t\tif (currentTutorialIsland2 != null)\r\n\t\t\t{\r\n\t\t\t\tspawnPoint3.pos = currentTutorialIsland2.InitialSpawnPoint.position;\r\n\t\t\t\tspawnPoint3.rot = currentTutorialIsland2.InitialSpawnPoint.rotation;\r\n\t\t\t\treturn spawnPoint3;\r\n\t\t\t}\r\n\t\t}\r\n\t\tGameObject[] array = GameObject.FindGameObjectsWithTag(\"spawnpoint\");\r\n\t\tif (array.Length != 0)\r\n\t\t{\r\n\t\t\tGameObject gameObject = array[UnityEngine.Random.Range(0, array.Length)];\r\n\t\t\tspawnPoint3.pos = gameObject.transform.position;\r\n\t\t\tspawnPoint3.rot = gameObject.transform.rotation;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.Log(\"Couldn't find an appropriate spawnpoint for the player - so spawning at camera\");\r\n\t\t\tif (MainCamera.mainCamera != null)\r\n\t\t\t{\r\n\t\t\t\tspawnPoint3.pos = MainCamera.position;\r\n\t\t\t\tspawnPoint3.rot = MainCamera.rotation;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (UnityEngine.Physics.Raycast(new Ray(spawnPoint3.pos, Vector3.down), out var hitInfo, 32f, 1537286401))\r\n\t\t{\r\n\t\t\tspawnPoint3.pos = hitInfo.point;\r\n\t\t}\r\n\t\treturn spawnPoint3;\r\n\t}\r\n"},{"Name":"OnEventTrigger","Parameters":"(TriggeredEventPrefab)","ClassName":"TriggeredEventPrefab","MethodCode":"\r\n\tpublic override void RunEvent()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEventTrigger\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDebug.Log(\"[event] \" + targetPrefab.resourcePath);\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(targetPrefab.resourcePath);\r\n\t\tif (!baseEntity)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbaseEntity.SendMessage(\"TriggeredEventSpawn\", SendMessageOptions.DontRequireReceiver);\r\n\t\tbaseEntity.Spawn();\r\n\t\tspawnedEntity = baseEntity;\r\n\t\tif (!shouldBroadcastSpawn)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (BasePlayer activePlayer in BasePlayer.activePlayerList)\r\n\t\t{\r\n\t\t\tif ((bool)activePlayer && activePlayer.IsConnected && !activePlayer.IsInTutorial)\r\n\t\t\t{\r\n\t\t\t\tactivePlayer.ShowToast(GameTip.Styles.Server_Event, spawnPhrase, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFuelConsume","Parameters":"(BaseOven,Item,ItemModBurnable)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic void ConsumeFuel(Item fuel, ItemModBurnable burnable)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnFuelConsume\", this, fuel, burnable) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (allowByproductCreation && burnable.byproductItem != null && UnityEngine.Random.Range(0f, 1f) > burnable.byproductChance)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(burnable.byproductItem, burnable.byproductAmount * GetCharcoalRate(), 0uL);\r\n\t\t\tif (!item.MoveToContainer(base.inventory))\r\n\t\t\t{\r\n\t\t\t\tOvenFull();\r\n\t\t\t\titem.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (fuel.amount <= GetFuelRate())\r\n\t\t{\r\n\t\t\tfuel.Remove();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint fuelRate = GetFuelRate();\r\n\t\tfuel.UseItem(fuelRate);\r\n\t\tFacepunch.Rust.Analytics.Azure.AddPendingItems(this, fuel.info.shortname, fuelRate, \"smelt\");\r\n\t\tfuel.fuel = burnable.fuelAmount;\r\n\t\tfuel.MarkDirty();\r\n\t\tInterface.CallHook(\"OnFuelConsumed\", this, fuel, burnable);\r\n\t}\r\n"},{"Name":"CanPickupEntity","Parameters":"(BasePlayer,BaseCombatEntity)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual bool CanPickup(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanPickupEntity\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (pickup.enabled && (!pickup.requireBuildingPrivilege || player.CanBuild()) && (!pickup.requireHammer || player.IsHoldingEntity<Hammer>()))\r\n\t\t{\r\n\t\t\tif (player != null)\r\n\t\t\t{\r\n\t\t\t\treturn !player.IsInTutorial;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnBuyVendingItem","Parameters":"(VendingMachine,BasePlayer,int,int)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void BuyItem(RPCMessage rpc)\r\n\t{\r\n\t\tif (OccupiedCheck(rpc.player))\r\n\t\t{\r\n\t\t\tint num = rpc.read.Int32();\r\n\t\t\tint num2 = rpc.read.Int32();\r\n\t\t\tif (IsVending())\r\n\t\t\t{\r\n\t\t\t\trpc.player.ShowToast(GameTip.Styles.Red_Normal, WaitForVendingMessage, false);\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnBuyVendingItem\", this, rpc.player, num, num2) == null)\r\n\t\t\t{\r\n\t\t\t\tSetPendingOrder(rpc.player, num, num2);\r\n\t\t\t\tInvoke(CompletePendingOrder, GetBuyDuration());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretAssign","Parameters":"(AutoTurret,ulong,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void AssignToFriend(RPCMessage msg)\r\n\t{\r\n\t\tif (AtMaxAuthCapacity() || msg.player == null || !msg.player.CanInteract() || !CanChangeSettings(msg.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tulong num = msg.read.UInt64();\r\n\t\tif (num != 0L && !IsAuthed(num) && Interface.CallHook(\"OnTurretAssign\", this, num, msg.player) == null)\r\n\t\t{\r\n\t\t\tstring username = BasePlayer.SanitizePlayerNameString(msg.read.String(), num);\r\n\t\t\tPlayerNameID playerNameID = new PlayerNameID();\r\n\t\t\tplayerNameID.userid = num;\r\n\t\t\tplayerNameID.username = username;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityAuthChanged(this, msg.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), \"added\", num);\r\n\t\t\tauthorizedPlayers.Add(playerNameID);\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tInterface.CallHook(\"OnTurretAssigned\", this, num, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanCastFishingRod","Parameters":"(BasePlayer,BaseFishingRod,Item,UnityEngine.Vector3)","ClassName":"BaseFishingRod","MethodCode":"\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server]\r\n\tprivate void Server_RequestCast(RPCMessage msg)\r\n\t{\r\n\t\tVector3 pos = msg.read.Vector3();\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tItem currentLure = GetCurrentLure();\r\n\t\tif (currentLure == null)\r\n\t\t{\r\n\t\t\tFailedCast(FailReason.NoLure);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!EvaluateFishingPosition(ref pos, ownerPlayer, out var reason, out surfaceBody))\r\n\t\t{\r\n\t\t\tFailedCast(reason);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModCompostable component = (ItemModCompostable)Interface.CallHook(\"CanCastFishingRod\", ownerPlayer, this, currentLure, pos);\r\n\t\tif (!(component is bool) || (bool)(object)component)\r\n\t\t{\r\n\t\t\tFishingBobber component2 = base.gameManager.CreateEntity(FishingBobberRef.resourcePath, base.transform.position + Vector3.up * 2.8f + ownerPlayer.eyes.BodyForward() * 1.8f, GetOwnerPlayer().ServerRotation).GetComponent<FishingBobber>();\r\n\t\t\tcomponent2.transform.forward = GetOwnerPlayer().eyes.BodyForward();\r\n\t\t\tcomponent2.Spawn();\r\n\t\t\tcomponent2.InitialiseBobber(ownerPlayer, surfaceBody, pos, 150f);\r\n\t\t\tint usedLureAmount = 0;\r\n\t\t\tif (FishLookup.Instance != null)\r\n\t\t\t{\r\n\t\t\t\tcurrentFishTarget = FishLookup.Instance.GetFish(component2.transform.position, surfaceBody, currentLure, out fishableModifier, lastFish, out usedLureAmount);\r\n\t\t\t}\r\n\t\t\tlureUsed = currentLure.info;\r\n\t\t\tcurrentLure.UseItem(usedLureAmount);\r\n\t\t\tlastFish = fishableModifier;\r\n\t\t\tcurrentBobber.Set(component2);\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ReceiveCastPoint\"), component2.net.ID);\r\n\t\t\townerPlayer.SignalBroadcast(Signal.Attack);\r\n\t\t\tcatchTime = (ImmediateHook ? 0f : UnityEngine.Random.Range(10f, 20f));\r\n\t\t\tcatchTime = (float)catchTime * fishableModifier.CatchWaitTimeMultiplier;\r\n\t\t\tfloat val = (lureUsed.TryGetComponent<ItemModCompostable>(out component) ? component.BaitValue : 0f);\r\n\t\t\tval = Mathx.RemapValClamped(val, 0f, 20f, 1f, 10f);\r\n\t\t\tcatchTime = Mathf.Clamp((float)catchTime - val, 3f, 20f);\r\n\t\t\tplayerStartPosition = ownerPlayer.transform.position;\r\n\t\t\tSetFlag(Flags.Busy, b: true);\r\n\t\t\tCurrentState = CatchState.Waiting;\r\n\t\t\tInvokeRepeating(CatchProcess, 0f, 0f);\r\n\t\t\tinQueue = false;\r\n\t\t\tInterface.CallHook(\"OnFishingRodCast\", this, ownerPlayer, currentLure);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFindBurnable","Parameters":"(BaseOven)","ClassName":"BaseOven","MethodCode":"\r\n\tpublic Item FindBurnable()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnFindBurnable\", this);\r\n\t\tif (obj is Item)\r\n\t\t{\r\n\t\t\treturn (Item)obj;\r\n\t\t}\r\n\t\tif (base.inventory == null)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tforeach (Item item in base.inventory.itemList)\r\n\t\t{\r\n\t\t\tif (IsBurnableItem(item))\r\n\t\t\t{\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnVehicleModuleDeselected","Parameters":"(ModularCarGarage,BasePlayer)","ClassName":"ModularCarGarage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void RPC_DeselectedLootItem(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (player.inventory.loot.IsLooting() && !(player.inventory.loot.entitySource != this))\r\n\t\t{\r\n\t\t\tif (player.inventory.loot.RemoveContainerAt(3))\r\n\t\t\t{\r\n\t\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnVehicleModuleDeselected\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMapMarkersCleared","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(1uL)]\r\n\tpublic void Server_ClearMapMarkers(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnMapMarkersClear\", this, State.pointsOfInterest) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tServerCurrentDeathNote?.Dispose();\r\n\t\tServerCurrentDeathNote = null;\r\n\t\tif (State.pointsOfInterest != null)\r\n\t\t{\r\n\t\t\tforeach (MapNote item in State.pointsOfInterest)\r\n\t\t\t{\r\n\t\t\t\titem?.Dispose();\r\n\t\t\t}\r\n\t\t\tState.pointsOfInterest.Clear();\r\n\t\t}\r\n\t\tDirtyPlayerState();\r\n\t\tTeamUpdate();\r\n\t\tInterface.CallHook(\"OnMapMarkersCleared\", this);\r\n\t}\r\n"},{"Name":"OnTurretClearList","Parameters":"(AutoTurret,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tprivate void ClearList(RPCMessage rpc)\r\n\t{\r\n\t\tif (!booting && !IsOnline() && IsAuthed(rpc.player) && Interface.CallHook(\"OnTurretClearList\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tauthorizedPlayers.Clear();\r\n\t\t\tauthDirty = true;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityAuthChanged(this, rpc.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), \"clear\", rpc.player.userID);\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamCreated","Parameters":"(BasePlayer,RelationshipManager.PlayerTeam)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void trycreateteam(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tif (maxTeamSize == 0)\r\n\t\t{\r\n\t\t\targ.ReplyWith(\"Teams are disabled on this server\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (basePlayer.currentTeam == 0L && Interface.CallHook(\"OnTeamCreate\", basePlayer) == null)\r\n\t\t{\r\n\t\t\tPlayerTeam playerTeam = ServerInstance.CreateTeam();\r\n\t\t\tPlayerTeam playerTeam2 = playerTeam;\r\n\t\t\tplayerTeam2.teamLeader = basePlayer.userID;\r\n\t\t\tplayerTeam2.AddPlayer(basePlayer);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnTeamChanged(\"created\", playerTeam2.teamID, basePlayer.userID, basePlayer.userID, playerTeam2.members);\r\n\t\t\tInterface.CallHook(\"OnTeamCreated\", basePlayer, playerTeam);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemCraft","Parameters":"(ItemCraftTask,BasePlayer,Item)","ClassName":"ItemCrafter","MethodCode":"\r\n\tpublic bool CraftItem(ItemBlueprint bp, BasePlayer owner, ProtoBuf.Item.InstanceData instanceData = null, int amount = 1, int skinID = 0, Item fromTempBlueprint = null, bool free = false)\r\n\t{\r\n\t\tif (owner != null && owner.IsTransferring())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!CanCraft(bp, amount, free))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttaskUID++;\r\n\t\tItemCraftTask itemCraftTask = Facepunch.Pool.Get<ItemCraftTask>();\r\n\t\titemCraftTask.blueprint = bp;\r\n\t\tif (!free)\r\n\t\t{\r\n\t\t\tCollectIngredients(bp, itemCraftTask, amount, owner);\r\n\t\t}\r\n\t\titemCraftTask.endTime = 0f;\r\n\t\titemCraftTask.taskUID = taskUID;\r\n\t\titemCraftTask.instanceData = instanceData;\r\n\t\tif (itemCraftTask.instanceData != null)\r\n\t\t{\r\n\t\t\titemCraftTask.instanceData.ShouldPool = false;\r\n\t\t}\r\n\t\titemCraftTask.amount = amount;\r\n\t\titemCraftTask.skinID = skinID;\r\n\t\tif (fromTempBlueprint != null && itemCraftTask.takenItems != null)\r\n\t\t{\r\n\t\t\tfromTempBlueprint.RemoveFromContainer();\r\n\t\t\titemCraftTask.takenItems.Add(fromTempBlueprint);\r\n\t\t\titemCraftTask.conditionScale = 0.5f;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnItemCraft\", itemCraftTask, owner, fromTempBlueprint);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\tif (fromTempBlueprint != null && itemCraftTask.instanceData != null)\r\n\t\t\t{\r\n\t\t\t\tfromTempBlueprint.instanceData = itemCraftTask.instanceData;\r\n\t\t\t}\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tqueue.AddLast(itemCraftTask);\r\n\t\tif (owner != null)\r\n\t\t{\r\n\t\t\towner.Command(\"note.craft_add\", itemCraftTask.taskUID, itemCraftTask.blueprint.targetItem.itemid, amount, itemCraftTask.skinID);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnTerrainInitialized","Parameters":"()","ClassName":"TerrainMeta","MethodCode":"\r\n\tpublic void PostSetupComponents()\r\n\t{\r\n\t\tTerrainExtension[] components = GetComponents<TerrainExtension>();\r\n\t\tfor (int i = 0; i < components.Length; i++)\r\n\t\t{\r\n\t\t\tcomponents[i].PostSetup();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnTerrainInitialized\");\r\n\t}\r\n"},{"Name":"CanPurchaseItem","Parameters":"(BasePlayer,Item,System.Action<BasePlayer, Item>,VendingMachine,ItemContainer)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic bool DoTransaction(BasePlayer buyer, int sellOrderId, int numberOfTransactions = 1, ItemContainer targetContainer = null, Action<BasePlayer, Item> onCurrencyRemoved = null, Action<BasePlayer, Item> onItemPurchased = null, MarketTerminal droneMarketTerminal = null)\r\n\t{\r\n\t\tif (sellOrderId < 0 || sellOrderId >= sellOrders.sellOrders.Count)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (targetContainer == null && Vector3.Distance(buyer.transform.position, base.transform.position) > 4f)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnVendingTransaction\", this, buyer, sellOrderId, numberOfTransactions, targetContainer);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tProtoBuf.VendingMachine.SellOrder sellOrder = sellOrders.sellOrders[sellOrderId];\r\n\t\tList<Item> obj2 = Facepunch.Pool.Get<List<Item>>();\r\n\t\tGetItemsToSell(sellOrder, obj2);\r\n\t\tif (obj2 == null || obj2.Count == 0)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tnumberOfTransactions = Mathf.Clamp(numberOfTransactions, 1, obj2[0].hasCondition ? 1 : 1000000);\r\n\t\tint num = sellOrder.itemToSellAmount * numberOfTransactions;\r\n\t\tint num2 = obj2.Sum((Item x) => x.amount);\r\n\t\tif (num > num2)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tList<Item> source = buyer.inventory.FindItemsByItemID(sellOrder.currencyID);\r\n\t\tif (sellOrder.currencyIsBP)\r\n\t\t{\r\n\t\t\tsource = (from x in buyer.inventory.FindItemsByItemID(blueprintBaseDef.itemid)\r\n\t\t\t\twhere x.blueprintTarget == sellOrder.currencyID\r\n\t\t\t\tselect x).ToList();\r\n\t\t}\r\n\t\tsource = (from x in source\r\n\t\t\twhere !x.hasCondition || (x.conditionNormalized >= 0.5f && x.maxConditionNormalized > 0.5f)\r\n\t\t\twhere x.GetItemVolume() <= maxCurrencyVolume\r\n\t\t\tselect x).ToList();\r\n\t\tif (source.Count == 0)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tint num3 = source.Sum((Item x) => x.amount);\r\n\t\tint num4 = GetTotalPriceForOrder(sellOrder) * numberOfTransactions;\r\n\t\tif (num3 < num4)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttransactionActive = true;\r\n\t\tint num5 = 0;\r\n\t\tforeach (Item item3 in source)\r\n\t\t{\r\n\t\t\tint num6 = Mathf.Min(num4 - num5, item3.amount);\r\n\t\t\tItem item = ((item3.amount > num6) ? item3.SplitItem(num6) : item3);\r\n\t\t\tTakeCurrencyItem(item);\r\n\t\t\tonCurrencyRemoved?.Invoke(buyer, item);\r\n\t\t\tnum5 += num6;\r\n\t\t\tif (num5 >= num4)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Rust.Analytics.Azure.OnBuyFromVendingMachine(buyer, this, sellOrder.itemToSellID, sellOrder.itemToSellAmount * numberOfTransactions, sellOrder.itemToSellIsBP, sellOrder.currencyID, num4, sellOrder.currencyIsBP, numberOfTransactions, sellOrder.priceMultiplier, droneMarketTerminal);\r\n\t\tint num7 = 0;\r\n\t\tforeach (Item item4 in obj2)\r\n\t\t{\r\n\t\t\tint num8 = num - num7;\r\n\t\t\tItem item2 = ((item4.amount > num8) ? item4.SplitItem(num8) : item4);\r\n\t\t\tif (item2 == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogError(\"Vending machine error, contact developers!\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnum7 += item2.amount;\r\n\t\t\t\tobject obj3 = Interface.CallHook(\"CanPurchaseItem\", buyer, item2, onItemPurchased, this, targetContainer);\r\n\t\t\t\tif (obj3 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!(obj3 is bool))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (bool)obj3;\r\n\t\t\t\t}\r\n\t\t\t\tRecordSaleAnalytics(item2, sellOrderId);\r\n\t\t\t\tif (targetContainer == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tGiveSoldItem(item2, buyer);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!item2.MoveToContainer(targetContainer))\r\n\t\t\t\t{\r\n\t\t\t\t\titem2.Drop(targetContainer.dropPosition, targetContainer.dropVelocity);\r\n\t\t\t\t}\r\n\t\t\t\tonItemPurchased?.Invoke(buyer, item2);\r\n\t\t\t}\r\n\t\t\tif (num7 >= num)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\tUpdateEmptyFlag();\r\n\t\ttransactionActive = false;\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanDismountEntity","Parameters":"(BasePlayer,BaseMountable)","ClassName":"BaseMountable","MethodCode":"\r\n\tpublic void DismountPlayer(BasePlayer player, bool lite = false)\r\n\t{\r\n\t\tif (_mounted == null || _mounted != player || Interface.CallHook(\"CanDismountEntity\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseVehicle baseVehicle = VehicleParent();\r\n\t\tVector3 res;\r\n\t\tif (lite)\r\n\t\t{\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t\t}\r\n\t\t\t_mounted.DismountObject();\r\n\t\t\t_mounted = null;\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t\t}\r\n\t\t\tOnPlayerDismounted(player);\r\n\t\t\tInterface.CallHook(\"OnEntityDismounted\", this, player);\r\n\t\t}\r\n\t\telse if (!GetDismountPosition(player, out res) || Distance(res) > 10f)\r\n\t\t{\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t\t}\r\n\t\t\tres = player.transform.position;\r\n\t\t\t_mounted.DismountObject();\r\n\t\t\t_mounted.MovePosition(res);\r\n\t\t\t_mounted.transform.rotation = Quaternion.identity;\r\n\t\t\t_mounted.ClientRPC(RpcTarget.Player(\"ForcePositionTo\", _mounted), res);\r\n\t\t\tBasePlayer mounted = _mounted;\r\n\t\t\t_mounted = null;\r\n\t\t\tDebug.LogWarning(\"Killing player due to invalid dismount point :\" + player.displayName + \" / \" + player.userID.Get() + \" on obj : \" + base.gameObject.name);\r\n\t\t\tmounted.Hurt(1000f, DamageType.Suicide, mounted, useProtection: false);\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t\t}\r\n\t\t\tOnPlayerDismounted(player);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t\t}\r\n\t\t\t_mounted.DismountObject();\r\n\t\t\t_mounted.transform.rotation = Quaternion.LookRotation(Vector3.forward, Vector3.up);\r\n\t\t\t_mounted.MovePosition(res);\r\n\t\t\t_mounted.SendNetworkUpdateImmediate();\r\n\t\t\t_mounted.SendModelState(force: true);\r\n\t\t\t_mounted = null;\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t\t}\r\n\t\t\tplayer.ForceUpdateTriggers();\r\n\t\t\tif ((bool)player.GetParentEntity())\r\n\t\t\t{\r\n\t\t\t\tBaseEntity baseEntity = player.GetParentEntity();\r\n\t\t\t\tplayer.ClientRPC(RpcTarget.Player(\"ForcePositionToParentOffset\", player), baseEntity.transform.InverseTransformPoint(res), baseEntity.net.ID);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tplayer.ClientRPC(RpcTarget.Player(\"ForcePositionTo\", player), res);\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnDismountEntity(player, this, baseVehicle);\r\n\t\t\tOnPlayerDismounted(player);\r\n\t\t\tInterface.CallHook(\"OnEntityDismounted\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSprinklerSplashed","Parameters":"(Sprinkler)","ClassName":"Sprinkler","MethodCode":"\r\n\tprivate void DoSplash()\r\n\t{\r\n\t\tusing (TimeWarning.New(\"SprinklerSplash\"))\r\n\t\t{\r\n\t\t\tint num = WaterPerSplash;\r\n\t\t\tif ((float)updateSplashableCache > SplashFrequency * 4f || forceUpdateSplashables)\r\n\t\t\t{\r\n\t\t\t\tcachedSplashables.Clear();\r\n\t\t\t\tforceUpdateSplashables = false;\r\n\t\t\t\tupdateSplashableCache = 0f;\r\n\t\t\t\tVector3 position = Eyes.position;\r\n\t\t\t\tVector3 up = base.transform.up;\r\n\t\t\t\tfloat sprinklerEyeHeightOffset = Server.sprinklerEyeHeightOffset;\r\n\t\t\t\tfloat value = Vector3.Angle(up, Vector3.up) / 180f;\r\n\t\t\t\tvalue = Mathf.Clamp(value, 0.2f, 1f);\r\n\t\t\t\tsprinklerEyeHeightOffset *= value;\r\n\t\t\t\tVector3 startPosition = position + up * (Server.sprinklerRadius * 0.5f);\r\n\t\t\t\tVector3 endPosition = position + up * sprinklerEyeHeightOffset;\r\n\t\t\t\tList<BaseEntity> obj = Facepunch.Pool.Get<List<BaseEntity>>();\r\n\t\t\t\tVis.Entities(startPosition, endPosition, Server.sprinklerRadius, obj, 1237003025);\r\n\t\t\t\tif (obj.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (BaseEntity item in obj)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!item.isClient && item is ISplashable splashable && !cachedSplashables.Contains(splashable) && splashable.WantsSplash(currentFuelType, num) && item.IsVisible(position) && (!(item is IOEntity entity) || !IsConnectedTo(entity, IOEntity.backtracking)) && (!(item is BasePlayer) || !(currentFuelType.baseRadioactivity > 0f)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcachedSplashables.Add(splashable);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t\t}\r\n\t\t\tif (cachedSplashables.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tint num2 = num / cachedSplashables.Count;\r\n\t\t\t\tfloat num3 = (float)(num % cachedSplashables.Count) / (float)cachedSplashables.Count;\r\n\t\t\t\tforeach (ISplashable cachedSplashable in cachedSplashables)\r\n\t\t\t\t{\r\n\t\t\t\t\tint amount = num2 + ((UnityEngine.Random.value < num3) ? 1 : 0);\r\n\t\t\t\t\tif (!ObjectEx.IsUnityNull(cachedSplashable) && cachedSplashable.WantsSplash(currentFuelType, amount))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint num4 = cachedSplashable.DoSplash(currentFuelType, amount);\r\n\t\t\t\t\t\tnum -= num4;\r\n\t\t\t\t\t\tif (num <= 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (DecayPerSplash > 0f)\r\n\t\t\t{\r\n\t\t\t\tHurt(DecayPerSplash);\r\n\t\t\t}\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnSprinklerSplashed\", this);\r\n\t}\r\n"},{"Name":"OnBradleyApcInitialize","Parameters":"(BradleyAPC)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic void Initialize()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnBradleyApcInitialize\", this) == null)\r\n\t\t{\r\n\t\t\tmyRigidBody.centerOfMass = centerOfMass.localPosition;\r\n\t\t\tdestination = base.transform.position;\r\n\t\t\tfinalDestination = base.transform.position;\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanDeployItem","Parameters":"(BasePlayer,Deployer,NetworkableId)","ClassName":"Deployer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\tprivate void DoDeploy(RPCMessage msg)\r\n\t{\r\n\t\tif (!msg.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDeployable deployable = GetDeployable();\r\n\t\tif (deployable == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRay ray = msg.read.Ray();\r\n\t\tNetworkableId networkableId = msg.read.EntityID();\r\n\t\tif (Interface.CallHook(\"CanDeployItem\", msg.player, this, networkableId) == null)\r\n\t\t{\r\n\t\t\tif (deployable.toSlot)\r\n\t\t\t{\r\n\t\t\t\tDoDeploy_Slot(deployable, ray, networkableId);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tDoDeploy_Regular(deployable, ray);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMapMarkerAdd","Parameters":"(BasePlayer,ProtoBuf.MapNote)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server.CallsPerSecond(8uL)]\r\n\tpublic void Server_AddMarker(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnMapMarkerAdd\", this, MapNote.Deserialize(msg.read)) == null)\r\n\t\t{\r\n\t\t\tmsg.read.Position = 13L;\r\n\t\t\tif (State.pointsOfInterest == null)\r\n\t\t\t{\r\n\t\t\t\tState.pointsOfInterest = Facepunch.Pool.Get<List<MapNote>>();\r\n\t\t\t}\r\n\t\t\tif (State.pointsOfInterest.Count >= ConVar.Server.maximumMapMarkers)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Blue_Short, MarkerLimitPhrase, false, ConVar.Server.maximumMapMarkers.ToString());\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tMapNote mapNote = MapNote.Deserialize(msg.read);\r\n\t\t\tValidateMapNote(mapNote);\r\n\t\t\tmapNote.colourIndex = FindUnusedPointOfInterestColour();\r\n\t\t\tState.pointsOfInterest.Add(mapNote);\r\n\t\t\tDirtyPlayerState();\r\n\t\t\tSendMarkersToClient();\r\n\t\t\tTeamUpdate();\r\n\t\t\tInterface.CallHook(\"OnMapMarkerAdded\", this, mapNote);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanMountEntity","Parameters":"(BasePlayer,BaseMountable)","ClassName":"BaseMountable","MethodCode":"\r\n\tpublic void MountPlayer(BasePlayer player)\r\n\t{\r\n\t\tif (!(_mounted != null) && !(mountAnchor == null) && Interface.CallHook(\"CanMountEntity\", player, this) == null)\r\n\t\t{\r\n\t\t\tplayer.EnsureDismounted();\r\n\t\t\t_mounted = player;\r\n\t\t\tTransform transform = mountAnchor;\r\n\t\t\tplayer.SetMounted(this);\r\n\t\t\tplayer.MovePosition(transform.position);\r\n\t\t\tplayer.transform.rotation = transform.rotation;\r\n\t\t\tplayer.ServerRotation = transform.rotation;\r\n\t\t\tplayer.OverrideViewAngles(transform.rotation.eulerAngles);\r\n\t\t\t_mounted.eyes.NetworkUpdate(transform.rotation);\r\n\t\t\tplayer.SendNetworkUpdateImmediate();\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnMountEntity(player, this, VehicleParent());\r\n\t\t\tOnPlayerMounted();\r\n\t\t\tInterface.CallHook(\"OnEntityMounted\", this, player);\r\n\t\t\tif (this.IsValid() && player.IsValid())\r\n\t\t\t{\r\n\t\t\t\tplayer.ProcessMissionEvent(BaseMission.MissionEventType.MOUNT_ENTITY, net.ID, 1f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWaterCollect","Parameters":"(WaterPump,ItemDefinition)","ClassName":"WaterPump","MethodCode":"\r\n\tpublic void CreateWater()\r\n\t{\r\n\t\tif (!IsFull())\r\n\t\t{\r\n\t\t\tItemDefinition itemDefinition = WaterResource.SV_GetAtPoint(WaterResourceLocation.position);\r\n\t\t\tif (itemDefinition != null && Interface.CallHook(\"OnWaterCollect\", this, itemDefinition) == null)\r\n\t\t\t{\r\n\t\t\t\tbase.inventory.AddItem(itemDefinition, AmountPerPump, 0uL);\r\n\t\t\t\tUpdateOnFlag();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEngineStarted","Parameters":"(MotorRowboat,BasePlayer)","ClassName":"MotorRowboat","MethodCode":"\r\n\tpublic void EngineToggle(bool wantsOn)\r\n\t{\r\n\t\tif (!fuelSystem.HasFuel(forceCheck: true))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer driver = GetDriver();\r\n\t\tif (!wantsOn || Interface.CallHook(\"OnEngineStart\", this, driver) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.On, wantsOn);\r\n\t\t\tif (wantsOn)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnEngineStarted\", this, driver);\r\n\t\t\t}\r\n\t\t\tif (wantsOn)\r\n\t\t\t{\r\n\t\t\t\trigidBody.WakeUp();\r\n\t\t\t\tbuoyancy.Wake();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanWaterBallSplash","Parameters":"(ItemDefinition,UnityEngine.Vector3,float,int)","ClassName":"WaterBall","MethodCode":"\r\n\tpublic static bool DoSplash(Vector3 position, float radius, ItemDefinition liquidDef, int amount)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanWaterBallSplash\", liquidDef, position, radius, amount);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tList<BaseEntity> obj2 = Pool.Get<List<BaseEntity>>();\r\n\t\tVis.Entities(position, radius, obj2, 1220225811);\r\n\t\tint num = 0;\r\n\t\tint num2 = amount;\r\n\t\twhile (amount > 0 && num < 3)\r\n\t\t{\r\n\t\t\tList<ISplashable> obj3 = Pool.Get<List<ISplashable>>();\r\n\t\t\tforeach (BaseEntity item in obj2)\r\n\t\t\t{\r\n\t\t\t\tif (!item.isClient && item is ISplashable splashable && !obj3.Contains(splashable) && splashable.WantsSplash(liquidDef, amount))\r\n\t\t\t\t{\r\n\t\t\t\t\tbool flag = true;\r\n\t\t\t\t\tif (item is PlanterBox && !GamePhysics.LineOfSight(item.transform.position + new Vector3(0f, 1f, 0f), position, 2097152))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flag)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tobj3.Add(splashable);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (obj3.Count == 0)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tint b = Mathf.CeilToInt(amount / obj3.Count);\r\n\t\t\tforeach (ISplashable item2 in obj3)\r\n\t\t\t{\r\n\t\t\t\tint num3 = item2.DoSplash(liquidDef, Mathf.Min(amount, b));\r\n\t\t\t\tamount -= num3;\r\n\t\t\t\tif (amount <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPool.FreeUnmanaged(ref obj3);\r\n\t\t\tnum++;\r\n\t\t}\r\n\t\tPool.FreeUnmanaged(ref obj2);\r\n\t\treturn amount < num2;\r\n\t}\r\n"},{"Name":"OnNpcGiveSoldItem","Parameters":"(NPCVendingMachine,Item,BasePlayer)","ClassName":"NPCVendingMachine","MethodCode":"\r\n\tpublic override void GiveSoldItem(Item soldItem, BasePlayer buyer)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnNpcGiveSoldItem\", this, soldItem, buyer) == null)\r\n\t\t{\r\n\t\t\tbase.GiveSoldItem(soldItem, buyer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemLock","Parameters":"(Item)","ClassName":"Item","MethodCode":"\r\n\tpublic void LockUnlock(bool bNewState)\r\n\t{\r\n\t\tif (HasFlag(Flag.IsLocked) != bNewState && (!bNewState || Interface.CallHook(\"OnItemLock\", this) == null) && (bNewState || Interface.CallHook(\"OnItemUnlock\", this) == null))\r\n\t\t{\r\n\t\t\tSetFlag(Flag.IsLocked, bNewState);\r\n\t\t\tMarkDirty();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamRejectInvite","Parameters":"(BasePlayer,RelationshipManager.PlayerTeam)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void rejectinvite(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (!(basePlayer == null) && basePlayer.currentTeam == 0L)\r\n\t\t{\r\n\t\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(uLong);\r\n\t\t\tif (playerTeam == null)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.ClearPendingInvite();\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnTeamRejectInvite\", basePlayer, playerTeam) == null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam.RejectInvite(basePlayer);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLiquidWeaponFiringStopped","Parameters":"(LiquidWeapon)","ClassName":"LiquidWeapon","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\tprivate void StopFiring()\r\n\t{\r\n\t\tCancelInvoke(FireTick);\r\n\t\tif (!RequiresPumping)\r\n\t\t{\r\n\t\t\tpressure = MaxPressure;\r\n\t\t}\r\n\t\tSetFlag(Flags.On, b: false);\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnLiquidWeaponFiringStopped\", this);\r\n\t}\r\n"},{"Name":"OnFireworkStarted","Parameters":"(BaseFirework)","ClassName":"BaseFirework","MethodCode":"\r\n\tpublic virtual void Begin()\r\n\t{\r\n\t\tSetFlag(Flags.OnFire, b: false);\r\n\t\tSetFlag(Flags.On, b: true, recursive: false, networkupdate: false);\r\n\t\tSendNetworkUpdate_Flags();\r\n\t\tInterface.CallHook(\"OnFireworkStarted\", this);\r\n\t\tInvoke(OnExhausted, activityLength);\r\n\t}\r\n"},{"Name":"OnWildlifeTrap","Parameters":"(SurvivalFishTrap,ItemDefinition)","ClassName":"SurvivalFishTrap","MethodCode":"\r\n\tpublic override void TrapThink()\r\n\t{\r\n\t\tItemDefinition itemDefinition = null;\r\n\t\tItem item = null;\r\n\t\tint usedLureAmount = 0;\r\n\t\tusing (List<Item>.Enumerator enumerator = base.inventory.itemList.GetEnumerator())\r\n\t\t{\r\n\t\t\tif (enumerator.MoveNext())\r\n\t\t\t{\r\n\t\t\t\tItem current = enumerator.Current;\r\n\t\t\t\tif ((current.info.TryGetComponent<ItemModCompostable>(out var component) ? component.BaitValue : 0f) > 0f)\r\n\t\t\t\t{\r\n\t\t\t\t\titem = current;\r\n\t\t\t\t\titemDefinition = FishLookup.Instance.GetFish(base.transform.position, cachedWaterBody, current, out var _, current.info.GetComponent<ItemModFishable>(), out usedLureAmount, 5f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\titem?.UseItem(usedLureAmount);\r\n\t\tif (UnityEngine.Random.Range(0f, 1f) <= trapSuccessRate || !(itemDefinition != null))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tbypassItemFilter = true;\r\n\t\t\tif (Interface.CallHook(\"OnWildlifeTrap\", this, itemDefinition) == null)\r\n\t\t\t{\r\n\t\t\t\tItem item2 = ItemManager.Create(itemDefinition, 1, 0uL);\r\n\t\t\t\tif (!item2.MoveToContainer(base.inventory))\r\n\t\t\t\t{\r\n\t\t\t\t\titem2.Drop(base.transform.position, Vector3.zero, Quaternion.identity);\r\n\t\t\t\t}\r\n\t\t\t\tOnTrappedWildlife(setFlag: true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tbypassItemFilter = false;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMissionSucceeded","Parameters":"(BaseMission,BaseMission.MissionInstance,BasePlayer)","ClassName":"BaseMission","MethodCode":"\r\n\tpublic virtual void MissionSuccess(MissionInstance instance, BasePlayer assignee)\r\n\t{\r\n\t\tinstance.status = MissionStatus.Accomplished;\r\n\t\tMissionEnded(instance, assignee);\r\n\t\tMissionComplete(instance, assignee);\r\n\t\tInterface.CallHook(\"OnMissionSucceeded\", this, instance, assignee);\r\n\t}\r\n"},{"Name":"OnVehicleModuleMove","Parameters":"(BaseVehicleModule,BaseModularVehicle,BasePlayer)","ClassName":"BaseModularVehicle","MethodCode":"\r\n\tpublic bool CanMoveFrom(BasePlayer player, Item item)\r\n\t{\r\n\t\tBaseVehicleModule moduleForItem = GetModuleForItem(item);\r\n\t\tif (moduleForItem != null)\r\n\t\t{\r\n\t\t\tobject obj = Interface.CallHook(\"OnVehicleModuleMove\", moduleForItem, this, player);\r\n\t\t\tif (obj != null)\r\n\t\t\t{\r\n\t\t\t\tif (!(obj is bool))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn (bool)obj;\r\n\t\t\t}\r\n\t\t\treturn moduleForItem.CanBeMovedNow();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanNetworkTo","Parameters":"(BasePlayer,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override bool ShouldNetworkTo(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanNetworkTo\", this, player);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player == this)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (IsSpectating() && player != this)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tbool flag = base.ShouldNetworkTo(player);\r\n\t\tif (ServerOcclusion.OcclusionEnabled && flag)\r\n\t\t{\r\n\t\t\tflag = OcclusionLineOfSight(player);\r\n\t\t}\r\n\t\treturn flag;\r\n\t}\r\n"},{"Name":"OnTerrainCreate","Parameters":"(TerrainGenerator)","ClassName":"TerrainGenerator","MethodCode":"\r\n\tpublic GameObject CreateTerrain(int heightmapResolution, int alphamapResolution)\r\n\t{\r\n\t\tInterface.CallHook(\"OnTerrainCreate\", this);\r\n\t\tTerrain component = Terrain.CreateTerrainGameObject(new TerrainData\r\n\t\t{\r\n\t\t\tbaseMapResolution = GetBaseMapRes(),\r\n\t\t\theightmapResolution = heightmapResolution,\r\n\t\t\talphamapResolution = alphamapResolution,\r\n\t\t\tsize = new Vector3(World.Size, 1000f, World.Size)\r\n\t\t}).GetComponent<Terrain>();\r\n\t\tcomponent.transform.position = base.transform.position + new Vector3((float)(0L - (long)World.Size) * 0.5f, 0f, (float)(0L - (long)World.Size) * 0.5f);\r\n\t\tcomponent.drawInstanced = false;\r\n\t\tcomponent.castShadows = config.CastShadows;\r\n\t\tcomponent.materialType = Terrain.MaterialType.Custom;\r\n\t\tcomponent.materialTemplate = config.Material;\r\n\t\tcomponent.gameObject.tag = base.gameObject.tag;\r\n\t\tcomponent.gameObject.layer = base.gameObject.layer;\r\n\t\tcomponent.gameObject.GetComponent<TerrainCollider>().sharedMaterial = config.GenericMaterial;\r\n\t\tTerrainMeta terrainMeta = component.gameObject.AddComponent<TerrainMeta>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainPhysics>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainColors>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainCollision>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainBiomeMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainAlphaMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainHeightMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainSplatMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainTopologyMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainWaterMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainPlacementMap>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainPath>();\r\n\t\tcomponent.gameObject.AddComponent<TerrainTexturing>();\r\n\t\tterrainMeta.terrain = component;\r\n\t\tterrainMeta.config = config;\r\n\t\tObject.DestroyImmediate(base.gameObject);\r\n\t\treturn component.gameObject;\r\n\t}\r\n"},{"Name":"OnCupboardProtectionCalculated","Parameters":"(BuildingPrivlidge,float)","ClassName":"BuildingPrivlidge","MethodCode":"\r\n\tpublic float GetProtectedMinutes(bool force = false)\r\n\t{\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tif (!force && UnityEngine.Time.realtimeSinceStartup < nextProtectedCalcTime)\r\n\t\t\t{\r\n\t\t\t\treturn cachedProtectedMinutes;\r\n\t\t\t}\r\n\t\t\tnextProtectedCalcTime = UnityEngine.Time.realtimeSinceStartup + 60f;\r\n\t\t\tList<ItemAmount> obj = Facepunch.Pool.Get<List<ItemAmount>>();\r\n\t\t\tCalculateUpkeepCostAmounts(obj);\r\n\t\t\tfloat num = CalculateUpkeepPeriodMinutes();\r\n\t\t\tfloat num2 = -1f;\r\n\t\t\tif (base.inventory != null)\r\n\t\t\t{\r\n\t\t\t\tforeach (ItemAmount item in obj)\r\n\t\t\t\t{\r\n\t\t\t\t\tint num3 = base.inventory.FindItemsByItemID(item.itemid).Sum((Item x) => x.amount);\r\n\t\t\t\t\tif (num3 > 0 && item.amount > 0f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfloat num4 = (float)num3 / item.amount * num;\r\n\t\t\t\t\t\tif (num2 == -1f || num4 < num2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnum2 = num4;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum2 = 0f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (num2 == -1f)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum2 = 0f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t\tcachedProtectedMinutes = num2;\r\n\t\t\tInterface.CallHook(\"OnCupboardProtectionCalculated\", this, cachedProtectedMinutes);\r\n\t\t\treturn cachedProtectedMinutes;\r\n\t\t}\r\n\t\treturn 0f;\r\n\t}\r\n"},{"Name":"OnBonusItemDrop","Parameters":"(Item,BasePlayer)","ClassName":"LootContainer","MethodCode":"\r\n\tpublic override void DropBonusItems(BaseEntity initiator, ItemContainer container)\r\n\t{\r\n\t\tbase.DropBonusItems(initiator, container);\r\n\t\tif (initiator == null || container == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer basePlayer = initiator as BasePlayer;\r\n\t\tif (basePlayer == null || scrapAmount <= 0 || !(scrapDef != null))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = ((basePlayer.modifiers != null) ? (1f + basePlayer.modifiers.GetValue(Modifier.ModifierType.Scrap_Yield)) : 0f);\r\n\t\tif (!(num > 1f))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat variableValue = basePlayer.modifiers.GetVariableValue(Modifier.ModifierType.Scrap_Yield, 0f);\r\n\t\tfloat num2 = Mathf.Max((float)scrapAmount * num - (float)scrapAmount, 0f);\r\n\t\tvariableValue += num2;\r\n\t\tint num3 = 0;\r\n\t\tif (variableValue >= 1f)\r\n\t\t{\r\n\t\t\tnum3 = (int)variableValue;\r\n\t\t\tvariableValue -= (float)num3;\r\n\t\t}\r\n\t\tbasePlayer.modifiers.SetVariableValue(Modifier.ModifierType.Scrap_Yield, variableValue);\r\n\t\tif (num3 > 0)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(scrapDef, num3, 0uL);\r\n\t\t\tif (item != null && Interface.CallHook(\"OnBonusItemDrop\", item, basePlayer) == null)\r\n\t\t\t{\r\n\t\t\t\t(item.Drop(GetDropPosition() + new Vector3(0f, 0.5f, 0f), GetInheritedDropVelocity()) as DroppedItem).DropReason = DroppedItem.DropReasonEnum.Loot;\r\n\t\t\t\tInterface.CallHook(\"OnBonusItemDropped\", item, basePlayer);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFireBallDamage","Parameters":"(FireBall,BaseCombatEntity,HitInfo)","ClassName":"FireBall","MethodCode":"\r\n\tpublic void DoRadialDamage()\r\n\t{\r\n\t\tList<BaseCombatEntity> obj = Pool.Get<List<BaseCombatEntity>>();\r\n\t\tVector3 position = base.transform.position + new Vector3(0f, radius * 0.75f, 0f);\r\n\t\tVis.Entities(position, radius, obj, AttackLayers, QueryTriggerInteraction.Ignore);\r\n\t\tHitInfo hitInfo = new HitInfo();\r\n\t\thitInfo.DoHitEffects = true;\r\n\t\thitInfo.DidHit = true;\r\n\t\thitInfo.HitBone = 0u;\r\n\t\thitInfo.Initiator = ((creatorEntity == null) ? GameObjectEx.ToBaseEntity(base.gameObject) : creatorEntity);\r\n\t\thitInfo.PointStart = base.transform.position;\r\n\t\tforeach (BaseCombatEntity item in obj)\r\n\t\t{\r\n\t\t\tif (!(item == null) && item.isServer && item.IsAlive() && (!ignoreNPC || !item.IsNpc) && item.IsVisible(position))\r\n\t\t\t{\r\n\t\t\t\tif (item is BasePlayer)\r\n\t\t\t\t{\r\n\t\t\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/impacts/additive/fire.prefab\", item, 0u, new Vector3(0f, 1f, 0f), Vector3.up);\r\n\t\t\t\t}\r\n\t\t\t\thitInfo.PointEnd = item.transform.position;\r\n\t\t\t\thitInfo.HitPositionWorld = item.transform.position;\r\n\t\t\t\thitInfo.damageTypes.Set(DamageType.Heat, damagePerSecond * tickRate);\r\n\t\t\t\tInterface.CallHook(\"OnFireBallDamage\", this, item, hitInfo);\r\n\t\t\t\titem.OnAttacked(hitInfo);\r\n\t\t\t}\r\n\t\t}\r\n\t\tPool.FreeUnmanaged(ref obj);\r\n\t}\r\n"},{"Name":"OnPhoneNameUpdated","Parameters":"(PhoneController,string,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void UpdatePhoneName(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif (!(msg.player != currentPlayer))\r\n\t\t{\r\n\t\t\tstring text = msg.read.String();\r\n\t\t\tif (text.Length > 20)\r\n\t\t\t{\r\n\t\t\t\ttext = text.Substring(0, 20);\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnPhoneNameUpdate\", this, text, msg.player) == null)\r\n\t\t\t{\r\n\t\t\t\tPhoneName = text;\r\n\t\t\t\tbase.baseEntity.SendNetworkUpdate();\r\n\t\t\t\tInterface.CallHook(\"OnPhoneNameUpdated\", this, PhoneName, msg.player);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLiquidVesselFill","Parameters":"(BaseLiquidVessel,BasePlayer,LiquidContainer)","ClassName":"BaseLiquidVessel","MethodCode":"\r\n\tpublic void FillCheck()\r\n\t{\r\n\t\tif (base.isClient)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat f = (UnityEngine.Time.realtimeSinceStartup - lastFillTime) * fillMlPerSec;\r\n\t\tVector3 pos = ownerPlayer.transform.position - new Vector3(0f, 1f, 0f);\r\n\t\tLiquidContainer facingLiquidContainer = GetFacingLiquidContainer();\r\n\t\tif (Interface.CallHook(\"OnLiquidVesselFill\", this, ownerPlayer, facingLiquidContainer) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (facingLiquidContainer == null && CanFillFromWorld())\r\n\t\t{\r\n\t\t\tItem contents = GetContents();\r\n\t\t\tItemDefinition itemDefinition = WaterResource.SV_GetAtPoint(pos);\r\n\t\t\tif (contents != null && contents.info.itemid != itemDefinition.itemid)\r\n\t\t\t{\r\n\t\t\t\tif ((float)timeSinceLastToast > 5f)\r\n\t\t\t\t{\r\n\t\t\t\t\tDebug.Log(\"pushing toast\");\r\n\t\t\t\t\ttimeSinceLastToast = 0f;\r\n\t\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Red_Normal, DifferentLiquidType, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tAddLiquid(itemDefinition, Mathf.FloorToInt(f));\r\n\t\t}\r\n\t\telse if (facingLiquidContainer != null && facingLiquidContainer.HasLiquidItem())\r\n\t\t{\r\n\t\t\tint num = Mathf.CeilToInt((1f - HeldFraction()) * (float)MaxHoldable());\r\n\t\t\tif (num > 0)\r\n\t\t\t{\r\n\t\t\t\tGetContents();\r\n\t\t\t\tItem liquidItem = facingLiquidContainer.GetLiquidItem();\r\n\t\t\t\tint num2 = Mathf.Min(Mathf.CeilToInt(f), Mathf.Min(liquidItem.amount, num));\r\n\t\t\t\tAddLiquid(liquidItem.info, num2);\r\n\t\t\t\tliquidItem.UseItem(num2);\r\n\t\t\t\tfacingLiquidContainer.OpenTap(2f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlastFillTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t}\r\n"},{"Name":"OnTurretModeToggle","Parameters":"(AutoTurret,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tprivate void SERVER_Peacekeeper(RPCMessage rpc)\r\n\t{\r\n\t\tif (IsAuthed(rpc.player) && Interface.CallHook(\"OnTurretModeToggle\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tSetPeacekeepermode(isOn: true);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMeleeAttack","Parameters":"(BasePlayer,HitInfo)","ClassName":"BaseMelee","MethodCode":"\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server]\r\n\tpublic void PlayerAttack(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!VerifyClientAttack(player))\r\n\t\t{\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"PlayerAttack\", 50))\r\n\t\t{\r\n\t\t\tusing PlayerAttack playerAttack = ProtoBuf.PlayerAttack.Deserialize(msg.read);\r\n\t\t\tif (playerAttack == null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tHitInfo obj = Facepunch.Pool.Get<HitInfo>();\r\n\t\t\tobj.LoadFromAttack(playerAttack.attack, serverSide: true);\r\n\t\t\tobj.Initiator = player;\r\n\t\t\tobj.Weapon = this;\r\n\t\t\tobj.WeaponPrefab = this;\r\n\t\t\tobj.Predicted = msg.connection;\r\n\t\t\tobj.damageProperties = damageProperties;\r\n\t\t\tif (Interface.CallHook(\"OnMeleeAttack\", player, obj) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (obj.IsNaNOrInfinity())\r\n\t\t\t{\r\n\t\t\t\tstring shortPrefabName = base.ShortPrefabName;\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Contains NaN (\" + shortPrefabName + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_nan\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBaseEntity hitEntity = obj.HitEntity;\r\n\t\t\tBasePlayer basePlayer = obj.HitEntity as BasePlayer;\r\n\t\t\tbool flag = basePlayer != null;\r\n\t\t\tbool flag2 = flag && basePlayer.IsSleeping();\r\n\t\t\tbool flag3 = flag && basePlayer.IsWounded();\r\n\t\t\tbool flag4 = flag && basePlayer.isMounted;\r\n\t\t\tbool flag5 = flag && basePlayer.HasParent();\r\n\t\t\tbool flag6 = hitEntity != null;\r\n\t\t\tbool flag7 = flag6 && hitEntity.IsNpc;\r\n\t\t\tbool flag8;\r\n\t\t\tint num5;\r\n\t\t\tVector3 center;\r\n\t\t\tVector3 position;\r\n\t\t\tVector3 pointStart;\r\n\t\t\tVector3 hitPositionWorld;\r\n\t\t\tVector3 vector;\r\n\t\t\tint num16;\r\n\t\t\tif (ConVar.AntiHack.melee_protection > 0)\r\n\t\t\t{\r\n\t\t\t\tflag8 = true;\r\n\t\t\t\tfloat num = 1f + ConVar.AntiHack.melee_forgiveness;\r\n\t\t\t\tfloat melee_clientframes = ConVar.AntiHack.melee_clientframes;\r\n\t\t\t\tfloat melee_serverframes = ConVar.AntiHack.melee_serverframes;\r\n\t\t\t\tfloat num2 = melee_clientframes / 60f;\r\n\t\t\t\tfloat num3 = melee_serverframes * Mathx.Max(UnityEngine.Time.deltaTime, UnityEngine.Time.smoothDeltaTime, UnityEngine.Time.fixedDeltaTime);\r\n\t\t\t\tfloat num4 = (player.desyncTimeClamped + num2 + num3) * num;\r\n\t\t\t\tnum5 = 1075904512;\r\n\t\t\t\tif (ConVar.AntiHack.melee_terraincheck)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum5 |= 0x800000;\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.melee_vehiclecheck)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum5 |= 0x8000000;\r\n\t\t\t\t}\r\n\t\t\t\tif (flag && obj.boneArea == (HitArea)(-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tstring shortPrefabName2 = base.ShortPrefabName;\r\n\t\t\t\t\tstring shortPrefabName3 = basePlayer.ShortPrefabName;\r\n\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Bone is invalid  (\" + shortPrefabName2 + \" on \" + shortPrefabName3 + \" bone \" + obj.HitBone + \")\");\r\n\t\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_bone\");\r\n\t\t\t\t\tflag8 = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.melee_protection >= 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (flag6)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfloat num6 = hitEntity.MaxVelocity() + hitEntity.GetParentVelocity().magnitude;\r\n\t\t\t\t\t\tfloat num7 = hitEntity.BoundsPadding() + num4 * num6;\r\n\t\t\t\t\t\tfloat num8 = hitEntity.Distance(obj.HitPositionWorld);\r\n\t\t\t\t\t\tif (num8 > num7)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstring shortPrefabName4 = base.ShortPrefabName;\r\n\t\t\t\t\t\t\tstring shortPrefabName5 = hitEntity.ShortPrefabName;\r\n\t\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Entity too far away (\" + shortPrefabName4 + \" on \" + shortPrefabName5 + \" with \" + num8 + \"m > \" + num7 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_target\");\r\n\t\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ConVar.AntiHack.melee_protection >= 4 && flag8 && flag && !flag7 && !flag2 && !flag3 && !flag4 && !flag5)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfloat magnitude = basePlayer.GetParentVelocity().magnitude;\r\n\t\t\t\t\t\tfloat num9 = basePlayer.BoundsPadding() + num4 * magnitude + ConVar.AntiHack.tickhistoryforgiveness;\r\n\t\t\t\t\t\tfloat num10 = basePlayer.tickHistory.Distance(basePlayer, obj.HitPositionWorld);\r\n\t\t\t\t\t\tif (num10 > num9)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstring shortPrefabName6 = base.ShortPrefabName;\r\n\t\t\t\t\t\t\tstring shortPrefabName7 = basePlayer.ShortPrefabName;\r\n\t\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Player too far away (\" + shortPrefabName6 + \" on \" + shortPrefabName7 + \" with \" + num10 + \"m > \" + num9 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"player_distance\");\r\n\t\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.melee_protection >= 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (ConVar.AntiHack.melee_protection >= 4)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfloat magnitude2 = player.GetParentVelocity().magnitude;\r\n\t\t\t\t\t\tfloat num11 = player.BoundsPadding() + num4 * magnitude2 + num * maxDistance;\r\n\t\t\t\t\t\tfloat num12 = player.tickHistory.Distance(player, obj.HitPositionWorld);\r\n\t\t\t\t\t\tif (num12 > num11)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstring shortPrefabName8 = base.ShortPrefabName;\r\n\t\t\t\t\t\t\tstring text = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Initiator too far away (\" + shortPrefabName8 + \" on \" + text + \" with \" + num12 + \"m > \" + num11 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_initiator\");\r\n\t\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfloat num13 = player.MaxVelocity() + player.GetParentVelocity().magnitude;\r\n\t\t\t\t\t\tfloat num14 = player.BoundsPadding() + num4 * num13 + num * maxDistance;\r\n\t\t\t\t\t\tfloat num15 = player.Distance(obj.HitPositionWorld);\r\n\t\t\t\t\t\tif (num15 > num14)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstring shortPrefabName9 = base.ShortPrefabName;\r\n\t\t\t\t\t\t\tstring text2 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Initiator too far away (\" + shortPrefabName9 + \" on \" + text2 + \" with \" + num15 + \"m > \" + num14 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_initiator\");\r\n\t\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.melee_protection >= 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (flag6)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcenter = player.eyes.center;\r\n\t\t\t\t\t\tposition = player.eyes.position;\r\n\t\t\t\t\t\tpointStart = obj.PointStart;\r\n\t\t\t\t\t\thitPositionWorld = obj.HitPositionWorld;\r\n\t\t\t\t\t\thitPositionWorld -= (hitPositionWorld - pointStart).normalized * 0.001f;\r\n\t\t\t\t\t\tvector = obj.PositionOnRay(hitPositionWorld);\r\n\t\t\t\t\t\tVector3 vector2 = Vector3.zero;\r\n\t\t\t\t\t\tVector3 vector3 = Vector3.zero;\r\n\t\t\t\t\t\tVector3 vector4 = Vector3.zero;\r\n\t\t\t\t\t\tif (ConVar.AntiHack.melee_backtracking > 0f)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvector2 = (position - center).normalized * ConVar.AntiHack.melee_backtracking;\r\n\t\t\t\t\t\t\tvector3 = (pointStart - position).normalized * ConVar.AntiHack.melee_backtracking;\r\n\t\t\t\t\t\t\tvector4 = (vector - pointStart).normalized * ConVar.AntiHack.melee_backtracking;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (GamePhysics.LineOfSight(center - vector2, position + vector2, num5) && GamePhysics.LineOfSight(position - vector3, pointStart + vector3, num5) && GamePhysics.LineOfSight(pointStart - vector4, vector, num5) && GamePhysics.LineOfSight(vector, hitPositionWorld, num5))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnum16 = (GamePhysics.LineOfSight(position, hitPositionWorld, num5) ? 1 : 0);\r\n\t\t\t\t\t\t\tif (num16 != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tplayer.stats.Add(\"hit_\" + hitEntity.Categorize() + \"_direct_los\", 1, Stats.Server);\r\n\t\t\t\t\t\t\t\tgoto IL_07d5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnum16 = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tplayer.stats.Add(\"hit_\" + hitEntity.Categorize() + \"_indirect_los\", 1, Stats.Server);\r\n\t\t\t\t\t\tgoto IL_07d5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgoto IL_08c3;\r\n\t\t\t\t}\r\n\t\t\t\tgoto IL_0a2a;\r\n\t\t\t}\r\n\t\t\tgoto IL_0a3c;\r\n\t\t\tIL_08c3:\r\n\t\t\tif (flag8 && flag && !flag7)\r\n\t\t\t{\r\n\t\t\t\tVector3 hitPositionWorld2 = obj.HitPositionWorld;\r\n\t\t\t\tVector3 position2 = basePlayer.eyes.position;\r\n\t\t\t\tVector3 vector5 = basePlayer.CenterPoint();\r\n\t\t\t\tfloat melee_losforgiveness = ConVar.AntiHack.melee_losforgiveness;\r\n\t\t\t\tbool flag9 = GamePhysics.LineOfSight(hitPositionWorld2, position2, num5, 0f, melee_losforgiveness) && GamePhysics.LineOfSight(position2, hitPositionWorld2, num5, melee_losforgiveness, 0f);\r\n\t\t\t\tif (!flag9)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag9 = GamePhysics.LineOfSight(hitPositionWorld2, vector5, num5, 0f, melee_losforgiveness) && GamePhysics.LineOfSight(vector5, hitPositionWorld2, num5, melee_losforgiveness, 0f);\r\n\t\t\t\t}\r\n\t\t\t\tif (!flag9)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring shortPrefabName10 = base.ShortPrefabName;\r\n\t\t\t\t\tstring shortPrefabName11 = basePlayer.ShortPrefabName;\r\n\t\t\t\t\tstring[] obj2 = new string[12]\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"Line of sight (\", shortPrefabName10, \" on \", shortPrefabName11, \") \", null, null, null, null, null,\r\n\t\t\t\t\t\tnull, null\r\n\t\t\t\t\t};\r\n\t\t\t\t\tVector3 vector6 = hitPositionWorld2;\r\n\t\t\t\t\tobj2[5] = vector6.ToString();\r\n\t\t\t\t\tobj2[6] = \" \";\r\n\t\t\t\t\tvector6 = position2;\r\n\t\t\t\t\tobj2[7] = vector6.ToString();\r\n\t\t\t\t\tobj2[8] = \" or \";\r\n\t\t\t\t\tvector6 = hitPositionWorld2;\r\n\t\t\t\t\tobj2[9] = vector6.ToString();\r\n\t\t\t\t\tobj2[10] = \" \";\r\n\t\t\t\t\tvector6 = vector5;\r\n\t\t\t\t\tobj2[11] = vector6.ToString();\r\n\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, string.Concat(obj2));\r\n\t\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_los\");\r\n\t\t\t\t\tflag8 = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgoto IL_0a2a;\r\n\t\t\tIL_0a2a:\r\n\t\t\tif (!flag8)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.AddViolation(player, AntiHackType.MeleeHack, ConVar.AntiHack.melee_penalty);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tgoto IL_0a3c;\r\n\t\t\tIL_07d5:\r\n\t\t\tif (num16 == 0)\r\n\t\t\t{\r\n\t\t\t\tstring shortPrefabName12 = base.ShortPrefabName;\r\n\t\t\t\tstring shortPrefabName13 = hitEntity.ShortPrefabName;\r\n\t\t\t\tstring[] obj3 = new string[14]\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Line of sight (\", shortPrefabName12, \" on \", shortPrefabName13, \") \", null, null, null, null, null,\r\n\t\t\t\t\tnull, null, null, null\r\n\t\t\t\t};\r\n\t\t\t\tVector3 vector6 = center;\r\n\t\t\t\tobj3[5] = vector6.ToString();\r\n\t\t\t\tobj3[6] = \" \";\r\n\t\t\t\tvector6 = position;\r\n\t\t\t\tobj3[7] = vector6.ToString();\r\n\t\t\t\tobj3[8] = \" \";\r\n\t\t\t\tvector6 = pointStart;\r\n\t\t\t\tobj3[9] = vector6.ToString();\r\n\t\t\t\tobj3[10] = \" \";\r\n\t\t\t\tvector6 = vector;\r\n\t\t\t\tobj3[11] = vector6.ToString();\r\n\t\t\t\tobj3[12] = \" \";\r\n\t\t\t\tvector6 = hitPositionWorld;\r\n\t\t\t\tobj3[13] = vector6.ToString();\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, string.Concat(obj3));\r\n\t\t\t\tplayer.stats.combat.LogInvalid(obj, \"melee_los\");\r\n\t\t\t\tflag8 = false;\r\n\t\t\t}\r\n\t\t\tgoto IL_08c3;\r\n\t\t\tIL_0a3c:\r\n\t\t\tplayer.metabolism.UseHeart(heartStress * 0.2f);\r\n\t\t\tusing (TimeWarning.New(\"DoAttackShared\", 50))\r\n\t\t\t{\r\n\t\t\t\tDoAttackShared(obj);\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.Free(ref obj);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamLeave","Parameters":"(RelationshipManager.PlayerTeam,BasePlayer)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void leaveteam(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (!(basePlayer == null) && basePlayer.currentTeam != 0L)\r\n\t\t{\r\n\t\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(basePlayer.currentTeam);\r\n\t\t\tif (playerTeam != null && Interface.CallHook(\"OnTeamLeave\", playerTeam, basePlayer) == null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam.RemovePlayer(basePlayer.userID);\r\n\t\t\t\tbasePlayer.ClearTeam();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMapMarkerRemove","Parameters":"(BasePlayer,System.Collections.Generic.List<ProtoBuf.MapNote>,int)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server.CallsPerSecond(10uL)]\r\n\t[RPC_Server]\r\n\t[RPC_Server.FromOwner]\r\n\tpublic void Server_RemovePointOfInterest(RPCMessage msg)\r\n\t{\r\n\t\tint num = msg.read.Int32();\r\n\t\tif (State.pointsOfInterest != null && State.pointsOfInterest.Count > num && num >= 0 && Interface.CallHook(\"OnMapMarkerRemove\", this, State.pointsOfInterest, num) == null)\r\n\t\t{\r\n\t\t\tState.pointsOfInterest[num].Dispose();\r\n\t\t\tState.pointsOfInterest.RemoveAt(num);\r\n\t\t\tDirtyPlayerState();\r\n\t\t\tSendMarkersToClient();\r\n\t\t\tTeamUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityControl","Parameters":"(AutoTurret,ulong)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic virtual bool CanControl(ulong playerID)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnEntityControl\", this, playerID);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (booting)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsPowered())\r\n\t\t{\r\n\t\t\treturn !PeacekeeperMode();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"IOnBasePlayerHurt","Parameters":"(BasePlayer,HitInfo)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override void Hurt(HitInfo info)\r\n\t{\r\n\t\tif (IsDead() || IsTransferProtected() || (IsImmortalTo(info) && info.damageTypes.Total() >= 0f) || Interface.CallHook(\"IOnBasePlayerHurt\", this, info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ConVar.Server.pve && !IsNpc && (bool)info.Initiator && info.Initiator is BasePlayer && info.Initiator != this)\r\n\t\t{\r\n\t\t\t(info.Initiator as BasePlayer).Hurt(info.damageTypes.Total(), DamageType.Generic);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (info.damageTypes.Has(DamageType.Fun_Water))\r\n\t\t{\r\n\t\t\tbool flag = true;\r\n\t\t\tItem activeItem = GetActiveItem();\r\n\t\t\tif (activeItem != null && (activeItem.info.shortname == \"gun.water\" || activeItem.info.shortname == \"pistol.water\"))\r\n\t\t\t{\r\n\t\t\t\tfloat value = metabolism.wetness.value;\r\n\t\t\t\tmetabolism.wetness.Add(ConVar.Server.funWaterWetnessGain);\r\n\t\t\t\tbool flag2 = metabolism.wetness.value >= ConVar.Server.funWaterDamageThreshold;\r\n\t\t\t\tflag = !flag2;\r\n\t\t\t\tif (info.InitiatorPlayer != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (flag2 && value < ConVar.Server.funWaterDamageThreshold)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinfo.InitiatorPlayer.GiveAchievement(\"SUMMER_SOAKED\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (metabolism.radiation_level.Fraction() > 0.2f && !string.IsNullOrEmpty(\"SUMMER_RADICAL\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinfo.InitiatorPlayer.GiveAchievement(\"SUMMER_RADICAL\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tinfo.damageTypes.Scale(DamageType.Fun_Water, 0f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (info.damageTypes.Get(DamageType.Drowned) > 5f && drownEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(drownEffect.resourcePath, this, StringPool.Get(\"head\"), Vector3.zero, Vector3.zero);\r\n\t\t}\r\n\t\tif (modifiers != null)\r\n\t\t{\r\n\t\t\tif (info.damageTypes.Has(DamageType.Radiation))\r\n\t\t\t{\r\n\t\t\t\tinfo.damageTypes.Scale(DamageType.Radiation, 1f - Mathf.Clamp01(modifiers.GetValue(Modifier.ModifierType.Radiation_Resistance)));\r\n\t\t\t}\r\n\t\t\tif (info.damageTypes.Has(DamageType.RadiationExposure))\r\n\t\t\t{\r\n\t\t\t\tinfo.damageTypes.Scale(DamageType.RadiationExposure, 1f - Mathf.Clamp01(modifiers.GetValue(Modifier.ModifierType.Radiation_Exposure_Resistance)));\r\n\t\t\t}\r\n\t\t}\r\n\t\tmetabolism.pending_health.Subtract(info.damageTypes.Total() * 10f);\r\n\t\tBasePlayer initiatorPlayer = info.InitiatorPlayer;\r\n\t\tif ((bool)initiatorPlayer && initiatorPlayer != this)\r\n\t\t{\r\n\t\t\tif (initiatorPlayer.InSafeZone() || InSafeZone())\r\n\t\t\t{\r\n\t\t\t\tinitiatorPlayer.MarkHostileFor(300f);\r\n\t\t\t}\r\n\t\t\tif (initiatorPlayer.InSafeZone() && !initiatorPlayer.IsNpc)\r\n\t\t\t{\r\n\t\t\t\tinfo.damageTypes.ScaleAll(0f);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (initiatorPlayer.IsNpc && initiatorPlayer.Family == BaseNpc.AiStatistics.FamilyEnum.Murderer && info.damageTypes.Get(DamageType.Explosion) > 0f)\r\n\t\t\t{\r\n\t\t\t\tinfo.damageTypes.ScaleAll(Halloween.scarecrow_beancan_vs_player_dmg_modifier);\r\n\t\t\t}\r\n\t\t}\r\n\t\tbase.Hurt(info);\r\n\t\tif ((bool)BaseGameMode.GetActiveGameMode(serverside: true))\r\n\t\t{\r\n\t\t\tBasePlayer instigator = info?.InitiatorPlayer;\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnPlayerHurt(instigator, this, info);\r\n\t\t}\r\n\t\tif (IsRestrained && info.damageTypes.GetMajorityDamageType().InterruptsRestraintMinigame())\r\n\t\t{\r\n\t\t\tHandcuffs handcuffs = GetHeldEntity() as Handcuffs;\r\n\t\t\tif (handcuffs != null)\r\n\t\t\t{\r\n\t\t\t\thandcuffs.InterruptUnlockMiniGame(wasPushedOrDamaged: true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tEACServer.LogPlayerTakeDamage(this, info);\r\n\t\tmetabolism.SendChangesToClient();\r\n\t\tif (info.PointStart != Vector3.zero && (info.damageTypes.Total() >= 0f || IsGod()))\r\n\t\t{\r\n\t\t\tint arg = (int)info.damageTypes.GetMajorityDamageType();\r\n\t\t\tif (info.Weapon != null && info.damageTypes.Has(DamageType.Bullet))\r\n\t\t\t{\r\n\t\t\t\tBaseProjectile component = info.Weapon.GetComponent<BaseProjectile>();\r\n\t\t\t\tif (component != null && component.IsSilenced())\r\n\t\t\t\t{\r\n\t\t\t\t\targ = 12;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tClientRPC(RpcTarget.PlayerAndSpectators(\"DirectionalDamage\", this), info.PointStart, arg, Mathf.CeilToInt(info.damageTypes.Total()));\r\n\t\t}\r\n\t\tDeathBlow.From(info, out cachedNonSuicideHit);\r\n\t}\r\n"},{"Name":"OnResearchCostDetermine","Parameters":"(Item)","ClassName":"ResearchTable","MethodCode":"\r\n\tpublic static int ScrapForResearch(Item item)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnResearchCostDetermine\", item);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\treturn ScrapForResearch(item.info);\r\n\t}\r\n"},{"Name":"OnEntityLeave","Parameters":"(TriggerBase,BaseEntity)","ClassName":"TriggerBase","MethodCode":"\r\n\tpublic virtual void OnEntityLeave(BaseEntity ent)\r\n\t{\r\n\t\tif (entityContents != null && Interface.CallHook(\"OnEntityLeave\", this, ent) == null)\r\n\t\t{\r\n\t\t\tentityContents.Remove(ent);\r\n\t\t\tOnEntityLeaveTrigger?.Invoke(ent);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanChangeGrade","Parameters":"(BasePlayer,BuildingBlock,BuildingGrade.Enum,ulong)","ClassName":"BuildingBlock","MethodCode":"\r\n\tpublic bool CanChangeToGrade(BuildingGrade.Enum iGrade, ulong iSkin, BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanChangeGrade\", player, this, iGrade, iSkin);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player.IsInCreativeMode && Creative.freeBuild)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (HasUpgradePrivilege(iGrade, iSkin, player))\r\n\t\t{\r\n\t\t\treturn !IsUpgradeBlocked();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnVehicleModulesAssign","Parameters":"(ModularCar,Rust.Modular.ItemModVehicleModule[])","ClassName":"ModularCar","MethodCode":"\r\n\tpublic void SpawnPreassignedModules()\r\n\t{\r\n\t\tif (!spawnSettings.useSpawnSettings || CollectionEx.IsNullOrEmpty(spawnSettings.configurationOptions))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tModularCarPresetConfig modularCarPresetConfig = spawnSettings.configurationOptions[UnityEngine.Random.Range(0, spawnSettings.configurationOptions.Length)];\r\n\t\tif (Interface.CallHook(\"OnVehicleModulesAssign\", this, modularCarPresetConfig.socketItemDefs) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < modularCarPresetConfig.socketItemDefs.Length; i++)\r\n\t\t{\r\n\t\t\tItemModVehicleModule itemModVehicleModule = modularCarPresetConfig.socketItemDefs[i];\r\n\t\t\tif (itemModVehicleModule != null && base.Inventory.SocketsAreFree(i, itemModVehicleModule.socketsTaken))\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(itemModVehicleModule.GetComponent<ItemDefinition>(), 1, 0uL);\r\n\t\t\t\tfloat num = UnityEngine.Random.Range(spawnSettings.minStartHealthPercent, spawnSettings.maxStartHealthPercent);\r\n\t\t\t\titem.condition = item.maxCondition * num;\r\n\t\t\t\tif (!TryAddModule(item))\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnVehicleModulesAssigned\", this, modularCarPresetConfig.socketItemDefs);\r\n\t\tInvoke(HandleAdminBonus, 0f);\r\n\t}\r\n"},{"Name":"CanBeHomingTargeted","Parameters":"(RoadFlare)","ClassName":"RoadFlare","MethodCode":"\r\n\tpublic bool IsValidHomingTarget()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeHomingTargeted\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"IOnUserApprove","Parameters":"(Network.Connection)","ClassName":"ConnectionAuth","MethodCode":"\r\n\tpublic void OnNewConnection(Connection connection)\r\n\t{\r\n\t\tconnection.connected = false;\r\n\t\tif (connection.token == null || connection.token.Length < 32)\r\n\t\t{\r\n\t\t\tReject(connection, \"Invalid Token\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (connection.userid == 0L)\r\n\t\t{\r\n\t\t\tReject(connection, \"Invalid SteamID\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (connection.protocol != 2564)\r\n\t\t{\r\n\t\t\tif (!DeveloperList.Contains(connection.userid))\r\n\t\t\t{\r\n\t\t\t\tReject(connection, \"Incompatible Version\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tDebugEx.Log(\"Not kicking \" + connection.userid + \" for incompatible protocol (is a developer)\");\r\n\t\t}\r\n\t\tif (ServerUsers.Is(connection.userid, ServerUsers.UserGroup.Banned))\r\n\t\t{\r\n\t\t\tServerUsers.User user = ServerUsers.Get(connection.userid);\r\n\t\t\tstring text = user?.notes ?? \"no reason given\";\r\n\t\t\tstring text2 = ((user != null && user.expiry > 0) ? (\" for \" + (user.expiry - Epoch.Current).FormatSecondsLong()) : \"\");\r\n\t\t\tReject(connection, \"You are banned from this server\" + text2 + \" (\" + text + \")\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ServerUsers.Is(connection.userid, ServerUsers.UserGroup.Moderator))\r\n\t\t{\r\n\t\t\tDebugEx.Log(connection.ToString() + \" has auth level 1\");\r\n\t\t\tconnection.authLevel = 1u;\r\n\t\t}\r\n\t\tif (ServerUsers.Is(connection.userid, ServerUsers.UserGroup.Owner))\r\n\t\t{\r\n\t\t\tDebugEx.Log(connection.ToString() + \" has auth level 2\");\r\n\t\t\tconnection.authLevel = 2u;\r\n\t\t}\r\n\t\tif (DeveloperList.Contains(connection.userid))\r\n\t\t{\r\n\t\t\tDebugEx.Log(connection.ToString() + \" is a developer\");\r\n\t\t\tconnection.authLevel = 3u;\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"IOnUserApprove\", connection) == null)\r\n\t\t{\r\n\t\t\tm_AuthConnection.Add(connection);\r\n\t\t\tStartCoroutine(AuthorisationRoutine(connection));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemUse","Parameters":"(Item,int)","ClassName":"Item","MethodCode":"\r\n\tpublic void UseItem(int amountToConsume = 1)\r\n\t{\r\n\t\tif (amountToConsume > 0)\r\n\t\t{\r\n\t\t\tobject obj = Interface.CallHook(\"OnItemUse\", this, amountToConsume);\r\n\t\t\tif (obj is int)\r\n\t\t\t{\r\n\t\t\t\tamountToConsume = (int)obj;\r\n\t\t\t}\r\n\t\t\tamount -= amountToConsume;\r\n\t\t\tif (amount <= 0)\r\n\t\t\t{\r\n\t\t\t\tamount = 0;\r\n\t\t\t\tRemove();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tMarkDirty();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,IndustrialCrafter)","ClassName":"IndustrialCrafter","MethodCode":"\r\n\tpublic virtual bool PlayerOpenLoot(BasePlayer player, string panelToOpen = \"\", bool doPositionChecks = true)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanLootEntity\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (NeedsBuildingPrivilegeToUse && !player.CanBuild())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (OnlyOneUser && IsOpen())\r\n\t\t{\r\n\t\t\tplayer.ChatMessage(\"Already in use\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (player.inventory.loot.StartLootingEntity(this, doPositionChecks))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Open, b: true);\r\n\t\t\tplayer.inventory.loot.AddContainer(_inventory);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), LootPanelName);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnLootPlayer","Parameters":"(BasePlayer,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_LootPlayer(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif ((bool)player && player.CanInteract() && CanBeLooted(player) && player.inventory.loot.StartLootingEntity(this))\r\n\t\t{\r\n\t\t\tplayer.inventory.loot.AddContainer(inventory.containerMain);\r\n\t\t\tplayer.inventory.loot.AddContainer(inventory.containerWear);\r\n\t\t\tplayer.inventory.loot.AddContainer(inventory.containerBelt);\r\n\t\t\tInterface.CallHook(\"OnLootPlayer\", this, player);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.RadioactiveLootCheck(player.inventory.loot.containers);\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), \"player_corpse\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretAssigned","Parameters":"(AutoTurret,ulong,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void AssignToFriend(RPCMessage msg)\r\n\t{\r\n\t\tif (AtMaxAuthCapacity() || msg.player == null || !msg.player.CanInteract() || !CanChangeSettings(msg.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tulong num = msg.read.UInt64();\r\n\t\tif (num != 0L && !IsAuthed(num) && Interface.CallHook(\"OnTurretAssign\", this, num, msg.player) == null)\r\n\t\t{\r\n\t\t\tstring username = BasePlayer.SanitizePlayerNameString(msg.read.String(), num);\r\n\t\t\tPlayerNameID playerNameID = new PlayerNameID();\r\n\t\t\tplayerNameID.userid = num;\r\n\t\t\tplayerNameID.username = username;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityAuthChanged(this, msg.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), \"added\", num);\r\n\t\t\tauthorizedPlayers.Add(playerNameID);\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tInterface.CallHook(\"OnTurretAssigned\", this, num, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretShutdown","Parameters":"(AutoTurret)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void InitiateShutdown()\r\n\t{\r\n\t\tif ((!IsOffline() || booting) && Interface.CallHook(\"OnTurretShutdown\", this) == null)\r\n\t\t{\r\n\t\t\tCancelInvoke(SetOnline);\r\n\t\t\tbooting = false;\r\n\t\t\tEffect.server.Run(offlineSound.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\tSetIsOnline(online: false);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSurveyGather","Parameters":"(SurveyCharge,Item)","ClassName":"SurveyCharge","MethodCode":"\r\n\tpublic override void Explode()\r\n\t{\r\n\t\tbase.Explode();\r\n\t\tif (WaterLevel.Test(base.transform.position, waves: true, volumes: true, this))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tResourceDepositManager.ResourceDeposit orCreate = ResourceDepositManager.GetOrCreate(base.transform.position);\r\n\t\tif (orCreate == null || Time.realtimeSinceStartup - orCreate.lastSurveyTime < 10f)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\torCreate.lastSurveyTime = Time.realtimeSinceStartup;\r\n\t\tif (!TransformUtil.GetGroundInfo(base.transform.position, out var hitOut, 0.3f, 8388608))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 point = hitOut.point;\r\n\t\t_ = hitOut.normal;\r\n\t\tList<SurveyCrater> obj = Pool.Get<List<SurveyCrater>>();\r\n\t\tVis.Entities(base.transform.position, 10f, obj, 1);\r\n\t\tbool num = obj.Count > 0;\r\n\t\tPool.FreeUnmanaged(ref obj);\r\n\t\tif (num)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tbool flag2 = false;\r\n\t\tforeach (ResourceDepositManager.ResourceDeposit.ResourceDepositEntry resource in orCreate._resources)\r\n\t\t{\r\n\t\t\tif (resource.spawnType == ResourceDepositManager.ResourceDeposit.surveySpawnType.ITEM && !resource.isLiquid && resource.amount >= 1000)\r\n\t\t\t{\r\n\t\t\t\tint num2 = Mathf.Clamp(Mathf.CeilToInt(2.5f / resource.workNeeded * 10f), 0, 5);\r\n\t\t\t\tint iAmount = 1;\r\n\t\t\t\tflag = true;\r\n\t\t\t\tif (resource.isLiquid)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag2 = true;\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = 0; i < num2; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tItem item = ItemManager.Create(resource.type, iAmount, 0uL);\r\n\t\t\t\t\tInterface.CallHook(\"OnSurveyGather\", this, item);\r\n\t\t\t\t\tVector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(20f, Vector3.up);\r\n\t\t\t\t\titem.Drop(base.transform.position + Vector3.up * 1f, GetInheritedDropVelocity() + modifiedAimConeDirection * UnityEngine.Random.Range(5f, 10f), UnityEngine.Random.rotation).SetAngularVelocity(UnityEngine.Random.rotation.eulerAngles * 5f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tstring strPrefab = (flag2 ? craterPrefab_Oil.resourcePath : craterPrefab.resourcePath);\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(strPrefab, point, Quaternion.identity);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerMarkersSend","Parameters":"(BasePlayer,ProtoBuf.MapNoteList)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void SendMarkersToClient()\r\n\t{\r\n\t\tusing MapNoteList mapNoteList = Facepunch.Pool.Get<MapNoteList>();\r\n\t\tmapNoteList.notes = Facepunch.Pool.Get<List<MapNote>>();\r\n\t\tif (ServerCurrentDeathNote != null)\r\n\t\t{\r\n\t\t\tmapNoteList.notes.Add(ServerCurrentDeathNote);\r\n\t\t}\r\n\t\tif (State.pointsOfInterest != null)\r\n\t\t{\r\n\t\t\tmapNoteList.notes.AddRange(State.pointsOfInterest);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnPlayerMarkersSend\", this, mapNoteList);\r\n\t\tClientRPC(RpcTarget.Player(\"Client_ReceiveMarkers\", this), mapNoteList);\r\n\t\tmapNoteList.notes.Clear();\r\n\t}\r\n"},{"Name":"OnInventoryAmmoFind","Parameters":"(PlayerInventory,System.Collections.Generic.List<Item>,Rust.AmmoTypes)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic void FindAmmo(List<Item> list, AmmoTypes ammoType)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnInventoryAmmoFind\", this, list, ammoType) == null)\r\n\t\t{\r\n\t\t\tcontainerMain?.FindAmmo(list, ammoType);\r\n\t\t\tcontainerBelt?.FindAmmo(list, ammoType);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerDisconnected","Parameters":"(BasePlayer,string)","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic void OnDisconnected(string strReason, Network.Connection connection)\r\n\t{\r\n\t\tFacepunch.Rust.Analytics.Azure.OnPlayerDisconnected(connection, strReason);\r\n\t\tGlobalNetworkHandler.server.OnClientDisconnected(connection);\r\n\t\tconnectionQueue.TryAddReservedSlot(connection);\r\n\t\tconnectionQueue.RemoveConnection(connection);\r\n\t\tConnectionAuth.OnDisconnect(connection);\r\n\t\tif (connection.authStatusSteam == \"ok\")\r\n\t\t{\r\n\t\t\tPlatformService.Instance.EndPlayerSession(connection.userid);\r\n\t\t}\r\n\t\tEACServer.OnLeaveGame(connection);\r\n\t\tBasePlayer basePlayer = connection.player as BasePlayer;\r\n\t\tif (basePlayer != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerDisconnected\", basePlayer, strReason);\r\n\t\t\tbasePlayer.OnDisconnected();\r\n\t\t}\r\n\t\tif (connection.authStatusNexus == \"ok\")\r\n\t\t{\r\n\t\t\tNexusServer.Logout(connection.userid);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnToggleVendingBroadcast","Parameters":"(VendingMachine,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_Broadcast(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tbool b = msg.read.Bit();\r\n\t\tif (CanPlayerAdmin(player))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved4, b);\r\n\t\t\tInterface.CallHook(\"OnToggleVendingBroadcast\", this, player);\r\n\t\t\tUpdateMapMarker();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPhoneDialFail","Parameters":"(PhoneController,Telephone.DialFailReason,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void OnDialFailed(Telephone.DialFailReason reason)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPhoneDialFail\", this, reason, currentPlayer) == null)\r\n\t\t{\r\n\t\t\tSetPhoneState(Telephone.CallState.Idle);\r\n\t\t\tbase.baseEntity.ClientRPC(RpcTarget.NetworkGroup(\"ClientOnDialFailed\"), (int)reason);\r\n\t\t\tactiveCallTo = null;\r\n\t\t\tif (IsInvoking(TimeOutCall))\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(TimeOutCall);\r\n\t\t\t}\r\n\t\t\tif (IsInvoking(TriggerTimeOut))\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(TriggerTimeOut);\r\n\t\t\t}\r\n\t\t\tif (IsInvoking(TimeOutDialing))\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(TimeOutDialing);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnPhoneDialFailed\", this, reason, currentPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerRespawned","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void RespawnAt(Vector3 position, Quaternion rotation, BaseEntity spawnPointEntity = null)\r\n\t{\r\n\t\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\t\tif ((bool)activeGameMode && !activeGameMode.CanPlayerRespawn(this))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetPlayerFlag(PlayerFlags.Wounded, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.Incapacitated, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.Unused2, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.Unused1, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\tSetPlayerFlag(PlayerFlags.DisplaySash, b: false);\r\n\t\trespawnId = Guid.NewGuid().ToString(\"N\");\r\n\t\tServerPerformance.spawns++;\r\n\t\tSetParent(null, worldPositionStays: true);\r\n\t\tbase.transform.SetPositionAndRotation(position, rotation);\r\n\t\ttickInterpolator.Reset(position);\r\n\t\ttickHistory.Reset(position);\r\n\t\teyeHistory.Clear();\r\n\t\testimatedVelocity = Vector3.zero;\r\n\t\testimatedSpeed = 0f;\r\n\t\testimatedSpeed2D = 0f;\r\n\t\tlastTickTime = 0f;\r\n\t\tStopWounded();\r\n\t\tResetWoundingVars();\r\n\t\tStopSpectating();\r\n\t\tUpdateNetworkGroup();\r\n\t\tEnablePlayerCollider();\r\n\t\tRemovePlayerRigidbody();\r\n\t\tStartSleeping();\r\n\t\tLifeStoryStart();\r\n\t\tmetabolism.Reset();\r\n\t\tif (modifiers != null)\r\n\t\t{\r\n\t\t\tmodifiers.RemoveAll();\r\n\t\t}\r\n\t\tInitializeHealth(StartHealth(), StartMaxHealth());\r\n\t\tbool flag = false;\r\n\t\tif (ConVar.Server.respawnWithLoadout)\r\n\t\t{\r\n\t\t\tstring infoString = GetInfoString(\"client.respawnloadout\", string.Empty);\r\n\t\t\tif (!string.IsNullOrEmpty(infoString) && Inventory.LoadLoadout(infoString, out var so))\r\n\t\t\t{\r\n\t\t\t\tso.LoadItemsOnTo(this);\r\n\t\t\t\tflag = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!flag)\r\n\t\t{\r\n\t\t\tinventory.GiveDefaultItems();\r\n\t\t}\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tClientRPC(RpcTarget.Player(\"StartLoading\", this));\r\n\t\tFacepunch.Rust.Analytics.Azure.OnPlayerRespawned(this, spawnPointEntity);\r\n\t\tif ((bool)activeGameMode)\r\n\t\t{\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnPlayerRespawn(this);\r\n\t\t}\r\n\t\tif (IsConnected)\r\n\t\t{\r\n\t\t\tEACServer.OnStartLoading(net.connection);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnPlayerRespawned\", this);\r\n\t\tProcessMissionEvent(BaseMission.MissionEventType.RESPAWN, 0, 0f);\r\n\t}\r\n"},{"Name":"OnHelicopterStrafeEnter","Parameters":"(PatrolHelicopterAI,UnityEngine.Vector3,BasePlayer)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tprivate void StartStrafe(BasePlayer strafeTarget, bool shouldUseNapalm = false)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnHelicopterStrafeEnter\", this, strafeTarget.transform.position, strafeTarget) == null)\r\n\t\t{\r\n\t\t\tstrafe_target = strafeTarget;\r\n\t\t\tget_out_of_strafe_distance = UnityEngine.Random.Range(13f, 17f);\r\n\t\t\tif (CanUseNapalm() && shouldUseNapalm)\r\n\t\t\t{\r\n\t\t\t\tpassNapalm = shouldUseNapalm;\r\n\t\t\t\tuseNapalm = true;\r\n\t\t\t\tlastNapalmTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\t}\r\n\t\t\tlastStrafeTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\t_currentState = aiState.STRAFE;\r\n\t\t\tRefreshTargetPosition();\r\n\t\t\tnumRocketsLeft = 12 + UnityEngine.Random.Range(-1, 1);\r\n\t\t\tlastRocketTime = 0f;\r\n\t\t\tmovementLockingAiming = true;\r\n\t\t\tVector3 randomOffset = GetRandomOffset(strafe_target_position, 175f, 192.5f);\r\n\t\t\tSetTargetDestination(randomOffset, 10f);\r\n\t\t\tSetIdealRotation(GetYawRotationTo(randomOffset));\r\n\t\t\tputtingDistance = true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFireworkDamage","Parameters":"(BaseFirework,HitInfo)","ClassName":"BaseFirework","MethodCode":"\r\n\tpublic override void OnAttacked(HitInfo info)\r\n\t{\r\n\t\tbase.OnAttacked(info);\r\n\t\tif (base.isServer && Interface.CallHook(\"OnFireworkDamage\", this, info) == null && info.damageTypes.Has(DamageType.Heat))\r\n\t\t{\r\n\t\t\tStaggeredTryLightFuse();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBradleyApcHunt","Parameters":"(BradleyAPC)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic void UpdateMovement_Hunt()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnBradleyApcHunt\", this) != null || patrolPath == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tTargetInfo targetInfo = targetList[0];\r\n\t\tif (!targetInfo.IsValid())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (HasPath() && targetInfo.IsVisible())\r\n\t\t{\r\n\t\t\tif (currentPath.Count > 1)\r\n\t\t\t{\r\n\t\t\t\tVector3 item = currentPath[currentPathIndex];\r\n\t\t\t\tClearPath();\r\n\t\t\t\tcurrentPath.Add(item);\r\n\t\t\t\tfinalDestination = item;\r\n\t\t\t\tcurrentPathIndex = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!(UnityEngine.Time.time > nextEngagementPathTime) || HasPath() || targetInfo.IsVisible())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbool flag = false;\r\n\t\t\tIAIPathNode start = patrolPath.GetClosestToPoint(base.transform.position);\r\n\t\t\tList<IAIPathNode> nodes = Facepunch.Pool.Get<List<IAIPathNode>>();\r\n\t\t\tif (GetEngagementPath(ref nodes))\r\n\t\t\t{\r\n\t\t\t\tflag = true;\r\n\t\t\t\tstart = nodes[nodes.Count - 1];\r\n\t\t\t}\r\n\t\t\tIAIPathNode iAIPathNode = null;\r\n\t\t\tList<IAIPathNode> nearNodes = Facepunch.Pool.Get<List<IAIPathNode>>();\r\n\t\t\tpatrolPath.GetNodesNear(targetInfo.lastSeenPosition, ref nearNodes, 30f);\r\n\t\t\tStack<IAIPathNode> stack = null;\r\n\t\t\tfloat num = float.PositiveInfinity;\r\n\t\t\tfloat y = mainTurretEyePos.localPosition.y;\r\n\t\t\tforeach (IAIPathNode item2 in nearNodes)\r\n\t\t\t{\r\n\t\t\t\tStack<IAIPathNode> path = new Stack<IAIPathNode>();\r\n\t\t\t\tif (targetInfo.entity.IsVisible(item2.Position + new Vector3(0f, y, 0f)) && AStarPath.FindPath(start, item2, out path, out var pathCost) && pathCost < num)\r\n\t\t\t\t{\r\n\t\t\t\t\tstack = path;\r\n\t\t\t\t\tnum = pathCost;\r\n\t\t\t\t\tiAIPathNode = item2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stack == null && nearNodes.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tStack<IAIPathNode> path2 = new Stack<IAIPathNode>();\r\n\t\t\t\tIAIPathNode iAIPathNode2 = nearNodes[UnityEngine.Random.Range(0, nearNodes.Count)];\r\n\t\t\t\tif (AStarPath.FindPath(start, iAIPathNode2, out path2, out var pathCost2) && pathCost2 < num)\r\n\t\t\t\t{\r\n\t\t\t\t\tstack = path2;\r\n\t\t\t\t\tiAIPathNode = iAIPathNode2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stack != null)\r\n\t\t\t{\r\n\t\t\t\tcurrentPath.Clear();\r\n\t\t\t\tif (flag)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < nodes.Count - 1; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcurrentPath.Add(nodes[i].Position);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tforeach (IAIPathNode item3 in stack)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentPath.Add(item3.Position);\r\n\t\t\t\t}\r\n\t\t\t\tcurrentPathIndex = -1;\r\n\t\t\t\tpathLooping = false;\r\n\t\t\t\tfinalDestination = iAIPathNode.Position;\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref nearNodes);\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref nodes);\r\n\t\t\tnextEngagementPathTime = UnityEngine.Time.time + 5f;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRackedWeaponMount","Parameters":"(Item,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate bool MountWeapon(Item item, BasePlayer player, int gridCellIndex, int rotation, bool sendUpdate = true)\r\n\t{\r\n\t\tif (item == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnRackedWeaponMount\", item, player, this);\r\n\t\tif (obj != null)\r\n\t\t{\r\n\t\t\tif (!(obj is bool))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tint itemid = item.info.itemid;\r\n\t\tWorldModelRackMountConfig forItemDef = WorldModelRackMountConfig.GetForItemDef(item.info);\r\n\t\tif (forItemDef == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"no rackmount config\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!CanAcceptWeaponType(forItemDef))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!GridCellsFree(forItemDef, gridCellIndex, rotation, null))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.MoveToContainer(base.inventory, -1, allowStack: false) && item.position >= 0 && item.position < gridSlots.Length)\r\n\t\t{\r\n\t\t\tWeaponRackSlot slot = gridSlots[item.position];\r\n\t\t\tSetSlotItem(slot, item, gridCellIndex, rotation);\r\n\t\t\tSetupSlot(slot);\r\n\t\t\tif (player != null)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"PlayMountSound\", player), itemid);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sendUpdate)\r\n\t\t{\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnRackedWeaponMounted\", item, player, this);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnPlayerWantsMount","Parameters":"(BasePlayer,BaseMountable)","ClassName":"BaseMountable","MethodCode":"\r\n\tpublic void WantsMount(BasePlayer player)\r\n\t{\r\n\t\tif (!player.IsValid() || !player.CanInteract() || Interface.CallHook(\"OnPlayerWantsMount\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!DirectlyMountable())\r\n\t\t{\r\n\t\t\tBaseVehicle baseVehicle = VehicleParent();\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.WantsMount(player);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tAttemptMount(player);\r\n\t}\r\n"},{"Name":"OnDigitalClockRingStop","Parameters":"(DigitalClock)","ClassName":"DigitalClock","MethodCode":"\r\n\tprivate void StopRinging()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnDigitalClockRingStop\", this) == null)\r\n\t\t{\r\n\t\t\tisRinging = false;\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"RPC_StopRinging\"));\r\n\t\t\tMarkDirty();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityLoaded","Parameters":"(BaseNetworkable,BaseNetworkable.LoadInfo)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic virtual void Load(LoadInfo info)\r\n\t{\r\n\t\tif (info.msg.baseNetworkable != null)\r\n\t\t{\r\n\t\t\tLoadInfo loadInfo = info;\r\n\t\t\tInterface.CallHook(\"OnEntityLoaded\", this, info);\r\n\t\t\tProtoBuf.BaseNetworkable baseNetworkable = loadInfo.msg.baseNetworkable;\r\n\t\t\tif (prefabID != baseNetworkable.prefabID)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogError(\"Prefab IDs don't match! \" + prefabID + \"/\" + baseNetworkable.prefabID + \" -> \" + base.gameObject, base.gameObject);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBuildingSplit","Parameters":"(BuildingManager.Building,uint)","ClassName":"ServerBuildingManager","MethodCode":"\r\n\tprivate void Split(Building building)\r\n\t{\r\n\t\twhile (building.HasBuildingBlocks())\r\n\t\t{\r\n\t\t\tBuildingBlock buildingBlock = building.buildingBlocks[0];\r\n\t\t\tuint newID = BuildingManager.server.NewBuildingID();\r\n\t\t\tInterface.CallHook(\"OnBuildingSplit\", building, newID);\r\n\t\t\tbuildingBlock.EntityLinkBroadcast(delegate(BuildingBlock b)\r\n\t\t\t{\r\n\t\t\t\tb.AttachToBuilding(newID);\r\n\t\t\t});\r\n\t\t}\r\n\t\twhile (building.HasBuildingPrivileges())\r\n\t\t{\r\n\t\t\tBuildingPrivlidge buildingPrivlidge = building.buildingPrivileges[0];\r\n\t\t\tBuildingBlock nearbyBuildingBlock = buildingPrivlidge.GetNearbyBuildingBlock();\r\n\t\t\tbuildingPrivlidge.AttachToBuilding(nearbyBuildingBlock ? nearbyBuildingBlock.buildingID : 0u);\r\n\t\t}\r\n\t\twhile (building.HasDecayEntities())\r\n\t\t{\r\n\t\t\tDecayEntity decayEntity = building.decayEntities[0];\r\n\t\t\tBuildingBlock nearbyBuildingBlock2 = decayEntity.GetNearbyBuildingBlock();\r\n\t\t\tdecayEntity.AttachToBuilding(nearbyBuildingBlock2 ? nearbyBuildingBlock2.buildingID : 0u);\r\n\t\t}\r\n\t\tif (AI.nav_carve_use_building_optimization)\r\n\t\t{\r\n\t\t\tbuilding.isNavMeshCarvingDirty = true;\r\n\t\t\tint ticks = 2;\r\n\t\t\tUpdateNavMeshCarver(building, ref ticks, 0);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPortalUsed","Parameters":"(BasePlayer,BasePortal)","ClassName":"BasePortal","MethodCode":"\r\n\tpublic virtual void UsePortal(BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPortalUse\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tLinkPortal();\r\n\t\tif (targetPortal != null)\r\n\t\t{\r\n\t\t\tplayer.PauseFlyHackDetection();\r\n\t\t\tplayer.PauseSpeedHackDetection();\r\n\t\t\tVector3 position = player.transform.position;\r\n\t\t\tVector3 vector = targetPortal.GetLocalEntryExitPosition();\r\n\t\t\tVector3 vector2 = base.transform.InverseTransformDirection(player.eyes.BodyForward());\r\n\t\t\tVector3 vector3 = vector2;\r\n\t\t\tif (isMirrored)\r\n\t\t\t{\r\n\t\t\t\tVector3 position2 = base.transform.InverseTransformPoint(player.transform.position);\r\n\t\t\t\tvector = targetPortal.relativeAnchor.transform.TransformPoint(position2);\r\n\t\t\t\tvector3 = targetPortal.relativeAnchor.transform.TransformDirection(vector2);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvector3 = targetPortal.GetLocalEntryExitRotation() * Vector3.forward;\r\n\t\t\t}\r\n\t\t\tif (disappearEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(disappearEffect.resourcePath, position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tif (appearEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(appearEffect.resourcePath, vector, Vector3.up);\r\n\t\t\t}\r\n\t\t\tplayer.SetParent(null, worldPositionStays: true);\r\n\t\t\tplayer.Teleport(vector);\r\n\t\t\tplayer.ForceUpdateTriggers();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"ForceViewAnglesTo\", player), vector3);\r\n\t\t\tif (transitionSoundEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(transitionSoundEffect.resourcePath, targetPortal.relativeAnchor.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tplayer.UpdateNetworkGroup();\r\n\t\t\tplayer.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"StartLoading_Quick\", player), arg1: true);\r\n\t\t\tInterface.CallHook(\"OnPortalUsed\", player, this);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tDebug.Log(\"No portal...\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanHackCrate","Parameters":"(BasePlayer,HackableLockedCrate)","ClassName":"HackableLockedCrate","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_Hack(RPCMessage msg)\r\n\t{\r\n\t\tif (!IsBeingHacked() && Interface.CallHook(\"CanHackCrate\", msg.player, this) == null)\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnLockedCrateStarted(msg.player, this);\r\n\t\t\toriginalHackerPlayerId = msg.player.userID;\r\n\t\t\toriginalHackerPlayer = msg.player;\r\n\t\t\tStartHacking();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretToggle","Parameters":"(AutoTurret)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void SetIsOnline(bool online)\r\n\t{\r\n\t\tif (online != IsOn() && Interface.CallHook(\"OnTurretToggle\", this) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.On, online);\r\n\t\t\tif (online)\r\n\t\t\t{\r\n\t\t\t\tTryRegisterForInterferenceUpdate();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.OnFire, b: false);\r\n\t\t\t\tUpdateInterferenceOnOthers();\r\n\t\t\t}\r\n\t\t\tbooting = false;\r\n\t\t\tGetAttachedWeapon()?.SetLightsOn(online);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tif (IsOffline())\r\n\t\t\t{\r\n\t\t\t\tSetTarget(null);\r\n\t\t\t\tisLootable = true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tisLootable = false;\r\n\t\t\t\tauthDirty = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerInput","Parameters":"(BasePlayer,InputState)","ClassName":"BasePlayer","MethodCode":"\r\n\tprivate void OnReceiveTick(PlayerTick msg, bool wasPlayerStalled)\r\n\t{\r\n\t\tif (msg.inputState != null)\r\n\t\t{\r\n\t\t\tserverInput.Flip(msg.inputState);\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnPlayerTick\", this, msg, wasPlayerStalled) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (serverInput.current.buttons != serverInput.previous.buttons)\r\n\t\t{\r\n\t\t\tResetInputIdleTime();\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnPlayerInput\", this, serverInput) != null || IsReceivingSnapshot)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (IsSpectating())\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"Tick_Spectator\"))\r\n\t\t\t{\r\n\t\t\t\tTick_Spectator();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (IsDead())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (IsSleeping())\r\n\t\t{\r\n\t\t\tif (serverInput.WasJustPressed(BUTTON.FIRE_PRIMARY) || serverInput.WasJustPressed(BUTTON.FIRE_SECONDARY) || serverInput.WasJustPressed(BUTTON.JUMP) || serverInput.WasJustPressed(BUTTON.DUCK))\r\n\t\t\t{\r\n\t\t\t\tEndSleeping();\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t}\r\n\t\t\tUpdateActiveItem(default(ItemId));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (IsRestrained && restraintItemId.HasValue && restraintItemId.HasValue)\r\n\t\t{\r\n\t\t\tUpdateActiveItem(restraintItemId.Value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tUpdateActiveItem(msg.activeItem);\r\n\t\t}\r\n\t\tUpdateModelStateFromTick(msg);\r\n\t\tif (IsIncapacitated())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (isMounted)\r\n\t\t{\r\n\t\t\tGetMounted().PlayerServerInput(serverInput, this);\r\n\t\t}\r\n\t\tUpdatePositionFromTick(msg, wasPlayerStalled);\r\n\t\tUpdateRotationFromTick(msg);\r\n\t\tint activeMission = GetActiveMission();\r\n\t\tif (activeMission >= 0 && activeMission < missions.Count)\r\n\t\t{\r\n\t\t\tBaseMission.MissionInstance missionInstance = missions[activeMission];\r\n\t\t\tif (missionInstance.status == BaseMission.MissionStatus.Active && missionInstance.NeedsPlayerInput())\r\n\t\t\t{\r\n\t\t\t\tProcessMissionEvent(BaseMission.MissionEventType.PLAYER_TICK, net.ID, 0f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (TutorialIsland.EnforceTrespassChecks && !IsAdmin && !IsNpc && net != null && net.group != null)\r\n\t\t{\r\n\t\t\tif (net.group.restricted)\r\n\t\t\t{\r\n\t\t\t\tbool flag = false;\r\n\t\t\t\tif (!IsInTutorial)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tTutorialIsland currentTutorialIsland = GetCurrentTutorialIsland();\r\n\t\t\t\t\tif (currentTutorialIsland == null || currentTutorialIsland.net.group != net.group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (flag)\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime += UnityEngine.Time.deltaTime;\r\n\t\t\t\t\tif (tutorialKickTime > 3f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebug.LogWarning($\"Killing player {displayName}/{userID.Get()} as they are on a tutorial island that doesn't belong them\");\r\n\t\t\t\t\t\tHurt(999f);\r\n\t\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (IsInTutorial && !net.group.restricted)\r\n\t\t\t{\r\n\t\t\t\tbool flag2 = false;\r\n\t\t\t\tTutorialIsland currentTutorialIsland2 = GetCurrentTutorialIsland();\r\n\t\t\t\tif (currentTutorialIsland2 == null || currentTutorialIsland2.net.group != net.group)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag2 = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (flag2)\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime += UnityEngine.Time.deltaTime;\r\n\t\t\t\t\tif (tutorialKickTime > 3f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebug.LogWarning($\"Killing player {displayName}/{userID.Get()} as they are no longer on a tutorial island and are marked as being in a tutorial\");\r\n\t\t\t\t\t\tHurt(999f);\r\n\t\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"AnalyticsTick\"))\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnPlayerTick(this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanTrainCarCouple","Parameters":"(TrainCar,TrainCar)","ClassName":"TrainCoupling","MethodCode":"\r\n\tpublic bool TryCouple(TrainCoupling theirCoupling, bool reflect)\r\n\t{\r\n\t\tif (!isValid)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (CoupledTo == theirCoupling)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (IsCoupled)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanTrainCarCouple\", owner, theirCoupling.owner);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (reflect && !theirCoupling.TryCouple(this, reflect: false))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tCoupledTo = theirCoupling;\r\n\t\towner.SetFlag(flag, b: true, recursive: false, networkupdate: false);\r\n\t\towner.SendNetworkUpdate();\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnFlameExplosion","Parameters":"(FlameExplosive,UnityEngine.Collider)","ClassName":"FlameExplosive","MethodCode":"\r\n\tpublic void FlameExplode(Vector3 surfaceNormal)\r\n\t{\r\n\t\tif (!base.isServer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 position = base.transform.position;\r\n\t\tif (blockCreateUnderwater && WaterLevel.Test(position, waves: true, volumes: false))\r\n\t\t{\r\n\t\t\tbase.Explode();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tCollider component = GetComponent<Collider>();\r\n\t\tif ((bool)component)\r\n\t\t{\r\n\t\t\tcomponent.enabled = false;\r\n\t\t}\r\n\t\tfor (int i = 0; (float)i < numToCreate; i++)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(createOnExplode.resourcePath, position);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tfloat num = (float)i / numToCreate;\r\n\t\t\t\tVector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(spreadAngle * spreadCurve.Evaluate(num), surfaceNormal);\r\n\t\t\t\tfloat y = UnityEngine.Random.Range(0f, 360f);\r\n\t\t\t\tQuaternion rotation = Quaternion.Euler(0f, y, 0f);\r\n\t\t\t\tbaseEntity.transform.SetPositionAndRotation(position, rotation);\r\n\t\t\t\tbaseEntity.creatorEntity = ((creatorEntity == null) ? baseEntity : creatorEntity);\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t\tInterface.CallHook(\"OnFlameExplosion\", this, component);\r\n\t\t\t\tVector3 vector = modifiedAimConeDirection.normalized * UnityEngine.Random.Range(minVelocity, maxVelocity) * velocityCurve.Evaluate(num * UnityEngine.Random.Range(1f, 1.1f));\r\n\t\t\t\tFireBall component2 = baseEntity.GetComponent<FireBall>();\r\n\t\t\t\tif (component2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tcomponent2.SetDelayedVelocity(vector);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseEntity.SetVelocity(vector);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tbase.Explode();\r\n\t}\r\n"},{"Name":"OnEntityMounted","Parameters":"(BaseMountable,BasePlayer)","ClassName":"BaseMountable","MethodCode":"\r\n\tpublic void MountPlayer(BasePlayer player)\r\n\t{\r\n\t\tif (!(_mounted != null) && !(mountAnchor == null) && Interface.CallHook(\"CanMountEntity\", player, this) == null)\r\n\t\t{\r\n\t\t\tplayer.EnsureDismounted();\r\n\t\t\t_mounted = player;\r\n\t\t\tTransform transform = mountAnchor;\r\n\t\t\tplayer.SetMounted(this);\r\n\t\t\tplayer.MovePosition(transform.position);\r\n\t\t\tplayer.transform.rotation = transform.rotation;\r\n\t\t\tplayer.ServerRotation = transform.rotation;\r\n\t\t\tplayer.OverrideViewAngles(transform.rotation.eulerAngles);\r\n\t\t\t_mounted.eyes.NetworkUpdate(transform.rotation);\r\n\t\t\tplayer.SendNetworkUpdateImmediate();\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnMountEntity(player, this, VehicleParent());\r\n\t\t\tOnPlayerMounted();\r\n\t\t\tInterface.CallHook(\"OnEntityMounted\", this, player);\r\n\t\t\tif (this.IsValid() && player.IsValid())\r\n\t\t\t{\r\n\t\t\t\tplayer.ProcessMissionEvent(BaseMission.MissionEventType.MOUNT_ENTITY, net.ID, 1f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSignLocked","Parameters":"(Signage,BasePlayer)","ClassName":"Signage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void LockSign(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && CanUpdateSign(msg.player))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Locked, b: true);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tbase.OwnerID = msg.player.userID;\r\n\t\t\tInterface.CallHook(\"OnSignLocked\", this, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUpdateSign","Parameters":"(BasePlayer,PhotoFrame)","ClassName":"PhotoFrame","MethodCode":"\r\n\tpublic bool CanUpdateSign(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUpdateSign\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player.IsAdmin || player.IsDeveloper)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!player.CanBuild())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsLocked())\r\n\t\t{\r\n\t\t\treturn (ulong)player.userID == base.OwnerID;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanHelicopterDropCrate","Parameters":"(CH47HelicopterAIController)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic bool CanDropCrate()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanHelicopterDropCrate\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn numCrates > 0;\r\n\t}\r\n"},{"Name":"OnOvenToggle","Parameters":"(BaseOven,BasePlayer)","ClassName":"BaseOven","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tprotected virtual void SVSwitch(RPCMessage msg)\r\n\t{\r\n\t\tbool flag = msg.read.Bit();\r\n\t\tif (Interface.CallHook(\"OnOvenToggle\", this, msg.player) != null || flag == IsOn() || (needsBuildingPrivilegeToUse && !msg.player.CanBuild()))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tStartCooking();\r\n\t\t\tif (msg.player != null)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ProcessMissionEvent(BaseMission.MissionEventType.STARTOVEN, new BaseMission.MissionEventPayload\r\n\t\t\t\t{\r\n\t\t\t\t\tUintIdentifier = prefabID,\r\n\t\t\t\t\tNetworkIdentifier = net.ID\r\n\t\t\t\t}, 1f);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tStopCooking();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExplosiveDud","Parameters":"(DudTimedExplosive)","ClassName":"DudTimedExplosive","MethodCode":"\r\n\tpublic override void Explode()\r\n\t{\r\n\t\tif (creatorEntity != null && creatorEntity.IsNpc)\r\n\t\t{\r\n\t\t\tbase.Explode();\r\n\t\t}\r\n\t\telse if (UnityEngine.Random.Range(0f, 1f) < dudChance && Interface.CallHook(\"OnExplosiveDud\", this) == null)\r\n\t\t{\r\n\t\t\tBecomeDud();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbase.Explode();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnGiveSoldItem","Parameters":"(VendingMachine,Item,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic virtual void GiveSoldItem(Item soldItem, BasePlayer buyer)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnGiveSoldItem\", this, soldItem, buyer) == null)\r\n\t\t{\r\n\t\t\twhile (soldItem.amount > soldItem.MaxStackable())\r\n\t\t\t{\r\n\t\t\t\tItem item = soldItem.SplitItem(soldItem.MaxStackable());\r\n\t\t\t\tbuyer.GiveItem(item, GiveItemReason.PickedUp);\r\n\t\t\t}\r\n\t\t\tbuyer.GiveItem(soldItem, GiveItemReason.PickedUp);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerCorpseSpawned","Parameters":"(BasePlayer,PlayerCorpse)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual BaseCorpse CreateCorpse(PlayerFlags flagsOnDeath, Vector3 posOnDeath, Quaternion rotOnDeath, List<TriggerBase> triggersOnDeath, bool forceServerSide = false)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerCorpseSpawn\", this) != null)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"Create corpse\"))\r\n\t\t{\r\n\t\t\tstring strCorpsePrefab = ((!(ConVar.Physics.serversideragdolls || forceServerSide)) ? \"assets/prefabs/player/player_corpse.prefab\" : \"assets/prefabs/player/player_corpse_new.prefab\");\r\n\t\t\tbool flag = false;\r\n\t\t\tif (ConVar.Global.cinematicGingerbreadCorpses)\r\n\t\t\t{\r\n\t\t\t\tforeach (Item item in inventory.containerWear.itemList)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (item != null && item.info.TryGetComponent<ItemCorpseOverride>(out var component))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstrCorpsePrefab = ((GetFloatBasedOnUserID(userID, 4332uL) > 0.5f) ? component.FemaleCorpse.resourcePath : component.MaleCorpse.resourcePath);\r\n\t\t\t\t\t\tflag = component.BlockWearableCopy;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPlayerCorpse playerCorpse = DropCorpse(strCorpsePrefab, posOnDeath, rotOnDeath, flagsOnDeath, modelState) as PlayerCorpse;\r\n\t\t\tif ((bool)playerCorpse)\r\n\t\t\t{\r\n\t\t\t\tplayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));\r\n\t\t\t\tif (!flag)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayerCorpse.TakeFrom(this, inventory.containerMain, inventory.containerWear, inventory.containerBelt);\r\n\t\t\t\t}\r\n\t\t\t\tplayerCorpse.playerName = displayName;\r\n\t\t\t\tplayerCorpse.streamerName = RandomUsernames.Get(userID);\r\n\t\t\t\tplayerCorpse.playerSteamID = userID;\r\n\t\t\t\tplayerCorpse.underwearSkin = GetUnderwearSkin();\r\n\t\t\t\tif (!CollectionEx.IsNullOrEmpty(triggersOnDeath))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (TriggerBase item2 in triggersOnDeath)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item2 is TriggerParent triggerParent)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttriggerParent.ForceParentEarly(playerCorpse);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tplayerCorpse.Spawn();\r\n\t\t\t\tplayerCorpse.TakeChildren(this);\r\n\t\t\t\tResourceDispenser component2 = playerCorpse.GetComponent<ResourceDispenser>();\r\n\t\t\t\tint num = 2;\r\n\t\t\t\tif (lifeStory != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum += Mathf.Clamp(Mathf.FloorToInt(lifeStory.secondsAlive / 180f), 0, 20);\r\n\t\t\t\t}\r\n\t\t\t\tcomponent2.containedItems.Add(new ItemAmount(ItemManager.FindItemDefinition(\"fat.animal\"), num));\r\n\t\t\t\tInterface.CallHook(\"OnPlayerCorpseSpawned\", this, playerCorpse);\r\n\t\t\t\treturn playerCorpse;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t\tstatic float GetFloatBasedOnUserID(ulong steamid, ulong seed)\r\n\t\t{\r\n\t\t\tUnityEngine.Random.State state = UnityEngine.Random.state;\r\n\t\t\tUnityEngine.Random.InitState((int)(seed + steamid));\r\n\t\t\tfloat result = UnityEngine.Random.Range(0f, 1f);\r\n\t\t\tUnityEngine.Random.state = state;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNpcTargetSense","Parameters":"(BaseEntity,BaseEntity,AIBrainSenses)","ClassName":"SimpleAIMemory","MethodCode":"\r\n\tpublic void SetKnown(BaseEntity ent, BaseEntity owner, AIBrainSenses brainSenses)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnNpcTargetSense\", owner, ent, brainSenses) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIAISenses iAISenses = owner as IAISenses;\r\n\t\tBasePlayer basePlayer = ent as BasePlayer;\r\n\t\tif (basePlayer != null && PlayerIgnoreList.Contains(basePlayer))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tif (iAISenses != null && iAISenses.IsThreat(ent))\r\n\t\t{\r\n\t\t\tflag = true;\r\n\t\t\tif (brainSenses != null)\r\n\t\t\t{\r\n\t\t\t\tbrainSenses.LastThreatTimestamp = UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i < All.Count; i++)\r\n\t\t{\r\n\t\t\tif (All[i].Entity == ent)\r\n\t\t\t{\r\n\t\t\t\tSeenInfo value = All[i];\r\n\t\t\t\tvalue.Position = ent.transform.position;\r\n\t\t\t\tvalue.Timestamp = Mathf.Max(UnityEngine.Time.realtimeSinceStartup, value.Timestamp);\r\n\t\t\t\tAll[i] = value;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (basePlayer != null)\r\n\t\t{\r\n\t\t\tif (ConVar.AI.ignoreplayers && !basePlayer.IsNpc)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tPlayers.Add(ent);\r\n\t\t}\r\n\t\tif (iAISenses != null)\r\n\t\t{\r\n\t\t\tif (iAISenses.IsTarget(ent))\r\n\t\t\t{\r\n\t\t\t\tTargets.Add(ent);\r\n\t\t\t}\r\n\t\t\tif (iAISenses.IsFriendly(ent))\r\n\t\t\t{\r\n\t\t\t\tFriendlies.Add(ent);\r\n\t\t\t}\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tThreats.Add(ent);\r\n\t\t\t}\r\n\t\t}\r\n\t\tAll.Add(new SeenInfo\r\n\t\t{\r\n\t\t\tEntity = ent,\r\n\t\t\tPosition = ent.transform.position,\r\n\t\t\tTimestamp = UnityEngine.Time.realtimeSinceStartup\r\n\t\t});\r\n\t}\r\n"},{"Name":"OnCorpsePopulate","Parameters":"(NPCPlayer,NPCPlayerCorpse)","ClassName":"NPCPlayer","MethodCode":"\r\n\tpublic override BaseCorpse CreateCorpse(PlayerFlags flagsOnDeath, Vector3 posOnDeath, Quaternion rotOnDeath, List<TriggerBase> triggersOnDeath, bool forceServerSide = false)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"Create corpse\"))\r\n\t\t{\r\n\t\t\tNPCPlayerCorpse nPCPlayerCorpse = DropCorpse(CorpsePath, flagsOnDeath, modelState) as NPCPlayerCorpse;\r\n\t\t\tif ((bool)nPCPlayerCorpse)\r\n\t\t\t{\r\n\t\t\t\tif (NavAgent != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tnPCPlayerCorpse.transform.position += Vector3.down * NavAgent.baseOffset;\r\n\t\t\t\t}\r\n\t\t\t\tnPCPlayerCorpse.SetLootableIn(2f);\r\n\t\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));\r\n\t\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved2, b: true);\r\n\t\t\t\tif (CopyInventoryToCorpse)\r\n\t\t\t\t{\r\n\t\t\t\t\tnPCPlayerCorpse.TakeFrom(this, base.inventory.containerMain, base.inventory.containerWear, base.inventory.containerBelt);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tnPCPlayerCorpse.CreateEmptyContainer(base.inventory.containerMain.capacity);\r\n\t\t\t\t}\r\n\t\t\t\tnPCPlayerCorpse.playerName = OverrideCorpseName;\r\n\t\t\t\tnPCPlayerCorpse.playerSteamID = userID;\r\n\t\t\t\tnPCPlayerCorpse.Spawn();\r\n\t\t\t\tif (ShouldCorpseTakeChildren)\r\n\t\t\t\t{\r\n\t\t\t\t\tnPCPlayerCorpse.TakeChildren(this);\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = 0; i < nPCPlayerCorpse.containers.Length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tItemContainer itemContainer = nPCPlayerCorpse.containers[i];\r\n\t\t\t\t\tif (!KeepCorpseClothingIntact || i != 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemContainer.Clear();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnCorpsePopulate\", this, nPCPlayerCorpse);\r\n\t\t\t\tif (obj is BaseCorpse)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (BaseCorpse)obj;\r\n\t\t\t\t}\r\n\t\t\t\tApplyLoot(nPCPlayerCorpse);\r\n\t\t\t}\r\n\t\t\treturn nPCPlayerCorpse;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSleepingBagValidCheck","Parameters":"(SleepingBag,ulong,bool)","ClassName":"SleepingBag","MethodCode":"\r\n\tpublic virtual bool ValidForPlayer(ulong playerID, bool ignoreTimers)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnSleepingBagValidCheck\", this, playerID, ignoreTimers);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (deployerUserID == playerID)\r\n\t\t{\r\n\t\t\tif (!ignoreTimers)\r\n\t\t\t{\r\n\t\t\t\treturn unlockTime < UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"CanTakeCutting","Parameters":"(BasePlayer,GrowableEntity)","ClassName":"GrowableEntity","MethodCode":"\r\n\tpublic void TakeClones(BasePlayer player)\r\n\t{\r\n\t\tif (player == null || !CanClone() || Interface.CallHook(\"CanTakeCutting\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = Properties.BaseCloneCount + Genes.GetGeneTypeCount(GrowableGenetics.GeneType.Yield) / 2;\r\n\t\tif (num > 0)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(Properties.CloneItem, num, 0uL);\r\n\t\t\tGrowableGeneEncoding.EncodeGenesToItem(this, item);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, this, player);\r\n\t\t\tplayer.GiveItem(item, GiveItemReason.ResourceHarvested);\r\n\t\t\tif (Properties.pickEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(Properties.pickEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tTellPlanter();\r\n\t\t\tDie();\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanNpcEat","Parameters":"(BaseNpc,BaseEntity)","ClassName":"BaseNpc","MethodCode":"\r\n\tpublic virtual bool WantsToEat(BaseEntity best)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanNpcEat\", this, best);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!best.HasTrait(TraitFlag.Food))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (best.HasTrait(TraitFlag.Alive))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnMlrsTargetSet","Parameters":"(MLRS,UnityEngine.Vector3,BasePlayer)","ClassName":"MLRS","MethodCode":"\r\n\tpublic void SetUserTargetHitPos(Vector3 worldPos)\r\n\t{\r\n\t\tif (UserTargetHitPos == worldPos)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tVector3 position = TerrainMeta.Position;\r\n\t\t\tVector3 vector = position + TerrainMeta.Size;\r\n\t\t\tworldPos.x = Mathf.Clamp(worldPos.x, position.x, vector.x);\r\n\t\t\tworldPos.z = Mathf.Clamp(worldPos.z, position.z, vector.z);\r\n\t\t\tworldPos.y = GetSurfaceHeight(worldPos);\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnMlrsTarget\", this, worldPos, _mounted) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUserTargetHitPos = worldPos;\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\ttrueTargetHitPos = UserTargetHitPos;\r\n\t\t\tforeach (TriggerSafeZone allSafeZone in TriggerSafeZone.allSafeZones)\r\n\t\t\t{\r\n\t\t\t\tVector3 center = allSafeZone.triggerCollider.bounds.center;\r\n\t\t\t\tcenter.y = 0f;\r\n\t\t\t\tfloat num = ColliderEx.GetRadius(allSafeZone.triggerCollider, allSafeZone.transform.localScale) + targetAreaRadius;\r\n\t\t\t\ttrueTargetHitPos.y = 0f;\r\n\t\t\t\tif (Vector3.Distance(center, trueTargetHitPos) < num)\r\n\t\t\t\t{\r\n\t\t\t\t\tVector3 vector2 = trueTargetHitPos - center;\r\n\t\t\t\t\ttrueTargetHitPos = center + vector2.normalized * num;\r\n\t\t\t\t\ttrueTargetHitPos.y = GetSurfaceHeight(trueTargetHitPos);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnMlrsTargetSet\", this, trueTargetHitPos, _mounted);\r\n\t}\r\n"},{"Name":"OnBookmarkDelete","Parameters":"(ComputerStation,BasePlayer,string)","ClassName":"ComputerStation","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void DeleteBookmark(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!IsPlayerAdmin(player) || isStatic)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (IsValidIdentifier(text) && controlBookmarks.Contains(text) && Interface.CallHook(\"OnBookmarkDelete\", this, player, text) == null)\r\n\t\t{\r\n\t\t\tcontrolBookmarks.Remove(text);\r\n\t\t\tSendControlBookmarks(player);\r\n\t\t\tBaseEntity baseEntity = currentlyControllingEnt.Get(serverside: true);\r\n\t\t\tif (baseEntity != null && baseEntity.TryGetComponent<IRemoteControllable>(out var component) && component.GetIdentifier() == text)\r\n\t\t\t{\r\n\t\t\t\tStopControl(player);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStashHidden","Parameters":"(StashContainer,BasePlayer)","ClassName":"StashContainer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_HideStash(RPCMessage rpc)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanHideStash\", rpc.player, this) == null)\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnStashHidden(rpc.player, this);\r\n\t\t\tSetHidden(isHidden: true);\r\n\t\t\tInterface.CallHook(\"OnStashHidden\", this, rpc.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExperimentEnd","Parameters":"(Workbench)","ClassName":"Workbench","MethodCode":"\r\n\tpublic void ExperimentComplete()\r\n\t{\r\n\t\tItem experimentResourceItem = GetExperimentResourceItem();\r\n\t\tint scrapForExperiment = GetScrapForExperiment();\r\n\t\tif (pendingBlueprint == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"Pending blueprint was null!\");\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnExperimentEnd\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (experimentResourceItem != null && experimentResourceItem.amount >= scrapForExperiment && pendingBlueprint != null)\r\n\t\t{\r\n\t\t\texperimentResourceItem.UseItem(scrapForExperiment);\r\n\t\t\tItem item = ItemManager.Create(GetBlueprintTemplate(), 1, 0uL);\r\n\t\t\titem.blueprintTarget = pendingBlueprint.itemid;\r\n\t\t\tcreatingBlueprint = true;\r\n\t\t\tif (!item.MoveToContainer(base.inventory, 0))\r\n\t\t\t{\r\n\t\t\t\titem.Drop(GetDropPosition(), GetDropVelocity());\r\n\t\t\t}\r\n\t\t\tcreatingBlueprint = false;\r\n\t\t\tif (experimentSuccessEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(experimentSuccessEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t}\r\n\t\tSetFlag(Flags.On, b: false);\r\n\t\tpendingBlueprint = null;\r\n\t\tbase.inventory.SetLocked(isLocked: false);\r\n\t\tSendNetworkUpdate();\r\n\t\tInterface.CallHook(\"OnExperimentEnded\", this);\r\n\t}\r\n"},{"Name":"OnPlayerLand","Parameters":"(BasePlayer,float)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void ApplyFallDamageFromVelocity(float velocity)\r\n\t{\r\n\t\tif (IsGod())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = Mathf.InverseLerp(-15f, -100f, velocity);\r\n\t\tif (num != 0f && Interface.CallHook(\"OnPlayerLand\", this, num) == null)\r\n\t\t{\r\n\t\t\tmetabolism.bleeding.Add(num * 0.5f);\r\n\t\t\tfloat num2 = num * 500f;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnFallDamage(this, velocity, num2);\r\n\t\t\tHurt(num2, DamageType.Fall);\r\n\t\t\tif (num2 > 20f && fallDamageEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(fallDamageEffect.resourcePath, base.transform.position, Vector3.zero);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnPlayerLanded\", this, num);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntitySpawned","Parameters":"(BaseNetworkable)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic virtual void Spawn()\r\n\t{\r\n\t\tEntityProfiler.spawned++;\r\n\t\tif (EntityProfiler.mode >= 2)\r\n\t\t{\r\n\t\t\tEntityProfiler.OnSpawned(this);\r\n\t\t}\r\n\t\tSpawnShared();\r\n\t\tif (net == null)\r\n\t\t{\r\n\t\t\tnet = Network.Net.sv.CreateNetworkable();\r\n\t\t}\r\n\t\tcreationFrame = UnityEngine.Time.frameCount;\r\n\t\tPreInitShared();\r\n\t\tInitShared();\r\n\t\tServerInit();\r\n\t\tPostInitShared();\r\n\t\tUpdateNetworkGroup();\r\n\t\tServerInitPostNetworkGroupAssign();\r\n\t\tisSpawned = true;\r\n\t\tInterface.CallHook(\"OnEntitySpawned\", this);\r\n\t\tSendNetworkUpdateImmediate(justCreated: true);\r\n\t\tInvoke(SendGlobalNetworkUpdate, 0f);\r\n\t\tif (Rust.Application.isLoading && !Rust.Application.isLoadingSave)\r\n\t\t{\r\n\t\t\tbase.gameObject.SendOnSendNetworkUpdate(this as BaseEntity);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityDeath","Parameters":"(BaseCombatEntity,HitInfo)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual void Die(HitInfo info = null)\r\n\t{\r\n\t\tif (IsDead())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tLogEntry(RustLog.EntryType.Combat, 2, \"died\");\r\n\t\thealth = 0f;\r\n\t\tlifestate = LifeState.Dead;\r\n\t\tInterface.CallHook(\"OnEntityDeath\", this, info);\r\n\t\tif (info != null && (bool)info.InitiatorPlayer)\r\n\t\t{\r\n\t\t\tBasePlayer initiatorPlayer = info.InitiatorPlayer;\r\n\t\t\tif (initiatorPlayer != null && initiatorPlayer.GetActiveMission() != -1 && !initiatorPlayer.IsNpc)\r\n\t\t\t{\r\n\t\t\t\tinitiatorPlayer.ProcessMissionEvent(BaseMission.MissionEventType.KILL_ENTITY, prefabID, 1f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"OnKilled\"))\r\n\t\t{\r\n\t\t\tOnKilled(info);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanResearchItem","Parameters":"(BasePlayer,Item)","ClassName":"ResearchTable","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void DoResearch(RPCMessage msg)\r\n\t{\r\n\t\tif (IsResearching())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer player = msg.player;\r\n\t\tItem targetItem = GetTargetItem();\r\n\t\tif (targetItem != null && Interface.CallHook(\"CanResearchItem\", player, targetItem) == null && targetItem.amount <= 1 && IsItemResearchable(targetItem))\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnItemResearch\", this, targetItem, player);\r\n\t\t\ttargetItem.CollectedForCrafting(player);\r\n\t\t\tresearchFinishedTime = UnityEngine.Time.realtimeSinceStartup + researchDuration;\r\n\t\t\tInvoke(ResearchAttemptFinished, researchDuration);\r\n\t\t\tbase.inventory.SetLocked(isLocked: true);\r\n\t\t\tint scrapCost = ScrapForResearch(targetItem);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnResearchStarted(player, this, targetItem, scrapCost);\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tif (researchStartEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(researchStartEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t\tmsg.player.GiveAchievement(\"RESEARCH_ITEM\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBonusItemDropped","Parameters":"(Item,BasePlayer)","ClassName":"LootContainer","MethodCode":"\r\n\tpublic override void DropBonusItems(BaseEntity initiator, ItemContainer container)\r\n\t{\r\n\t\tbase.DropBonusItems(initiator, container);\r\n\t\tif (initiator == null || container == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer basePlayer = initiator as BasePlayer;\r\n\t\tif (basePlayer == null || scrapAmount <= 0 || !(scrapDef != null))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = ((basePlayer.modifiers != null) ? (1f + basePlayer.modifiers.GetValue(Modifier.ModifierType.Scrap_Yield)) : 0f);\r\n\t\tif (!(num > 1f))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat variableValue = basePlayer.modifiers.GetVariableValue(Modifier.ModifierType.Scrap_Yield, 0f);\r\n\t\tfloat num2 = Mathf.Max((float)scrapAmount * num - (float)scrapAmount, 0f);\r\n\t\tvariableValue += num2;\r\n\t\tint num3 = 0;\r\n\t\tif (variableValue >= 1f)\r\n\t\t{\r\n\t\t\tnum3 = (int)variableValue;\r\n\t\t\tvariableValue -= (float)num3;\r\n\t\t}\r\n\t\tbasePlayer.modifiers.SetVariableValue(Modifier.ModifierType.Scrap_Yield, variableValue);\r\n\t\tif (num3 > 0)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(scrapDef, num3, 0uL);\r\n\t\t\tif (item != null && Interface.CallHook(\"OnBonusItemDrop\", item, basePlayer) == null)\r\n\t\t\t{\r\n\t\t\t\t(item.Drop(GetDropPosition() + new Vector3(0f, 0.5f, 0f), GetInheritedDropVelocity()) as DroppedItem).DropReason = DroppedItem.DropReasonEnum.Loot;\r\n\t\t\t\tInterface.CallHook(\"OnBonusItemDropped\", item, basePlayer);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHammerHit","Parameters":"(BasePlayer,HitInfo)","ClassName":"Hammer","MethodCode":"\r\n\tpublic override void DoAttackShared(HitInfo info)\r\n\t{\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tBaseCombatEntity baseCombatEntity = info.HitEntity as BaseCombatEntity;\r\n\t\tif (baseCombatEntity != null && ownerPlayer != null && base.isServer)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnHammerHit\", ownerPlayer, info) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tusing (TimeWarning.New(\"DoRepair\", 50))\r\n\t\t\t{\r\n\t\t\t\tbaseCombatEntity.DoRepair(ownerPlayer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tinfo.DoDecals = false;\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tEffect.server.ImpactEffect(info);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tEffect.client.ImpactEffect(info);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBuildingPrivilege","Parameters":"(BaseEntity,OBB)","ClassName":"BaseEntity","MethodCode":"\r\n\tpublic BuildingPrivlidge GetBuildingPrivilege(OBB obb)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnBuildingPrivilege\", this, obb);\r\n\t\tif (obj is BuildingPrivlidge)\r\n\t\t{\r\n\t\t\treturn (BuildingPrivlidge)obj;\r\n\t\t}\r\n\t\tBuildingBlock other = null;\r\n\t\tBuildingPrivlidge result = null;\r\n\t\tList<BuildingBlock> obj2 = Facepunch.Pool.Get<List<BuildingBlock>>();\r\n\t\tVis.Entities(obb.position, 16f + obb.extents.magnitude, obj2, 2097152);\r\n\t\tfor (int i = 0; i < obj2.Count; i++)\r\n\t\t{\r\n\t\t\tBuildingBlock buildingBlock = obj2[i];\r\n\t\t\tif (buildingBlock.isServer != base.isServer || !buildingBlock.IsOlderThan(other) || obb.Distance(buildingBlock.WorldSpaceBounds()) > 16f)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tBuildingManager.Building building = buildingBlock.GetBuilding();\r\n\t\t\tif (building != null)\r\n\t\t\t{\r\n\t\t\t\tBuildingPrivlidge dominatingBuildingPrivilege = building.GetDominatingBuildingPrivilege();\r\n\t\t\t\tif (!(dominatingBuildingPrivilege == null))\r\n\t\t\t\t{\r\n\t\t\t\t\tother = buildingBlock;\r\n\t\t\t\t\tresult = dominatingBuildingPrivilege;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnTeamAcceptInvite","Parameters":"(RelationshipManager.PlayerTeam,BasePlayer)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void acceptinvite(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (!(basePlayer == null) && basePlayer.currentTeam == 0L)\r\n\t\t{\r\n\t\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(uLong);\r\n\t\t\tif (playerTeam == null)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.ClearPendingInvite();\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnTeamAcceptInvite\", playerTeam, basePlayer) == null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam.AcceptInvite(basePlayer);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBradleyApcThink","Parameters":"(BradleyAPC)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic void DoSimpleAI()\r\n\t{\r\n\t\tif (base.isClient)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetFlag(Flags.Reserved5, TOD_Sky.Instance.IsNight);\r\n\t\tif (Interface.CallHook(\"OnBradleyApcThink\", this) != null || !DoAI)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetTarget();\r\n\t\tif (mountingScientists || inDeployedState)\r\n\t\t{\r\n\t\t\tClearPath();\r\n\t\t}\r\n\t\telse if (!IsOnSpline())\r\n\t\t{\r\n\t\t\tif (targetList.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tUpdateMovement_Hunt();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tUpdateMovement_Patrol();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!IsOnSpline())\r\n\t\t{\r\n\t\t\tAdvancePathMovement(force: false);\r\n\t\t\tfloat num = Vector3.Distance(base.transform.position, destination);\r\n\t\t\tfloat value = Vector3.Distance(base.transform.position, finalDestination);\r\n\t\t\tif (num > stoppingDist)\r\n\t\t\t{\r\n\t\t\t\tVector3 lhs = Direction2D(destination, base.transform.position);\r\n\t\t\t\tfloat num2 = Vector3.Dot(lhs, base.transform.right);\r\n\t\t\t\tfloat num3 = Vector3.Dot(lhs, base.transform.right);\r\n\t\t\t\tfloat num4 = Vector3.Dot(lhs, -base.transform.right);\r\n\t\t\t\tif (Vector3.Dot(lhs, -base.transform.forward) > num2)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (num3 >= num4)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tturning = 1f;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tturning = -1f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tturning = Mathf.Clamp(num2 * 3f, -1f, 1f);\r\n\t\t\t\t}\r\n\t\t\t\tfloat throttleScaleFromTurn = 1f - Mathf.InverseLerp(0f, 0.3f, Mathf.Abs(turning));\r\n\t\t\t\tAvoidObstacles(ref throttleScaleFromTurn);\r\n\t\t\t\tfloat num5 = Vector3.Dot(myRigidBody.velocity, base.transform.forward);\r\n\t\t\t\tif (!(throttle > 0f) || !(num5 < 0.5f))\r\n\t\t\t\t{\r\n\t\t\t\t\ttimeSinceSeemingStuck = 0f;\r\n\t\t\t\t}\r\n\t\t\t\telse if ((float)timeSinceSeemingStuck > 10f)\r\n\t\t\t\t{\r\n\t\t\t\t\ttimeSinceStuckReverseStart = 0f;\r\n\t\t\t\t\ttimeSinceSeemingStuck = 0f;\r\n\t\t\t\t}\r\n\t\t\t\tfloat num6 = Mathf.InverseLerp(0.1f, 0.4f, Vector3.Dot(base.transform.forward, Vector3.up));\r\n\t\t\t\tif ((float)timeSinceStuckReverseStart < 3f)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrottle = -0.75f;\r\n\t\t\t\t\tturning = 1f;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthrottle = (0.1f + Mathf.InverseLerp(0f, 20f, value) * 1f) * throttleScaleFromTurn + num6;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDoWeaponAiming();\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnPlayerDeath","Parameters":"(BasePlayer,HitInfo)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override void Die(HitInfo info = null)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"Player.Die\"))\r\n\t\t{\r\n\t\t\tif (!IsDead())\r\n\t\t\t{\r\n\t\t\t\tHandcuffs restraintItem = Belt.GetRestraintItem();\r\n\t\t\t\tif (restraintItem != null)\r\n\t\t\t\t{\r\n\t\t\t\t\trestraintItem.HeldWhenOwnerDied(this);\r\n\t\t\t\t}\r\n\t\t\t\tif (InGesture)\r\n\t\t\t\t{\r\n\t\t\t\t\tServer_CancelGesture();\r\n\t\t\t\t}\r\n\t\t\t\tif (Belt != null && ShouldDropActiveItem())\r\n\t\t\t\t{\r\n\t\t\t\t\tVector3 vector = new Vector3(UnityEngine.Random.Range(-2f, 2f), 0.2f, UnityEngine.Random.Range(-2f, 2f));\r\n\t\t\t\t\tBelt.DropActive(GetDropPosition(), GetInheritedDropVelocity() + vector.normalized * 3f);\r\n\t\t\t\t\tinventory.DropBackpackOnDeath();\r\n\t\t\t\t}\r\n\t\t\t\tif (!WoundInsteadOfDying(info) && Interface.CallHook(\"OnPlayerDeath\", this, info) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tSleepingBag.OnPlayerDeath(this);\r\n\t\t\t\t\tbase.Die(info);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVendingShopOpened","Parameters":"(VendingMachine,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_OpenShop(RPCMessage msg)\r\n\t{\r\n\t\tif (OccupiedCheck(msg.player) && Interface.CallHook(\"OnVendingShopOpen\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\tOpenShop(msg.player);\r\n\t\t\tInterface.CallHook(\"OnVendingShopOpened\", this, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootEntity","Parameters":"(BasePlayer,BaseEntity)","ClassName":"PlayerLoot","MethodCode":"\r\n\tpublic bool StartLootingEntity(BaseEntity targetEntity, bool doPositionChecks = true)\r\n\t{\r\n\t\tClear();\r\n\t\tif (!targetEntity)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!targetEntity.OnStartBeingLooted(base.baseEntity))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tAssert.IsTrue(targetEntity.isServer, \"Assure is server\");\r\n\t\tPositionChecks = doPositionChecks;\r\n\t\tentitySource = targetEntity;\r\n\t\titemSource = null;\r\n\t\tInterface.CallHook(\"OnLootEntity\", GetComponent<BasePlayer>(), targetEntity);\r\n\t\tMarkDirty();\r\n\t\tif (targetEntity is ILootableEntity lootableEntity)\r\n\t\t{\r\n\t\t\tlootableEntity.LastLootedBy = base.baseEntity.userID;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnMissionFailed","Parameters":"(BaseMission,BaseMission.MissionInstance,BasePlayer,BaseMission.MissionFailReason)","ClassName":"BaseMission","MethodCode":"\r\n\tpublic virtual void MissionFailed(MissionInstance instance, BasePlayer assignee, MissionFailReason failReason)\r\n\t{\r\n\t\tif (!instance.GetMission().completeSilently)\r\n\t\t{\r\n\t\t\tassignee.ChatMessage(\"You have failed the mission : \" + missionName.english);\r\n\t\t}\r\n\t\tDoMissionEffect(failedEffect.resourcePath, assignee);\r\n\t\tFacepunch.Rust.Analytics.Server.MissionFailed(this, failReason);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnMissionComplete(assignee, this, failReason);\r\n\t\tinstance.status = MissionStatus.Failed;\r\n\t\tMissionEnded(instance, assignee);\r\n\t\tInterface.CallHook(\"OnMissionFailed\", this, instance, assignee, failReason);\r\n\t}\r\n"},{"Name":"OnReactiveTargetReset","Parameters":"(ReactiveTarget)","ClassName":"ReactiveTarget","MethodCode":"\r\n\tpublic void ResetTarget()\r\n\t{\r\n\t\tif (IsLowered() && CanToggle() && CanReset())\r\n\t\t{\r\n\t\t\tCancelInvoke(ResetTarget);\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tSetFlag(Flags.Reserved1, b: false);\r\n\t\t\tknockdownHealth = 100f;\r\n\t\t\tSendPowerBurst();\r\n\t\t\tInterface.CallHook(\"OnReactiveTargetReset\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanDeployScientists","Parameters":"(BradleyAPC,BaseEntity,System.Collections.Generic.List<GameObjectRef>,System.Collections.Generic.List<UnityEngine.Vector3>)","ClassName":"BradleyAPC","MethodCode":"\r\n\tprivate bool CanDeployScientists(BaseEntity attacker, List<GameObjectRef> scientistPrefabs, List<Vector3> spawnPositions)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanDeployScientists\", this, attacker, scientistPrefabs, spawnPositions);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tint count = scientistPrefabs.Count;\r\n\t\tif (!inDeployedState && Vector3.Distance(attacker.transform.position, base.transform.position) > DeployAttackDistanceMax)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tspawnPositions.Clear();\r\n\t\tbool flag = false;\r\n\t\tint num = 0;\r\n\t\tint num2 = 0;\r\n\t\tint layerMask = 8454144;\r\n\t\twhile (!flag)\r\n\t\t{\r\n\t\t\tif (UnityEngine.Physics.Raycast(ScientistSpawnPoints[num2 % ScientistSpawnPoints.Count].transform.position + Vector3.up * 1f, Vector3.down, out var hitInfo, 2f, layerMask) && NavMesh.SamplePosition(hitInfo.point + Vector3.up * 0.3f, out var _, 6f, walkableAreaMask))\r\n\t\t\t{\r\n\t\t\t\tspawnPositions.Add(hitInfo.point + Vector3.up * 0.1f);\r\n\t\t\t\tnum2++;\r\n\t\t\t\tif (num2 >= count)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnum++;\r\n\t\t\t\tif (num > count * 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn !flag;\r\n\t}\r\n"},{"Name":"OnTeamInvite","Parameters":"(BasePlayer,BasePlayer)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void sendinvite(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(basePlayer.currentTeam);\r\n\t\tif (playerTeam == null || playerTeam.GetLeader() == null || playerTeam.GetLeader() != basePlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\tif (uLong == 0L)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer basePlayer2 = BaseNetworkable.serverEntities.Find(new NetworkableId(uLong)) as BasePlayer;\r\n\t\tif ((bool)basePlayer2 && basePlayer2 != basePlayer && !basePlayer2.IsNpc && basePlayer2.currentTeam == 0L)\r\n\t\t{\r\n\t\t\tfloat num = 7f;\r\n\t\t\tif (!(Vector3.Distance(basePlayer2.transform.position, basePlayer.transform.position) > num) && Interface.CallHook(\"OnTeamInvite\", basePlayer, basePlayer2) == null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam.SendInvite(basePlayer2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerLanded","Parameters":"(BasePlayer,float)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void ApplyFallDamageFromVelocity(float velocity)\r\n\t{\r\n\t\tif (IsGod())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = Mathf.InverseLerp(-15f, -100f, velocity);\r\n\t\tif (num != 0f && Interface.CallHook(\"OnPlayerLand\", this, num) == null)\r\n\t\t{\r\n\t\t\tmetabolism.bleeding.Add(num * 0.5f);\r\n\t\t\tfloat num2 = num * 500f;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnFallDamage(this, velocity, num2);\r\n\t\t\tHurt(num2, DamageType.Fall);\r\n\t\t\tif (num2 > 20f && fallDamageEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(fallDamageEffect.resourcePath, base.transform.position, Vector3.zero);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnPlayerLanded\", this, num);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerSetInfo","Parameters":"(Network.Connection,string,string)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual void SetInfo(string key, string val)\r\n\t{\r\n\t\tif (IsConnected)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerSetInfo\", net.connection, key, val);\r\n\t\t\tnet.connection.info.Set(key, val);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStructureDemolish","Parameters":"(StabilityEntity,BasePlayer,bool)","ClassName":"StabilityEntity","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server]\r\n\tpublic void DoDemolish(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && CanDemolish(msg.player) && Interface.CallHook(\"OnStructureDemolish\", this, msg.player, false) == null)\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnBuildingBlockDemolished(msg.player, this);\r\n\t\t\tKill(DestroyMode.Gib);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityStabilityCheck","Parameters":"(StabilityEntity)","ClassName":"StabilityEntity","MethodCode":"\r\n\tpublic virtual void StabilityCheck()\r\n\t{\r\n\t\tif (base.IsDestroyed || Interface.CallHook(\"OnEntityStabilityCheck\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (supports == null)\r\n\t\t{\r\n\t\t\tInitializeSupports();\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tint num = DistanceFromGround();\r\n\t\tif (num != cachedDistanceFromGround)\r\n\t\t{\r\n\t\t\tcachedDistanceFromGround = num;\r\n\t\t\tflag = true;\r\n\t\t}\r\n\t\tfloat num2 = SupportValue();\r\n\t\tif (Mathf.Abs(cachedStability - num2) > Stability.accuracy)\r\n\t\t{\r\n\t\t\tcachedStability = num2;\r\n\t\t\tflag = true;\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tdirty = true;\r\n\t\t\tUpdateConnectedEntities();\r\n\t\t\tUpdateStability();\r\n\t\t}\r\n\t\telse if (dirty)\r\n\t\t{\r\n\t\t\tdirty = false;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t\tif (num2 < Stability.collapse)\r\n\t\t{\r\n\t\t\tif (stabilityStrikes < Stability.strikes)\r\n\t\t\t{\r\n\t\t\t\tUpdateStability();\r\n\t\t\t\tstabilityStrikes++;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tKill(DestroyMode.Gib);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstabilityStrikes = 0;\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanSetBedPublic","Parameters":"(BasePlayer,SleepingBag)","ClassName":"SleepingBag","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic virtual void RPC_MakePublic(RPCMessage msg)\r\n\t{\r\n\t\tif (!canBePublic || !msg.player.CanInteract() || (deployerUserID != (ulong)msg.player.userID && !msg.player.CanBuild()))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = msg.read.Bit();\r\n\t\tif (flag == IsPublic() || Interface.CallHook(\"CanSetBedPublic\", msg.player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetPublic(flag);\r\n\t\tif (!IsPublic())\r\n\t\t{\r\n\t\t\tif (ConVar.Server.max_sleeping_bags > 0)\r\n\t\t\t{\r\n\t\t\t\tCanAssignBedResult? canAssignBedResult = CanAssignBed(msg.player, this, msg.player.userID, 1, 0, this);\r\n\t\t\t\tif (canAssignBedResult.HasValue)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (canAssignBedResult.Value.Result == BagResultType.Ok)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Blue_Long, bagLimitPhrase, false, canAssignBedResult.Value.Count.ToString(), canAssignBedResult.Value.Max.ToString());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Blue_Long, cannotMakeBedPhrase, false, canAssignBedResult.Value.Count.ToString(), canAssignBedResult.Value.Max.ToString());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (canAssignBedResult.Value.Result != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tulong num = deployerUserID;\r\n\t\t\tdeployerUserID = msg.player.userID;\r\n\t\t\tNotifyPlayer(num);\r\n\t\t\tNotifyPlayer(deployerUserID);\r\n\t\t\tOnBagChangedOwnership(this, num);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnSleepingBagAssigned(msg.player, this, deployerUserID = msg.player.userID);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnSleepingBagAssigned(msg.player, this, 0uL);\r\n\t\t}\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnPatrolHelicopterKill","Parameters":"(PatrolHelicopter,HitInfo)","ClassName":"PatrolHelicopter","MethodCode":"\r\n\tpublic override void Hurt(HitInfo info)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPatrolHelicopterTakeDamage\", this, info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tif (info.damageTypes.Total() >= base.health)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnPatrolHelicopterKill\", this, info) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbase.health = 10000f;\r\n\t\t\tmyAI.CriticalDamage();\r\n\t\t\tflag = true;\r\n\t\t}\r\n\t\tbase.Hurt(info);\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tmyAI.OtherDamaged(info);\r\n\t\tweakspot[] array = weakspots;\r\n\t\tforeach (weakspot weakspot in array)\r\n\t\t{\r\n\t\t\tstring[] bonenames = weakspot.bonenames;\r\n\t\t\tforeach (string str in bonenames)\r\n\t\t\t{\r\n\t\t\t\tif (info.HitBone == StringPool.Get(str))\r\n\t\t\t\t{\r\n\t\t\t\t\tweakspot.Hurt(info.damageTypes.Total(), info);\r\n\t\t\t\t\tmyAI.WeakspotDamaged(weakspot, info);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRespawnInformationGiven","Parameters":"(BasePlayer,System.Collections.Generic.List<ProtoBuf.RespawnInformation.SpawnOptions>)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void SendRespawnOptions()\r\n\t{\r\n\t\tif (NexusServer.Started && ZoneController.Instance.CanRespawnAcrossZones(this))\r\n\t\t{\r\n\t\t\tCollectExternalAndSend();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<RespawnInformation.SpawnOptions> list = Facepunch.Pool.Get<List<RespawnInformation.SpawnOptions>>();\r\n\t\tGetRespawnOptionsForPlayer(list, userID);\r\n\t\tInterface.CallHook(\"OnRespawnInformationGiven\", this, list);\r\n\t\tSendToPlayer(list, loading: false);\r\n\t\tasync void CollectExternalAndSend()\r\n\t\t{\r\n\t\t\tList<RespawnInformation.SpawnOptions> list2 = Facepunch.Pool.Get<List<RespawnInformation.SpawnOptions>>();\r\n\t\t\tGetRespawnOptionsForPlayer(list2, userID);\r\n\t\t\tList<RespawnInformation.SpawnOptions> allSpawnOptions = Facepunch.Pool.Get<List<RespawnInformation.SpawnOptions>>();\r\n\t\t\tforeach (RespawnInformation.SpawnOptions item in list2)\r\n\t\t\t{\r\n\t\t\t\tallSpawnOptions.Add(item.Copy());\r\n\t\t\t}\r\n\t\t\tSendToPlayer(list2, loading: true);\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tRequest request = Facepunch.Pool.Get<Request>();\r\n\t\t\t\trequest.spawnOptions = Facepunch.Pool.Get<SpawnOptionsRequest>();\r\n\t\t\t\trequest.spawnOptions.userId = userID;\r\n\t\t\t\tusing (NexusRpcResult nexusRpcResult = await NexusServer.BroadcastRpc(request, 10f))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (KeyValuePair<string, Response> response in nexusRpcResult.Responses)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring key = response.Key;\r\n\t\t\t\t\t\tSpawnOptionsResponse spawnOptions2 = response.Value.spawnOptions;\r\n\t\t\t\t\t\tif (spawnOptions2 != null && spawnOptions2.spawnOptions.Count != 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tforeach (RespawnInformation.SpawnOptions spawnOption in spawnOptions2.spawnOptions)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tRespawnInformation.SpawnOptions spawnOptions3 = spawnOption.Copy();\r\n\t\t\t\t\t\t\t\tspawnOptions3.nexusZone = key;\r\n\t\t\t\t\t\t\t\tallSpawnOptions.Add(spawnOptions3);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tSendToPlayer(allSpawnOptions, loading: false);\r\n\t\t\t}\r\n\t\t\tcatch (Exception exception)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogException(exception);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvoid SendToPlayer(List<RespawnInformation.SpawnOptions> spawnOptions, bool loading)\r\n\t\t{\r\n\t\t\tusing RespawnInformation respawnInformation = Facepunch.Pool.Get<RespawnInformation>();\r\n\t\t\trespawnInformation.spawnOptions = spawnOptions;\r\n\t\t\trespawnInformation.loading = loading;\r\n\t\t\tif (ConVar.Server.max_shelters == LegacyShelter.FpShelterDefault && LegacyShelter.SheltersPerPlayer.ContainsKey(userID) && LegacyShelter.SheltersPerPlayer[userID].Count > 0)\r\n\t\t\t{\r\n\t\t\t\trespawnInformation.shelterPositions = Facepunch.Pool.Get<List<Vector3>>();\r\n\t\t\t\tforeach (LegacyShelter item2 in LegacyShelter.SheltersPerPlayer[userID])\r\n\t\t\t\t{\r\n\t\t\t\t\trespawnInformation.shelterPositions.Add(item2.transform.position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (IsDead())\r\n\t\t\t{\r\n\t\t\t\trespawnInformation.previousLife = previousLifeStory;\r\n\t\t\t\tif (!ConVar.Server.skipDeathScreenFade)\r\n\t\t\t\t{\r\n\t\t\t\t\trespawnInformation.fadeIn = previousLifeStory != null && previousLifeStory.timeDied > Epoch.Current - 5;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\trespawnInformation.fadeIn = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tClientRPC(RpcTarget.Player(\"OnRespawnInformation\", this), respawnInformation);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerWantsDismount","Parameters":"(BasePlayer,BaseMountable)","ClassName":"BaseMountable","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void RPC_WantsDismount(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!HasValidDismountPosition(player))\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerDismountFailed\", player, this);\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnPlayerWantsDismount\", player, this) == null && (!(player != null) || !player.IsRestrained))\r\n\t\t{\r\n\t\t\tAttemptDismount(player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFuelAmountCheck","Parameters":"(EntityFuelSystem,Item)","ClassName":"EntityFuelSystem","MethodCode":"\r\n\tpublic int GetFuelAmount()\r\n\t{\r\n\t\tItem fuelItem = GetFuelItem();\r\n\t\tobject obj = Interface.CallHook(\"OnFuelAmountCheck\", this, fuelItem);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\tif (fuelItem == null || fuelItem.amount < 1)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn fuelItem.amount;\r\n\t}\r\n"},{"Name":"OnWeaponFired","Parameters":"(BaseProjectile,BasePlayer,ItemModProjectile,ProtoBuf.ProjectileShoot)","ClassName":"BaseProjectile","MethodCode":"\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server]\r\n\tprivate void CLProject(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!VerifyClientAttack(player))\r\n\t\t{\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (reloadFinished && HasReloadCooldown())\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Reloading (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"reload_cooldown\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treloadStarted = false;\r\n\t\treloadFinished = false;\r\n\t\tif (primaryMagazine.contents <= 0 && !base.UsingInfiniteAmmoCheat)\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Magazine empty (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"ammo_missing\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition primaryMagazineAmmo = PrimaryMagazineAmmo;\r\n\t\tProjectileShoot projectileShoot = ProjectileShoot.Deserialize(msg.read);\r\n\t\tif (primaryMagazineAmmo.itemid != projectileShoot.ammoType)\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Ammo mismatch (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"ammo_mismatch\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!base.UsingInfiniteAmmoCheat)\r\n\t\t{\r\n\t\t\tModifyAmmoCount(-1);\r\n\t\t}\r\n\t\tItemModProjectile component = primaryMagazineAmmo.GetComponent<ItemModProjectile>();\r\n\t\tif (component == null)\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Item mod not found (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"mod_missing\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (projectileShoot.projectiles.Count > component.numProjectiles)\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Count mismatch (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"count_mismatch\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnWeaponFired\", this, msg.player, component, projectileShoot);\r\n\t\tif (player.InGesture)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSignalBroadcast(Signal.Attack, string.Empty, msg.connection, GetAttackEffect());\r\n\t\tplayer.CleanupExpiredProjectiles();\r\n\t\tGuid projectileGroupId = Guid.NewGuid();\r\n\t\tforeach (ProjectileShoot.Projectile projectile in projectileShoot.projectiles)\r\n\t\t{\r\n\t\t\tif (player.HasFiredProjectile(projectile.projectileID))\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Duplicate ID (\" + projectile.projectileID + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"duplicate_id\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tVector3 positionOffset = Vector3.zero;\r\n\t\t\tif (ConVar.AntiHack.projectile_positionoffset && (player.isMounted || player.HasParent()))\r\n\t\t\t{\r\n\t\t\t\tif (!ValidateEyePos(player, projectile.startPos, checkLineOfSight: false))\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tVector3 position = player.eyes.position;\r\n\t\t\t\tpositionOffset = position - projectile.startPos;\r\n\t\t\t\tprojectile.startPos = position;\r\n\t\t\t}\r\n\t\t\telse if (!ValidateEyePos(player, projectile.startPos))\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tplayer.NoteFiredProjectile(projectile.projectileID, projectile.startPos, projectile.startVel, this, primaryMagazineAmmo, projectileGroupId, positionOffset);\r\n\t\t\tif (!player.limitNetworking)\r\n\t\t\t{\r\n\t\t\t\tCreateProjectileEffectClientside(component.projectileObject.resourcePath, projectile.startPos, projectile.startVel, projectile.seed, msg.connection, IsSilenced());\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayer.MakeNoise(player.transform.position, BaseCombatEntity.ActionVolume.Loud);\r\n\t\tplayer.stats.Add(component.category + \"_fired\", projectileShoot.projectiles.Count(), (Stats)5);\r\n\t\tplayer.LifeStoryShotFired(this);\r\n\t\tStartAttackCooldown(ScaleRepeatDelay(repeatDelay) + animationDelay);\r\n\t\tplayer.MarkHostileFor();\r\n\t\tUpdateItemCondition();\r\n\t\tDidAttackServerside();\r\n\t\tfloat num = 0f;\r\n\t\tif (component.projectileObject != null)\r\n\t\t{\r\n\t\t\tGameObject gameObject = component.projectileObject.Get();\r\n\t\t\tif (gameObject != null)\r\n\t\t\t{\r\n\t\t\t\tProjectile component2 = gameObject.GetComponent<Projectile>();\r\n\t\t\t\tif (component2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (DamageTypeEntry damageType in component2.damageTypes)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum += damageType.amount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tBaseMountable mounted = player.GetMounted();\r\n\t\tif (mounted != null)\r\n\t\t{\r\n\t\t\tmounted.OnWeaponFired(this);\r\n\t\t}\r\n\t\tEACServer.LogPlayerUseWeapon(player, this);\r\n\t}\r\n"},{"Name":"OnSamSiteTarget","Parameters":"(SamSite,SamSite.ISamSiteTarget)","ClassName":"SamSite","MethodCode":"\r\n\tpublic void TargetScan()\r\n\t{\r\n\t\tif (!IsPowered())\r\n\t\t{\r\n\t\t\tlastTargetVisibleTime = 0f;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (UnityEngine.Time.time > lastTargetVisibleTime + 3f)\r\n\t\t{\r\n\t\t\tClearTarget();\r\n\t\t}\r\n\t\tif (!staticRespawn)\r\n\t\t{\r\n\t\t\tint num = ((ammoItem != null && ammoItem.parent == base.inventory) ? ammoItem.amount : 0);\r\n\t\t\tbool flag = lastAmmoCount < lowAmmoThreshold;\r\n\t\t\tbool flag2 = num < lowAmmoThreshold;\r\n\t\t\tif (num != lastAmmoCount && flag != flag2)\r\n\t\t\t{\r\n\t\t\t\tMarkIODirty();\r\n\t\t\t}\r\n\t\t\tlastAmmoCount = num;\r\n\t\t}\r\n\t\tif (HasValidTarget() || IsDead())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<ISamSiteTarget> obj = Facepunch.Pool.Get<List<ISamSiteTarget>>();\r\n\t\tif (Interface.CallHook(\"OnSamSiteTargetScan\", this, obj) == null)\r\n\t\t{\r\n\t\t\tif (!IsInDefenderMode())\r\n\t\t\t{\r\n\t\t\t\tAddTargetSet(obj, targetTypeVehicle.scanRadius);\r\n\t\t\t}\r\n\t\t\tAddMLRSRockets(obj, targetTypeMissile.scanRadius);\r\n\t\t}\r\n\t\tISamSiteTarget samSiteTarget = null;\r\n\t\tforeach (ISamSiteTarget item in obj)\r\n\t\t{\r\n\t\t\tif (!item.isClient && !(item.CenterPoint().y < eyePoint.transform.position.y) && item.IsVisible(eyePoint.transform.position, item.SAMTargetType.scanRadius * 2f) && item.IsValidSAMTarget(staticRespawn) && Interface.CallHook(\"OnSamSiteTarget\", this, item) == null)\r\n\t\t\t{\r\n\t\t\t\tsamSiteTarget = item;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!ObjectEx.IsUnityNull(samSiteTarget) && currentTarget != samSiteTarget)\r\n\t\t{\r\n\t\t\tlockOnTime = UnityEngine.Time.time + 0.5f;\r\n\t\t}\r\n\t\tSetTarget(samSiteTarget);\r\n\t\tif (!ObjectEx.IsUnityNull(currentTarget))\r\n\t\t{\r\n\t\t\tlastTargetVisibleTime = UnityEngine.Time.time;\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\tif (ObjectEx.IsUnityNull(currentTarget))\r\n\t\t{\r\n\t\t\tCancelInvoke(WeaponTick);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tInvokeRandomized(WeaponTick, 0f, 0.5f, 0.2f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemRemove","Parameters":"(Item)","ClassName":"Item","MethodCode":"\r\n\tpublic void Remove(float fTime = 0f)\r\n\t{\r\n\t\tif (removeTime > 0f || Interface.CallHook(\"OnItemRemove\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (isServer)\r\n\t\t{\r\n\t\t\tItemMod[] itemMods = info.itemMods;\r\n\t\t\tfor (int i = 0; i < itemMods.Length; i++)\r\n\t\t\t{\r\n\t\t\t\titemMods[i].OnRemove(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.onCycle = null;\r\n\t\tremoveTime = UnityEngine.Time.time + fTime;\r\n\t\tthis.OnDirty = null;\r\n\t\tposition = -1;\r\n\t\tItemManager.RemoveItem(this, fTime);\r\n\t}\r\n"},{"Name":"OnSignUpdated","Parameters":"(Signage,BasePlayer,int)","ClassName":"Signage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\t[RPC_Server.MaxDistance(5f)]\r\n\tpublic void UpdateSign(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player == null || !CanUpdateSign(msg.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = msg.read.Int32();\r\n\t\tif (num < 0 || num >= paintableSources.Length)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbyte[] array = msg.read.BytesWithSize();\r\n\t\tif (msg.read.Unread > 0 && msg.read.Bit() && !msg.player.IsAdmin)\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.LogWarning($\"{msg.player} tried to upload a sign from a file but they aren't admin, ignoring\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tEnsureInitialized();\r\n\t\tif (array == null)\r\n\t\t{\r\n\t\t\tif (textureIDs[num] != 0)\r\n\t\t\t{\r\n\t\t\t\tFileStorage.server.RemoveExact(textureIDs[num], FileStorage.Type.png, net.ID, (uint)num);\r\n\t\t\t}\r\n\t\t\ttextureIDs[num] = 0u;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!ImageProcessing.IsValidPNG(array, 1024, 1024))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (textureIDs[num] != 0)\r\n\t\t\t{\r\n\t\t\t\tFileStorage.server.RemoveExact(textureIDs[num], FileStorage.Type.png, net.ID, (uint)num);\r\n\t\t\t}\r\n\t\t\ttextureIDs[num] = FileStorage.server.Store(array, FileStorage.Type.png, net.ID, (uint)num);\r\n\t\t}\r\n\t\tLogEdit(msg.player);\r\n\t\tSendNetworkUpdate();\r\n\t\tInterface.CallHook(\"OnSignUpdated\", this, msg.player, num);\r\n\t}\r\n"},{"Name":"OnInventoryAmmoItemFind","Parameters":"(PlayerInventory,ItemDefinition)","ClassName":"Chainsaw","MethodCode":"\r\n\tpublic Item GetAmmo()\r\n\t{\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnInventoryAmmoItemFind\", ownerPlayer.inventory, fuelType);\r\n\t\tif (obj is Item)\r\n\t\t{\r\n\t\t\treturn (Item)obj;\r\n\t\t}\r\n\t\treturn ownerPlayer.inventory.FindItemByItemName(fuelType.shortname);\r\n\t}\r\n"},{"Name":"OnNoGoZoneAdded","Parameters":"(PatrolHelicopterAI,PatrolHelicopterAI.DangerZone)","ClassName":"PatrolHelicopterAI","MethodCode":"\r\n\tprivate void NoGoZoneAdded(DangerZone zone)\r\n\t{\r\n\t\tif (use_danger_zones && Interface.CallHook(\"OnNoGoZoneAdded\", this, zone) == null && zone.IsPointInside(base.transform.position))\r\n\t\t{\r\n\t\t\t_targetList.Clear();\r\n\t\t\tExitCurrentState();\r\n\t\t\tVector3 nearestEdge = zone.GetNearestEdge(base.transform.position);\r\n\t\t\tnearestEdge.y = UnityEngine.Random.Range(35f, 45f);\r\n\t\t\tState_Flee_Enter(nearestEdge);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDieselEngineToggle","Parameters":"(DieselEngine,BasePlayer)","ClassName":"DieselEngine","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(6f)]\r\n\tpublic void EngineSwitch(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnDieselEngineToggle\", this, msg.player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (msg.read.Bit())\r\n\t\t{\r\n\t\t\tif (GetFuelAmount() > 0)\r\n\t\t\t{\r\n\t\t\t\tEngineOn();\r\n\t\t\t\tstartedByPlayer = msg.player;\r\n\t\t\t\tif (Rust.GameInfo.HasAchievements && msg.player != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.player.stats.Add(\"excavator_activated\", 1, Stats.All);\r\n\t\t\t\t\tmsg.player.stats.Save(forceSteamSave: true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tEngineOff();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootItem","Parameters":"(BasePlayer,Item)","ClassName":"PlayerLoot","MethodCode":"\r\n\tpublic void StartLootingItem(Item item)\r\n\t{\r\n\t\tClear();\r\n\t\tif (item != null && item.contents != null)\r\n\t\t{\r\n\t\t\tPositionChecks = true;\r\n\t\t\tcontainers.Add(item.contents);\r\n\t\t\titem.contents.onDirty += MarkDirty;\r\n\t\t\titemSource = item;\r\n\t\t\tentitySource = item.GetWorldEntity();\r\n\t\t\tInterface.CallHook(\"OnLootItem\", GetComponent<BasePlayer>(), item);\r\n\t\t\tMarkDirty();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlanterBoxFertilize","Parameters":"(PlanterBox)","ClassName":"PlanterBox","MethodCode":"\r\n\tpublic void FertilizeGrowables()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlanterBoxFertilize\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = GetFertilizerCount();\r\n\t\tif (num <= 0)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (BaseEntity child in children)\r\n\t\t{\r\n\t\t\tif (child == null)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tGrowableEntity growableEntity = child as GrowableEntity;\r\n\t\t\tif (!(growableEntity == null) && !growableEntity.Fertilized && ConsumeFertilizer())\r\n\t\t\t{\r\n\t\t\t\tgrowableEntity.Fertilize();\r\n\t\t\t\tnum--;\r\n\t\t\t\tif (num == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVendingShopOpened","Parameters":"(NPCVendingMachine,BasePlayer)","ClassName":"TravellingVendor","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void SV_OpenMenu(RPCMessage msg)\r\n\t{\r\n\t\tif (vendingMachine == null)\r\n\t\t{\r\n\t\t\tvendingMachine = GetComponentInChildren<NPCVendingMachine>();\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnVendingShopOpen\", vendingMachine, msg.player) == null)\r\n\t\t{\r\n\t\t\tvendingMachine.OpenShop(msg.player);\r\n\t\t\tInterface.CallHook(\"OnVendingShopOpened\", vendingMachine, msg.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerTick","Parameters":"(BasePlayer,PlayerTick,bool)","ClassName":"BasePlayer","MethodCode":"\r\n\tprivate void OnReceiveTick(PlayerTick msg, bool wasPlayerStalled)\r\n\t{\r\n\t\tif (msg.inputState != null)\r\n\t\t{\r\n\t\t\tserverInput.Flip(msg.inputState);\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnPlayerTick\", this, msg, wasPlayerStalled) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (serverInput.current.buttons != serverInput.previous.buttons)\r\n\t\t{\r\n\t\t\tResetInputIdleTime();\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnPlayerInput\", this, serverInput) != null || IsReceivingSnapshot)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (IsSpectating())\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"Tick_Spectator\"))\r\n\t\t\t{\r\n\t\t\t\tTick_Spectator();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (IsDead())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (IsSleeping())\r\n\t\t{\r\n\t\t\tif (serverInput.WasJustPressed(BUTTON.FIRE_PRIMARY) || serverInput.WasJustPressed(BUTTON.FIRE_SECONDARY) || serverInput.WasJustPressed(BUTTON.JUMP) || serverInput.WasJustPressed(BUTTON.DUCK))\r\n\t\t\t{\r\n\t\t\t\tEndSleeping();\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t}\r\n\t\t\tUpdateActiveItem(default(ItemId));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (IsRestrained && restraintItemId.HasValue && restraintItemId.HasValue)\r\n\t\t{\r\n\t\t\tUpdateActiveItem(restraintItemId.Value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tUpdateActiveItem(msg.activeItem);\r\n\t\t}\r\n\t\tUpdateModelStateFromTick(msg);\r\n\t\tif (IsIncapacitated())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (isMounted)\r\n\t\t{\r\n\t\t\tGetMounted().PlayerServerInput(serverInput, this);\r\n\t\t}\r\n\t\tUpdatePositionFromTick(msg, wasPlayerStalled);\r\n\t\tUpdateRotationFromTick(msg);\r\n\t\tint activeMission = GetActiveMission();\r\n\t\tif (activeMission >= 0 && activeMission < missions.Count)\r\n\t\t{\r\n\t\t\tBaseMission.MissionInstance missionInstance = missions[activeMission];\r\n\t\t\tif (missionInstance.status == BaseMission.MissionStatus.Active && missionInstance.NeedsPlayerInput())\r\n\t\t\t{\r\n\t\t\t\tProcessMissionEvent(BaseMission.MissionEventType.PLAYER_TICK, net.ID, 0f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (TutorialIsland.EnforceTrespassChecks && !IsAdmin && !IsNpc && net != null && net.group != null)\r\n\t\t{\r\n\t\t\tif (net.group.restricted)\r\n\t\t\t{\r\n\t\t\t\tbool flag = false;\r\n\t\t\t\tif (!IsInTutorial)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tTutorialIsland currentTutorialIsland = GetCurrentTutorialIsland();\r\n\t\t\t\t\tif (currentTutorialIsland == null || currentTutorialIsland.net.group != net.group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (flag)\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime += UnityEngine.Time.deltaTime;\r\n\t\t\t\t\tif (tutorialKickTime > 3f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebug.LogWarning($\"Killing player {displayName}/{userID.Get()} as they are on a tutorial island that doesn't belong them\");\r\n\t\t\t\t\t\tHurt(999f);\r\n\t\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (IsInTutorial && !net.group.restricted)\r\n\t\t\t{\r\n\t\t\t\tbool flag2 = false;\r\n\t\t\t\tTutorialIsland currentTutorialIsland2 = GetCurrentTutorialIsland();\r\n\t\t\t\tif (currentTutorialIsland2 == null || currentTutorialIsland2.net.group != net.group)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag2 = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (flag2)\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime += UnityEngine.Time.deltaTime;\r\n\t\t\t\t\tif (tutorialKickTime > 3f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebug.LogWarning($\"Killing player {displayName}/{userID.Get()} as they are no longer on a tutorial island and are marked as being in a tutorial\");\r\n\t\t\t\t\t\tHurt(999f);\r\n\t\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttutorialKickTime = 0f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"AnalyticsTick\"))\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnPlayerTick(this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFishingStopped","Parameters":"(BaseFishingRod,BaseFishingRod.FailReason)","ClassName":"BaseFishingRod","MethodCode":"\r\n\tprivate void Server_Cancel(FailReason reason)\r\n\t{\r\n\t\tif (GetItem() != null)\r\n\t\t{\r\n\t\t\tGetItem().LoseCondition((reason == FailReason.Success) ? ConditionLossOnSuccess : ConditionLossOnFail);\r\n\t\t}\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tUpdateFlags();\r\n\t\tCancelInvoke(CatchProcess);\r\n\t\tCurrentState = CatchState.None;\r\n\t\tSetFlag(Flags.Reserved1, b: false);\r\n\t\tFishingBobber fishingBobber = currentBobber.Get(serverside: true);\r\n\t\tif (fishingBobber != null)\r\n\t\t{\r\n\t\t\tfishingBobber.Kill();\r\n\t\t\tcurrentBobber.Set(null);\r\n\t\t}\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ResetLine\"), (int)reason);\r\n\t\tInterface.CallHook(\"OnFishingStopped\", this, reason);\r\n\t}\r\n"},{"Name":"OnBoomboxStationUpdated","Parameters":"(BoomBox,string,BasePlayer)","ClassName":"BoomBox","MethodCode":"\r\n\tpublic void Server_UpdateRadioIP(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tstring text = msg.read.String();\r\n\t\tif (Interface.CallHook(\"OnBoomboxStationUpdate\", this, text, msg.player) == null && IsStationValid(text))\r\n\t\t{\r\n\t\t\tif (msg.player != null)\r\n\t\t\t{\r\n\t\t\t\tulong assignedRadioBy = msg.player.userID.Get();\r\n\t\t\t\tAssignedRadioBy = assignedRadioBy;\r\n\t\t\t}\r\n\t\t\tCurrentRadioIp = text;\r\n\t\t\tbase.baseEntity.ClientRPC(RpcTarget.NetworkGroup(\"OnRadioIPChanged\"), CurrentRadioIp);\r\n\t\t\tInterface.CallHook(\"OnBoomboxStationUpdated\", this, text, msg.player);\r\n\t\t\tif (IsOn())\r\n\t\t\t{\r\n\t\t\t\tServerTogglePlay(play: false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemRemovedFromContainer","Parameters":"(ItemContainer,Item)","ClassName":"ItemContainer","MethodCode":"\r\n\tpublic bool Remove(Item item)\r\n\t{\r\n\t\tif (!itemList.Contains(item))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tonPreItemRemove?.Invoke(item);\r\n\t\titemList.Remove(item);\r\n\t\titem.parent = null;\r\n\t\tonItemParentChanged?.Invoke(parent, item);\r\n\t\tonItemAddedRemoved?.Invoke(item, arg2: false);\r\n\t\tMarkDirty();\r\n\t\tInterface.CallHook(\"OnItemRemovedFromContainer\", this, item);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnMlrsFiringEnded","Parameters":"(MLRS)","ClassName":"MLRS","MethodCode":"\r\n\tpublic void EndFiring()\r\n\t{\r\n\t\tCancelInvoke(FireNextRocket);\r\n\t\trocketOwnerRef.Set(null);\r\n\t\tif (TryGetAimingModule(out var item))\r\n\t\t{\r\n\t\t\titem.LoseCondition(1f);\r\n\t\t}\r\n\t\tSetFlag(Flags.Reserved6, b: false, recursive: false, networkupdate: false);\r\n\t\tSetFlag(Flags.Broken, b: true, recursive: false, networkupdate: false);\r\n\t\tSendNetworkUpdate_Flags();\r\n\t\ttimeSinceBroken = 0f;\r\n\t\tInterface.CallHook(\"OnMlrsFiringEnded\", this);\r\n\t}\r\n"},{"Name":"IOnLoseCondition","Parameters":"(Item,float)","ClassName":"Item","MethodCode":"\r\n\tpublic void LoseCondition(float amount)\r\n\t{\r\n\t\tif (hasCondition && !Debugging.disablecondition && Interface.CallHook(\"IOnLoseCondition\", this, amount) == null)\r\n\t\t{\r\n\t\t\tfloat num = condition;\r\n\t\t\tcondition -= amount;\r\n\t\t\tif (ConVar.Global.developer > 0)\r\n\t\t\t{\r\n\t\t\t\tDebug.Log(info.shortname + \" was damaged by: \" + amount + \"cond is: \" + condition + \"/\" + maxCondition);\r\n\t\t\t}\r\n\t\t\tif (condition <= 0f && condition < num)\r\n\t\t\t{\r\n\t\t\t\tOnBroken();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDroppedItemCombined","Parameters":"(DroppedItem)","ClassName":"DroppedItem","MethodCode":"\r\n\tpublic void OnDroppedOn(DroppedItem di)\r\n\t{\r\n\t\tif (item == null || di.item == null || Interface.CallHook(\"CanCombineDroppedItem\", this, di) != null || di.item.info != item.info || (di.item.IsBlueprint() && di.item.blueprintTarget != item.blueprintTarget) || NeverCombine || di.NeverCombine || (di.item.hasCondition && di.item.condition != di.item.maxCondition) || (item.hasCondition && item.condition != item.maxCondition))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (di.item.info != null)\r\n\t\t{\r\n\t\t\tif (di.item.info.amountType == ItemDefinition.AmountType.Genetics)\r\n\t\t\t{\r\n\t\t\t\tint num = ((di.item.instanceData != null) ? di.item.instanceData.dataInt : (-1));\r\n\t\t\t\tint num2 = ((item.instanceData != null) ? item.instanceData.dataInt : (-1));\r\n\t\t\t\tif (num != num2)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((di.item.info.GetComponent<ItemModSign>() != null && ItemModAssociatedEntity<SignContent>.GetAssociatedEntity(di.item) != null) || (item.info != null && item.info.GetComponent<ItemModSign>() != null && ItemModAssociatedEntity<SignContent>.GetAssociatedEntity(item) != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tint num3 = di.item.amount + item.amount;\r\n\t\tif (num3 <= item.MaxStackable() && num3 != 0)\r\n\t\t{\r\n\t\t\tif (di.DropReason == DropReasonEnum.Player)\r\n\t\t\t{\r\n\t\t\t\tDropReason = DropReasonEnum.Player;\r\n\t\t\t}\r\n\t\t\tdi.DestroyItem();\r\n\t\t\tdi.Kill();\r\n\t\t\tInterface.CallHook(\"OnDroppedItemCombined\", this);\r\n\t\t\tint worldModelIndex = item.info.GetWorldModelIndex(item.amount);\r\n\t\t\titem.amount = num3;\r\n\t\t\titem.MarkDirty();\r\n\t\t\tif (GetDespawnDuration() < float.PositiveInfinity)\r\n\t\t\t{\r\n\t\t\t\tInvoke(IdleDestroy, GetDespawnDuration());\r\n\t\t\t}\r\n\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/notice/stack.world.fx.prefab\", this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\tint worldModelIndex2 = item.info.GetWorldModelIndex(item.amount);\r\n\t\t\tif (worldModelIndex != worldModelIndex2)\r\n\t\t\t{\r\n\t\t\t\titem.Drop(base.transform.position, Vector3.zero, base.transform.rotation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemDropped","Parameters":"(Item,BaseEntity)","ClassName":"Item","MethodCode":"\r\n\tpublic BaseEntity Drop(Vector3 vPos, Vector3 vVelocity, Quaternion rotation = default(Quaternion))\r\n\t{\r\n\t\tulong droppedBy = GetRootContainer()?.playerOwner?.userID ?? ((BasePlayer.EncryptedValue<ulong>)0uL);\r\n\t\tRemoveFromWorld();\r\n\t\tif (info.AlignWorldModelOnDrop)\r\n\t\t{\r\n\t\t\trotation = Quaternion.Euler(0f, Quaternion.LookRotation(vVelocity.normalized, Vector3.up).eulerAngles.y, 0f);\r\n\t\t\trotation = Quaternion.Euler(info.WorldModelDropOffset) * rotation;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = null;\r\n\t\tif (vPos != Vector3.zero && !info.HasFlag(ItemDefinition.Flag.NoDropping))\r\n\t\t{\r\n\t\t\tbaseEntity = CreateWorldObject(vPos, rotation);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.SetVelocity(vVelocity);\r\n\t\t\t}\r\n\t\t\tif (baseEntity is DroppedItem droppedItem)\r\n\t\t\t{\r\n\t\t\t\tdroppedItem.DroppedBy = droppedBy;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tRemove();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnItemDropped\", this, baseEntity);\r\n\t\tRemoveFromContainer();\r\n\t\treturn baseEntity;\r\n\t}\r\n"},{"Name":"OnPhoneDialFailed","Parameters":"(PhoneController,Telephone.DialFailReason,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void OnDialFailed(Telephone.DialFailReason reason)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPhoneDialFail\", this, reason, currentPlayer) == null)\r\n\t\t{\r\n\t\t\tSetPhoneState(Telephone.CallState.Idle);\r\n\t\t\tbase.baseEntity.ClientRPC(RpcTarget.NetworkGroup(\"ClientOnDialFailed\"), (int)reason);\r\n\t\t\tactiveCallTo = null;\r\n\t\t\tif (IsInvoking(TimeOutCall))\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(TimeOutCall);\r\n\t\t\t}\r\n\t\t\tif (IsInvoking(TriggerTimeOut))\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(TriggerTimeOut);\r\n\t\t\t}\r\n\t\t\tif (IsInvoking(TimeOutDialing))\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(TimeOutDialing);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnPhoneDialFailed\", this, reason, currentPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnPlayerBanned","Parameters":"(Network.Connection,AuthResponse)","ClassName":"ServerMgr","MethodCode":"\r\n\tinternal void OnValidateAuthTicketResponse(ulong SteamId, ulong OwnerId, AuthResponse Status)\r\n\t{\r\n\t\tif (Auth_Steam.ValidateConnecting(SteamId, OwnerId, Status))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tNetwork.Connection connection = Network.Net.sv.connections.FirstOrDefault((Network.Connection x) => x.userid == SteamId);\r\n\t\tif (connection == null)\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.LogWarning($\"Steam gave us a {Status} ticket response for unconnected id {SteamId}\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tswitch (Status)\r\n\t\t{\r\n\t\tcase AuthResponse.OK:\r\n\t\t\tUnityEngine.Debug.LogWarning($\"Steam gave us a 'ok' ticket response for already connected id {SteamId}\");\r\n\t\t\treturn;\r\n\t\tcase AuthResponse.TimedOut:\r\n\t\t\treturn;\r\n\t\tcase AuthResponse.VACBanned:\r\n\t\tcase AuthResponse.PublisherBanned:\r\n\t\t\tif (!bannedPlayerNotices.Contains(SteamId))\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"IOnPlayerBanned\", connection, Status);\r\n\t\t\t\tConsoleNetwork.BroadcastToAllClients(\"chat.add\", 2, 0, \"<color=#fff>SERVER</color> Kicking \" + connection.username.EscapeRichText() + \" (banned by anticheat)\");\r\n\t\t\t\tbannedPlayerNotices.Add(SteamId);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tUnityEngine.Debug.Log($\"Kicking {connection.ipaddress}/{connection.userid}/{connection.username} (Steam Status \\\"{Status.ToString()}\\\")\");\r\n\t\tconnection.authStatusSteam = Status.ToString();\r\n\t\tNetwork.Net.sv.Kick(connection, \"Steam: \" + Status);\r\n\t}\r\n"},{"Name":"OnTick","Parameters":"()","ClassName":"ServerMgr","MethodCode":"\r\n\tprivate void DoTick()\r\n\t{\r\n\t\tInterface.CallHook(\"OnTick\");\r\n\t\tRCon.Update();\r\n\t\tCompanionServer.Server.Update();\r\n\t\tNexusServer.Update();\r\n\t\tfor (int i = 0; i < Network.Net.sv.connections.Count; i++)\r\n\t\t{\r\n\t\t\tNetwork.Connection connection = Network.Net.sv.connections[i];\r\n\t\t\tif (!connection.isAuthenticated && !(connection.GetSecondsConnected() < (float)ConVar.Server.authtimeout))\r\n\t\t\t{\r\n\t\t\t\tNetwork.Net.sv.Kick(connection, \"Authentication Timed Out\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPayForPlacement","Parameters":"(BasePlayer,Planner,Construction)","ClassName":"Planner","MethodCode":"\r\n\tpublic void PayForPlacement(BasePlayer player, Construction component)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPayForPlacement\", player, this, component) != null || (player.IsInCreativeMode && Creative.freeBuild))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (player.IsInTutorial)\r\n\t\t{\r\n\t\t\tTutorialIsland currentTutorialIsland = player.GetCurrentTutorialIsland();\r\n\t\t\tif (currentTutorialIsland != null)\r\n\t\t\t{\r\n\t\t\t\tcurrentTutorialIsland.OnPlayerBuiltConstruction(player);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isTypeDeployable)\r\n\t\t{\r\n\t\t\tGetItem().UseItem();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<Item> obj = Facepunch.Pool.Get<List<Item>>();\r\n\t\tforeach (ItemAmount item in component.defaultGrade.CostToBuild())\r\n\t\t{\r\n\t\t\tplayer.inventory.Take(obj, item.itemDef.itemid, (int)item.amount);\r\n\t\t\tplayer.Command(\"note.inv\", item.itemDef.itemid, item.amount * -1f);\r\n\t\t}\r\n\t\tforeach (Item item2 in obj)\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t}\r\n\t\tFacepunch.Pool.Free(ref obj, freeElements: false);\r\n\t}\r\n"},{"Name":"OnPlayerRecover","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void RecoverFromWounded()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerRecover\", this) == null)\r\n\t\t{\r\n\t\t\tif (IsCrawling())\r\n\t\t\t{\r\n\t\t\t\tbase.health = UnityEngine.Random.Range(2f, 6f) + healingWhileCrawling;\r\n\t\t\t}\r\n\t\t\thealingWhileCrawling = 0f;\r\n\t\t\tSetPlayerFlag(PlayerFlags.Wounded, b: false);\r\n\t\t\tSetPlayerFlag(PlayerFlags.Incapacitated, b: false);\r\n\t\t\tif ((bool)BaseGameMode.GetActiveGameMode(base.isServer))\r\n\t\t\t{\r\n\t\t\t\tBaseGameMode.GetActiveGameMode(base.isServer).OnPlayerRevived(null, this);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnPlayerRecovered\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeAwardedAdventGift","Parameters":"(AdventCalendar,BasePlayer)","ClassName":"AdventCalendar","MethodCode":"\r\n\tpublic bool WasAwardedTodaysGift(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeAwardedAdventGift\", this, player);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn !(bool)obj;\r\n\t\t}\r\n\t\tif (!playerRewardHistory.ContainsKey(player.userID))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tDateTime now = DateTime.Now;\r\n\t\tif (((overrideAdventCalendarMonth > 0) ? overrideAdventCalendarMonth : now.Month) != startMonth)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tint num = ((overrideAdventCalendarDay > 0) ? overrideAdventCalendarDay : now.Day) - startDay;\r\n\t\tif (num < 0 || num >= days.Length)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (playerRewardHistory[player.userID].Contains(num))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnTrapArm","Parameters":"(BearTrap,BasePlayer)","ClassName":"BearTrap","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tprivate void RPC_Arm(RPCMessage rpc)\r\n\t{\r\n\t\tif (!Armed() && Interface.CallHook(\"OnTrapArm\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tArm();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityEnter","Parameters":"(TriggerComfort,BaseEntity)","ClassName":"TriggerComfort","MethodCode":"\r\n\tpublic override void OnEntityEnter(BaseEntity ent)\r\n\t{\r\n\t\tBasePlayer basePlayer = ent as BasePlayer;\r\n\t\tif ((bool)basePlayer && Interface.CallHook(\"OnEntityEnter\", this, ent) == null)\r\n\t\t{\r\n\t\t\t_players.Add(basePlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVehicleHornPressed","Parameters":"(VehicleModuleSeating,BasePlayer)","ClassName":"VehicleModuleSeating","MethodCode":"\r\n\tpublic override void PlayerServerInput(InputState inputState, BasePlayer player)\r\n\t{\r\n\t\tbase.PlayerServerInput(inputState, player);\r\n\t\tif (hornLoop != null && IsOnThisModule(player))\r\n\t\t{\r\n\t\t\tbool flag = inputState.IsDown(BUTTON.FIRE_PRIMARY);\r\n\t\t\tif (flag != HasFlag(Flags.Reserved8))\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved8, flag);\r\n\t\t\t}\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnVehicleHornPressed\", this, player);\r\n\t\t\t\thornPlayer = player;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnConnectionQueue","Parameters":"(Network.Connection)","ClassName":"ConnectionQueue","MethodCode":"\r\n\tinternal void Join(Connection connection)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnConnectionQueue\", connection) == null)\r\n\t\t{\r\n\t\t\tconnection.state = Connection.State.InQueue;\r\n\t\t\tqueue.Add(connection);\r\n\t\t\tnextMessageTime = 0f;\r\n\t\t\tif (CanJumpQueue(connection))\r\n\t\t\t{\r\n\t\t\t\tJoinGame(connection);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnProjectileRicochet","Parameters":"(BasePlayer,ProtoBuf.PlayerProjectileRicochet)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server]\r\n\tpublic void OnProjectileRicochet(RPCMessage msg)\r\n\t{\r\n\t\tPlayerProjectileRicochet playerProjectileRicochet = PlayerProjectileRicochet.Deserialize(msg.read);\r\n\t\tif (playerProjectileRicochet != null)\r\n\t\t{\r\n\t\t\tFiredProjectile value;\r\n\t\t\tif (playerProjectileRicochet.hitPosition.IsNaNOrInfinity() || playerProjectileRicochet.inVelocity.IsNaNOrInfinity() || playerProjectileRicochet.outVelocity.IsNaNOrInfinity() || playerProjectileRicochet.hitNormal.IsNaNOrInfinity() || float.IsNaN(playerProjectileRicochet.travelTime) || float.IsInfinity(playerProjectileRicochet.travelTime))\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Contains NaN (\" + playerProjectileRicochet.projectileID + \")\");\r\n\t\t\t\tplayerProjectileRicochet.ResetToPool();\r\n\t\t\t\tplayerProjectileRicochet = null;\r\n\t\t\t}\r\n\t\t\telse if (!firedProjectiles.TryGetValue(playerProjectileRicochet.projectileID, out value))\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Missing ID (\" + playerProjectileRicochet.projectileID + \")\", logToAnalytics: false);\r\n\t\t\t\tplayerProjectileRicochet.ResetToPool();\r\n\t\t\t\tplayerProjectileRicochet = null;\r\n\t\t\t}\r\n\t\t\telse if (value.firedTime < UnityEngine.Time.realtimeSinceStartup - 8f)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Lifetime is zero (\" + playerProjectileRicochet.projectileID + \")\");\r\n\t\t\t\tplayerProjectileRicochet.ResetToPool();\r\n\t\t\t\tplayerProjectileRicochet = null;\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnProjectileRicochet\", this, playerProjectileRicochet) == null)\r\n\t\t\t{\r\n\t\t\t\tvalue.ricochets++;\r\n\t\t\t\tfiredProjectiles[playerProjectileRicochet.projectileID] = value;\r\n\t\t\t\tplayerProjectileRicochet.ResetToPool();\r\n\t\t\t\tplayerProjectileRicochet = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityPickedUp","Parameters":"(BaseCombatEntity,Item,BasePlayer)","ClassName":"BaseCombatEntity","MethodCode":"\r\n\tpublic virtual void OnPickedUp(Item createdItem, BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnEntityPickedUp\", this, createdItem, player);\r\n\t}\r\n"},{"Name":"OnNpcConversationResponded","Parameters":"(NPCTalking,BasePlayer,ConversationData,ConversationData.ResponseNode)","ClassName":"NPCTalking","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server.CallsPerSecond(5uL)]\r\n\tpublic void Server_ResponsePressed(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tint num = msg.read.Int32();\r\n\t\tint num2 = msg.read.Int32();\r\n\t\tConversationData conversationFor = GetConversationFor(player);\r\n\t\tif (conversationFor == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConversationData.ResponseNode responseNode = conversationFor.speeches[num].responses[num2];\r\n\t\tif (responseNode == null || Interface.CallHook(\"OnNpcConversationRespond\", this, player, conversationFor, responseNode) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (responseNode.conditions.Length != 0)\r\n\t\t{\r\n\t\t\tUpdateFlags();\r\n\t\t}\r\n\t\tbool flag = responseNode.PassesConditions(player, this);\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tstring actionString = responseNode.GetActionString();\r\n\t\t\tif (!string.IsNullOrEmpty(actionString))\r\n\t\t\t{\r\n\t\t\t\tOnConversationAction(player, actionString);\r\n\t\t\t}\r\n\t\t}\r\n\t\tint speechNodeIndex = conversationFor.GetSpeechNodeIndex(flag ? responseNode.resultingSpeechNode : responseNode.GetFailedSpeechNode(player, this));\r\n\t\tif (speechNodeIndex == -1)\r\n\t\t{\r\n\t\t\tForceEndConversation(player);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tForceSpeechNode(player, speechNodeIndex);\r\n\t\tInterface.CallHook(\"OnNpcConversationResponded\", this, player, conversationFor, responseNode);\r\n\t}\r\n"},{"Name":"OnWorldProjectileCreate","Parameters":"(HitInfo,Item)","ClassName":"BasePlayer","MethodCode":"\r\n\tprotected virtual void CreateWorldProjectile(HitInfo info, ItemDefinition itemDef, ItemModProjectile itemMod, Projectile projectilePrefab, Item recycleItem)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanCreateWorldProjectile\", info, itemDef) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 projectileVelocity = info.ProjectileVelocity;\r\n\t\tItem item = ((recycleItem != null) ? recycleItem : ItemManager.Create(itemDef, 1, 0uL));\r\n\t\tif (Interface.CallHook(\"OnWorldProjectileCreate\", info, item) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = null;\r\n\t\tif (!info.DidHit)\r\n\t\t{\r\n\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\tbaseEntity.Kill(DestroyMode.Gib);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (projectilePrefab.breakProbability > 0f && UnityEngine.Random.value <= projectilePrefab.breakProbability)\r\n\t\t{\r\n\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\tbaseEntity.Kill(DestroyMode.Gib);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (projectilePrefab.conditionLoss > 0f)\r\n\t\t{\r\n\t\t\titem.LoseCondition(projectilePrefab.conditionLoss * 100f);\r\n\t\t\tif (item.isBroken)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\t\tbaseEntity.Kill(DestroyMode.Gib);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (projectilePrefab.stickProbability > 0f && UnityEngine.Random.value <= projectilePrefab.stickProbability)\r\n\t\t{\r\n\t\t\tbaseEntity = ((info.HitEntity == null) ? item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized)) : ((info.HitBone != 0) ? item.CreateWorldObject(info.HitPositionLocal, Quaternion.LookRotation(info.HitNormalLocal * -1f), info.HitEntity, info.HitBone) : item.CreateWorldObject(info.HitPositionLocal, Quaternion.LookRotation(info.HitEntity.transform.InverseTransformDirection(projectileVelocity.normalized)), info.HitEntity)));\r\n\t\t\tDroppedItem droppedItem = baseEntity as DroppedItem;\r\n\t\t\tif (droppedItem != null)\r\n\t\t\t{\r\n\t\t\t\tdroppedItem.StickIn();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.GetComponent<Rigidbody>().isKinematic = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\tRigidbody component = baseEntity.GetComponent<Rigidbody>();\r\n\t\t\tcomponent.AddForce(projectileVelocity.normalized * 200f);\r\n\t\t\tcomponent.WakeUp();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCrateLanded","Parameters":"(HackableLockedCrate)","ClassName":"HackableLockedCrate","MethodCode":"\r\n\tpublic void LandCheck()\r\n\t{\r\n\t\tRaycastHit hitInfo;\r\n\t\tif (hasLanded)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnCrateLanded\", this);\r\n\t\t}\r\n\t\telse if (UnityEngine.Physics.Raycast(new Ray(base.transform.position + Vector3.up * 0.5f, Vector3.down), out hitInfo, 1f, 1084293377))\r\n\t\t{\r\n\t\t\tEffect.server.Run(landEffect.resourcePath, hitInfo.point, Vector3.up);\r\n\t\t\thasLanded = true;\r\n\t\t\tCancelInvoke(LandCheck);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExplosiveFuseSet","Parameters":"(TimedExplosive,float)","ClassName":"TimedExplosive","MethodCode":"\r\n\tpublic virtual void SetFuse(float fuseLength)\r\n\t{\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tobject obj = Interface.CallHook(\"OnExplosiveFuseSet\", this, fuseLength);\r\n\t\t\tif (obj is float)\r\n\t\t\t{\r\n\t\t\t\tfuseLength = (float)obj;\r\n\t\t\t}\r\n\t\t\tInvoke(Explode, fuseLength);\r\n\t\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanEquipItem","Parameters":"(PlayerInventory,Item,int)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic bool CanEquipItem(Item item, int targetSlot)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanEquipItem\", this, item, targetSlot);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif ((item.info.flags & ItemDefinition.Flag.NotAllowedInBelt) != 0)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (base.baseEntity != null && base.baseEntity.IsRestrained)\r\n\t\t{\r\n\t\t\tHandcuffs restraintItem = base.baseEntity.Belt.GetRestraintItem();\r\n\t\t\tif (restraintItem != null && restraintItem.GetItem().position == targetSlot)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tItemModContainerRestriction component = item.info.GetComponent<ItemModContainerRestriction>();\r\n\t\tif (component == null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tItem[] array = containerBelt.itemList.ToArray();\r\n\t\tforeach (Item item2 in array)\r\n\t\t{\r\n\t\t\tif (item2 != item)\r\n\t\t\t{\r\n\t\t\t\tItemModContainerRestriction component2 = item2.info.GetComponent<ItemModContainerRestriction>();\r\n\t\t\t\tif (!(component2 == null) && !component.CanExistWith(component2) && !item2.MoveToContainer(containerMain))\r\n\t\t\t\t{\r\n\t\t\t\t\titem2.Drop(base.baseEntity.GetDropPosition(), base.baseEntity.GetDropVelocity());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnRackedWeaponMounted","Parameters":"(Item,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate bool MountWeapon(Item item, BasePlayer player, int gridCellIndex, int rotation, bool sendUpdate = true)\r\n\t{\r\n\t\tif (item == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnRackedWeaponMount\", item, player, this);\r\n\t\tif (obj != null)\r\n\t\t{\r\n\t\t\tif (!(obj is bool))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tint itemid = item.info.itemid;\r\n\t\tWorldModelRackMountConfig forItemDef = WorldModelRackMountConfig.GetForItemDef(item.info);\r\n\t\tif (forItemDef == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"no rackmount config\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!CanAcceptWeaponType(forItemDef))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!GridCellsFree(forItemDef, gridCellIndex, rotation, null))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item.MoveToContainer(base.inventory, -1, allowStack: false) && item.position >= 0 && item.position < gridSlots.Length)\r\n\t\t{\r\n\t\t\tWeaponRackSlot slot = gridSlots[item.position];\r\n\t\t\tSetSlotItem(slot, item, gridCellIndex, rotation);\r\n\t\t\tSetupSlot(slot);\r\n\t\t\tif (player != null)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"PlayMountSound\", player), itemid);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sendUpdate)\r\n\t\t{\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnRackedWeaponMounted\", item, player, this);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,ResourceContainer)","ClassName":"ResourceContainer","MethodCode":"\r\n\t[BaseEntity.RPC_Server.IsVisible(3f)]\r\n\t[BaseEntity.RPC_Server]\r\n\tprivate void StartLootingContainer(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif ((bool)player && player.CanInteract() && lootable && Interface.CallHook(\"CanLootEntity\", player, this) == null && player.inventory.loot.StartLootingEntity(base.baseEntity))\r\n\t\t{\r\n\t\t\tlastAccessTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\tplayer.inventory.loot.AddContainer(container);\r\n\t\t}\r\n\t}\r\n"},{"Name":"InitLogging","Parameters":"()","ClassName":"Bootstrap","MethodCode":"\r\n\tprivate void StartupShared()\r\n\t{\r\n\t\tInterface.CallHook(\"InitLogging\");\r\n\t\tItemManager.Initialize();\r\n\t}\r\n"},{"Name":"OnPlayerColliderEnable","Parameters":"(BasePlayer,UnityEngine.CapsuleCollider)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void EnablePlayerCollider()\r\n\t{\r\n\t\tif (!playerCollider.enabled && Interface.CallHook(\"OnPlayerColliderEnable\", this, playerCollider) == null)\r\n\t\t{\r\n\t\t\tRefreshColliderSize(forced: true);\r\n\t\t\tplayerCollider.enabled = true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNpcAttack","Parameters":"(BaseNpc,BaseEntity)","ClassName":"BaseNpc","MethodCode":"\r\n\tpublic virtual void StartAttack()\r\n\t{\r\n\t\tif ((bool)AttackTarget && AttackReady() && Interface.CallHook(\"OnNpcAttack\", this, AttackTarget) == null && !((AttackTarget.ServerPosition - ServerPosition).magnitude > AttackRange))\r\n\t\t{\r\n\t\t\tnextAttackTime = UnityEngine.Time.realtimeSinceStartup + AttackRate;\r\n\t\t\tBaseCombatEntity combatTarget = CombatTarget;\r\n\t\t\tif ((bool)combatTarget)\r\n\t\t\t{\r\n\t\t\t\tcombatTarget.Hurt(AttackDamage, AttackDamageType, this);\r\n\t\t\t\tStamina.Use(AttackCost);\r\n\t\t\t\tBusyTimer.Activate(0.5f);\r\n\t\t\t\tSignalBroadcast(Signal.Attack);\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Attack\"), AttackTarget.ServerPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnClientAuth","Parameters":"(Network.Connection)","ClassName":"ServerMgr","MethodCode":"\r\n\tprivate void OnGiveUserInformation(Message packet)\r\n\t{\r\n\t\tif (packet.connection.state != 0)\r\n\t\t{\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Invalid connection state\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tpacket.connection.state = Network.Connection.State.Connecting;\r\n\t\tif (packet.read.UInt8() != 228)\r\n\t\t{\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Invalid Connection Protocol\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tpacket.connection.userid = packet.read.UInt64();\r\n\t\tpacket.connection.protocol = packet.read.UInt32();\r\n\t\tpacket.connection.os = packet.read.String(128);\r\n\t\tpacket.connection.username = packet.read.String();\r\n\t\tif (string.IsNullOrEmpty(packet.connection.os))\r\n\t\t{\r\n\t\t\tthrow new Exception(\"Invalid OS\");\r\n\t\t}\r\n\t\tif (string.IsNullOrEmpty(packet.connection.username))\r\n\t\t{\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Invalid Username\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tpacket.connection.username = packet.connection.username.Replace('\\n', ' ').Replace('\\r', ' ').Replace('\\t', ' ')\r\n\t\t\t.Trim();\r\n\t\tif (string.IsNullOrEmpty(packet.connection.username))\r\n\t\t{\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Invalid Username\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = string.Empty;\r\n\t\tstring branch = ConVar.Server.branch;\r\n\t\tif (packet.read.Unread >= 4)\r\n\t\t{\r\n\t\t\ttext = packet.read.String(128);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnClientAuth\", packet.connection);\r\n\t\tif (branch != string.Empty && branch != text)\r\n\t\t{\r\n\t\t\tDebugEx.Log(\"Kicking \" + packet.connection?.ToString() + \" - their branch is '\" + text + \"' not '\" + branch + \"'\");\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Wrong Steam Beta: Requires '\" + branch + \"' branch!\");\r\n\t\t}\r\n\t\telse if (packet.connection.protocol > 2564)\r\n\t\t{\r\n\t\t\tDebugEx.Log(\"Kicking \" + packet.connection?.ToString() + \" - their protocol is \" + packet.connection.protocol + \" not \" + 2564);\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Wrong Connection Protocol: Server update required!\");\r\n\t\t}\r\n\t\telse if (packet.connection.protocol < 2564)\r\n\t\t{\r\n\t\t\tDebugEx.Log(\"Kicking \" + packet.connection?.ToString() + \" - their protocol is \" + packet.connection.protocol + \" not \" + 2564);\r\n\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Wrong Connection Protocol: Client update required!\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpacket.connection.token = packet.read.BytesWithSize(512u);\r\n\t\t\tif (packet.connection.token == null || packet.connection.token.Length < 1)\r\n\t\t\t{\r\n\t\t\t\tNetwork.Net.sv.Kick(packet.connection, \"Invalid Token\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tpacket.connection.anticheatId = packet.read.StringRaw(128);\r\n\t\t\tpacket.connection.anticheatToken = packet.read.StringRaw(2048);\r\n\t\t\tpacket.connection.clientChangeset = packet.read.Int32();\r\n\t\t\tpacket.connection.clientBuildTime = packet.read.Int64();\r\n\t\t\tauth.OnNewConnection(packet.connection);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnInventoryItemsFind","Parameters":"(PlayerInventory,int)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic List<Item> FindItemsByItemID(int id)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnInventoryItemsFind\", this, id);\r\n\t\tif (obj is List<Item>)\r\n\t\t{\r\n\t\t\treturn (List<Item>)obj;\r\n\t\t}\r\n\t\tList<Item> list = new List<Item>();\r\n\t\tif (containerMain != null)\r\n\t\t{\r\n\t\t\tlist.AddRange(containerMain.FindItemsByItemID(id));\r\n\t\t}\r\n\t\tif (containerBelt != null)\r\n\t\t{\r\n\t\t\tlist.AddRange(containerBelt.FindItemsByItemID(id));\r\n\t\t}\r\n\t\tif (containerWear != null)\r\n\t\t{\r\n\t\t\tlist.AddRange(containerWear.FindItemsByItemID(id));\r\n\t\t}\r\n\t\treturn list;\r\n\t}\r\n"},{"Name":"OnNpcConversationEnded","Parameters":"(NPCTalking,BasePlayer)","ClassName":"NPCTalking","MethodCode":"\r\n\tpublic virtual void OnConversationEnded(BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnNpcConversationEnded\", this, player);\r\n\t\tif (conversingPlayers.Contains(player))\r\n\t\t{\r\n\t\t\tconversingPlayers.Remove(player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnResourceDepositCreated","Parameters":"(ResourceDepositManager.ResourceDeposit)","ClassName":"ResourceDepositManager","MethodCode":"\r\n\tpublic ResourceDeposit CreateFromPosition(Vector3 pos)\r\n\t{\r\n\t\tVector2i indexFrom = GetIndexFrom(pos);\r\n\t\tUnityEngine.Random.State state = UnityEngine.Random.state;\r\n\t\tUnityEngine.Random.InitState((int)new Vector2(indexFrom.x, indexFrom.y).Seed(World.Seed + World.Salt));\r\n\t\tResourceDeposit resourceDeposit = new ResourceDeposit\r\n\t\t{\r\n\t\t\torigin = new Vector3(indexFrom.x * 20, 0f, indexFrom.y * 20)\r\n\t\t};\r\n\t\tif (UnityEngine.Random.Range(0f, 1f) < 0.5f)\r\n\t\t{\r\n\t\t\tresourceDeposit.Add(ItemManager.FindItemDefinition(\"stones\"), 1f, 100, 1f, ResourceDeposit.surveySpawnType.ITEM);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbool flag = false;\r\n\t\t\tfloat num = 0f;\r\n\t\t\tif (World.Procedural)\r\n\t\t\t{\r\n\t\t\t\tif (TerrainMeta.BiomeMap.GetBiome(pos, 1) > 0.5f)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum += 0.25f;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnum += 0.15f;\r\n\t\t\t}\r\n\t\t\tif (UnityEngine.Random.Range(0f, 1f) >= 1f - num)\r\n\t\t\t{\r\n\t\t\t\tresourceDeposit.Add(ItemManager.FindItemDefinition(\"crude.oil\"), 1f, UnityEngine.Random.Range(5000, 10000), UnityEngine.Random.Range(8f, 10f), ResourceDeposit.surveySpawnType.ITEM, liquid: true);\r\n\t\t\t\tflag = true;\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tresourceDeposit.Add(ItemManager.FindItemDefinition(\"stones\"), 1f, UnityEngine.Random.Range(30000, 100000), UnityEngine.Random.Range(0.3f, 0.5f), ResourceDeposit.surveySpawnType.ITEM);\r\n\t\t\t\tfloat num2 = 0f;\r\n\t\t\t\tnum2 = ((!World.Procedural) ? 0.1f : (((TerrainMeta.BiomeMap.GetBiome(pos, 2) > 0.5f) ? 1f : 0f) * 0.25f));\r\n\t\t\t\tif (UnityEngine.Random.Range(0f, 1f) >= 1f - num2)\r\n\t\t\t\t{\r\n\t\t\t\t\tresourceDeposit.Add(ItemManager.FindItemDefinition(\"metal.ore\"), 1f, UnityEngine.Random.Range(10000, 100000), UnityEngine.Random.Range(2f, 4f), ResourceDeposit.surveySpawnType.ITEM);\r\n\t\t\t\t}\r\n\t\t\t\tfloat num3 = 0f;\r\n\t\t\t\tnum3 = ((!World.Procedural) ? 0.1f : (((TerrainMeta.BiomeMap.GetBiome(pos, 1) > 0.5f) ? 1f : 0f) * (0.25f + 0.25f * (TerrainMeta.TopologyMap.GetTopology(pos, 8) ? 1f : 0f) + 0.25f * (TerrainMeta.TopologyMap.GetTopology(pos, 1) ? 1f : 0f))));\r\n\t\t\t\tif (UnityEngine.Random.Range(0f, 1f) >= 1f - num3)\r\n\t\t\t\t{\r\n\t\t\t\t\tresourceDeposit.Add(ItemManager.FindItemDefinition(\"sulfur.ore\"), 1f, UnityEngine.Random.Range(10000, 100000), UnityEngine.Random.Range(4f, 4f), ResourceDeposit.surveySpawnType.ITEM);\r\n\t\t\t\t}\r\n\t\t\t\tfloat num4 = 0f;\r\n\t\t\t\tif (World.Procedural)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (TerrainMeta.BiomeMap.GetBiome(pos, 8) > 0.5f || TerrainMeta.BiomeMap.GetBiome(pos, 4) > 0.5f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum4 += 0.25f;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tnum4 += 0.15f;\r\n\t\t\t\t}\r\n\t\t\t\tif (UnityEngine.Random.Range(0f, 1f) >= 1f - num4)\r\n\t\t\t\t{\r\n\t\t\t\t\tresourceDeposit.Add(ItemManager.FindItemDefinition(\"hq.metal.ore\"), 1f, UnityEngine.Random.Range(5000, 10000), UnityEngine.Random.Range(30f, 50f), ResourceDeposit.surveySpawnType.ITEM);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t_deposits.Add(indexFrom, resourceDeposit);\r\n\t\tInterface.CallHook(\"OnResourceDepositCreated\", resourceDeposit);\r\n\t\tUnityEngine.Random.state = state;\r\n\t\treturn resourceDeposit;\r\n\t}\r\n"},{"Name":"OnHuntEventEnd","Parameters":"(EggHuntEvent)","ClassName":"EggHuntEvent","MethodCode":"\r\n\tpublic void Update()\r\n\t{\r\n\t\ttimeAlive += UnityEngine.Time.deltaTime;\r\n\t\tif (base.isServer && !base.IsDestroyed)\r\n\t\t{\r\n\t\t\tif (timeAlive - warmupTime > durationSeconds - warnTime)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved1, b: true);\r\n\t\t\t}\r\n\t\t\tif (timeAlive - warmupTime > durationSeconds && !IsInvoking(Cooldown) && Interface.CallHook(\"OnHuntEventEnd\", this) == null)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\t\t\tCleanupEggs();\r\n\t\t\t\tPrintWinnersAndAward();\r\n\t\t\t\tInvoke(Cooldown, 10f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemRepair","Parameters":"(BasePlayer,Item)","ClassName":"RepairBench","MethodCode":"\r\n\tpublic static void RepairAnItem(Item itemToRepair, BasePlayer player, BaseEntity repairBenchEntity, float maxConditionLostOnRepair, bool mustKnowBlueprint)\r\n\t{\r\n\t\tif (itemToRepair == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition info = itemToRepair.info;\r\n\t\tItemBlueprint component = info.GetComponent<ItemBlueprint>();\r\n\t\tif (!component)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModRepair component2 = itemToRepair.info.GetComponent<ItemModRepair>();\r\n\t\tif (!info.condition.repairable || itemToRepair.condition == itemToRepair.maxCondition)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (mustKnowBlueprint)\r\n\t\t{\r\n\t\t\tItemDefinition itemDefinition = ((info.isRedirectOf != null) ? info.isRedirectOf : info);\r\n\t\t\tif (!player.blueprints.HasUnlocked(itemDefinition) && (!(itemDefinition.Blueprint != null) || itemDefinition.Blueprint.isResearchable))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnItemRepair\", player, itemToRepair) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = RepairCostFraction(itemToRepair);\r\n\t\tbool flag = false;\r\n\t\tList<ItemAmount> obj = Facepunch.Pool.Get<List<ItemAmount>>();\r\n\t\tGetRepairCostList(component, obj);\r\n\t\tforeach (ItemAmount item in obj)\r\n\t\t{\r\n\t\t\tif (item.itemDef.category != ItemCategory.Component)\r\n\t\t\t{\r\n\t\t\t\tint amount = player.inventory.GetAmount(item.itemDef.itemid);\r\n\t\t\t\tif (Mathf.CeilToInt(item.amount * num) > amount)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (ItemAmount item2 in obj)\r\n\t\t{\r\n\t\t\tif (item2.itemDef.category != ItemCategory.Component)\r\n\t\t\t{\r\n\t\t\t\tint amount2 = Mathf.CeilToInt(item2.amount * num);\r\n\t\t\t\tplayer.inventory.Take(null, item2.itemid, amount2);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.LogResource(Facepunch.Rust.Analytics.Azure.ResourceMode.Consumed, \"repair\", item2.itemDef.shortname, amount2, repairBenchEntity, null, safezone: false, null, 0uL, null, itemToRepair);\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\tfloat conditionNormalized = itemToRepair.conditionNormalized;\r\n\t\tfloat maxConditionNormalized = itemToRepair.maxConditionNormalized;\r\n\t\titemToRepair.DoRepair(maxConditionLostOnRepair);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnItemRepaired(player, repairBenchEntity, itemToRepair, conditionNormalized, maxConditionNormalized);\r\n\t\tif (Global.developer > 0)\r\n\t\t{\r\n\t\t\tDebug.Log(\"Item repaired! condition : \" + itemToRepair.condition + \"/\" + itemToRepair.maxCondition);\r\n\t\t}\r\n\t\tstring strName = \"assets/bundled/prefabs/fx/repairbench/itemrepair.prefab\";\r\n\t\tif (component2 != null && component2.successEffect?.Get() != null)\r\n\t\t{\r\n\t\t\tstrName = component2.successEffect.resourcePath;\r\n\t\t}\r\n\t\tEffect.server.Run(strName, repairBenchEntity, 0u, Vector3.zero, Vector3.zero);\r\n\t}\r\n"},{"Name":"OnSignContentCopied","Parameters":"(SignContent,ISignage,IUGCBrowserEntity)","ClassName":"SignContent","MethodCode":"\r\n\tpublic void CopyInfoToSign(ISignage s, IUGCBrowserEntity b)\r\n\t{\r\n\t\tFileStorage.server.ReassignEntityId(net.ID, s.NetworkID);\r\n\t\ts.SetTextureCRCs(textureIDs);\r\n\t\tb.EditingHistory.Clear();\r\n\t\tforeach (ulong item in editHistory)\r\n\t\t{\r\n\t\t\tb.EditingHistory.Add(item);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnSignContentCopied\", this, s, b);\r\n\t}\r\n"},{"Name":"OnRackedWeaponTake","Parameters":"(Item,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate void GivePlayerWeapon(BasePlayer player, int mountSlotIndex, int playerBeltIndex = -1, bool tryHold = true, bool sendUpdate = true)\r\n\t{\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(mountSlotIndex);\r\n\t\tif (weaponAtIndex == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.GetSlot(weaponAtIndex.InventoryIndex);\r\n\t\tif (slot == null || Interface.CallHook(\"OnRackedWeaponTake\", slot, player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tClearSlot(weaponAtIndex);\r\n\t\tif (slot.MoveToContainer(player.inventory.containerBelt, playerBeltIndex))\r\n\t\t{\r\n\t\t\tif ((tryHold && player.GetHeldEntity() == null) || playerBeltIndex != -1)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"SetActiveBeltSlot\", player), slot.position, slot.uid);\r\n\t\t\t}\r\n\t\t\tClientRPC(RpcTarget.Player(\"PlayGrabSound\", player), slot.info.itemid);\r\n\t\t}\r\n\t\telse if (!slot.MoveToContainer(player.inventory.containerMain))\r\n\t\t{\r\n\t\t\tslot.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);\r\n\t\t}\r\n\t\tif (sendUpdate)\r\n\t\t{\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnRackedWeaponTaken\", slot, player, this);\r\n\t}\r\n"},{"Name":"OnBookmarkControlStarted","Parameters":"(ComputerStation,BasePlayer,string,IRemoteControllable)","ClassName":"ComputerStation","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void BeginControllingBookmark(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!IsPlayerAdmin(player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (!IsValidIdentifier(text) || !controlBookmarks.Contains(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIRemoteControllable remoteControllable = RemoteControlEntity.FindByID(text);\r\n\t\tif (remoteControllable == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity ent = remoteControllable.GetEnt();\r\n\t\tif (ent == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"RC identifier \" + text + \" was found but has a null or destroyed entity, this should never happen\");\r\n\t\t}\r\n\t\telse if (remoteControllable.CanControl(player.userID) && !(Vector3.Distance(base.transform.position, ent.transform.position) >= remoteControllable.MaxRange) && Interface.CallHook(\"OnBookmarkControl\", this, player, text, remoteControllable) == null)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = currentlyControllingEnt.Get(serverside: true);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tIRemoteControllable component = baseEntity.GetComponent<IRemoteControllable>();\r\n\t\t\t\tcomponent?.StopControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t\t\tInterface.CallHook(\"OnBookmarkControlEnded\", this, player, component);\r\n\t\t\t}\r\n\t\t\tplayer.net.SwitchSecondaryGroup(ent.net.group);\r\n\t\t\tcurrentlyControllingEnt.uid = ent.net.ID;\r\n\t\t\tcurrentPlayerID = player.userID;\r\n\t\t\tbool b = remoteControllable.InitializeControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t\tSetFlag(Flags.Reserved2, b, recursive: false, networkupdate: false);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tSendControlBookmarks(player);\r\n\t\t\tif (Rust.GameInfo.HasAchievements && remoteControllable.GetEnt() is CCTV_RC)\r\n\t\t\t{\r\n\t\t\t\tInvokeRepeating(CheckCCTVAchievement, 1f, 3f);\r\n\t\t\t}\r\n\t\t\tInvokeRepeating(ControlCheck, 0f, 0f);\r\n\t\t\tInterface.CallHook(\"OnBookmarkControlStarted\", this, player, text, remoteControllable);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerWound","Parameters":"(BasePlayer,HitInfo)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void BecomeWounded(HitInfo info = null)\r\n\t{\r\n\t\tif (IsWounded() || Interface.CallHook(\"OnPlayerWound\", this, info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = info != null && info.damageTypes.GetMajorityDamageType() == DamageType.Fall;\r\n\t\tif (IsCrawling())\r\n\t\t{\r\n\t\t\twoundedByFallDamage |= flag;\r\n\t\t\tGoToIncapacitated(info);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\twoundedByFallDamage = flag;\r\n\t\tif (flag || !ConVar.Server.crawlingenabled)\r\n\t\t{\r\n\t\t\tGoToIncapacitated(info);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tGoToCrawling(info);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanWearItem","Parameters":"(PlayerInventory,Item,int)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic bool CanWearItem(Item item, int targetSlot)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanWearItem\", this, item, targetSlot);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn CanWearItem(item, canAdjustClothing: true, targetSlot);\r\n\t}\r\n"},{"Name":"CanDropActiveItem","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual bool ShouldDropActiveItem()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanDropActiveItem\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnDebrisSpawn","Parameters":"(DecayEntity,UnityEngine.Vector3,UnityEngine.Quaternion,bool)","ClassName":"DecayEntity","MethodCode":"\r\n\tprivate void SpawnDebris(Vector3 localPos, Quaternion rot, bool dropToTerrain)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnDebrisSpawn\", this, localPos, rot, dropToTerrain) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 vector = base.transform.TransformPoint(localPos);\r\n\t\tif (dropToTerrain && UnityEngine.Physics.Raycast(vector, Vector3.down, out var hitInfo, 6f, 8388608))\r\n\t\t{\r\n\t\t\tfloat num = vector.y - hitInfo.point.y;\r\n\t\t\tvector.y = hitInfo.point.y;\r\n\t\t\tlocalPos.y -= num;\r\n\t\t}\r\n\t\tList<DebrisEntity> list = Facepunch.Pool.Get<List<DebrisEntity>>();\r\n\t\tVis.Entities(vector, 0.1f, list, 256);\r\n\t\tif (list.Count <= 0)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(debrisPrefab.resourcePath, base.transform.TransformPoint(localPos), base.transform.rotation * rot);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.SetParent(parentEntity.Get(serverside: true), worldPositionStays: true);\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBookmarkAdd","Parameters":"(ComputerStation,BasePlayer,string)","ClassName":"ComputerStation","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void AddBookmark(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!IsPlayerAdmin(player) || isStatic)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (UnityEngine.Time.realtimeSinceStartup < nextAddTime)\r\n\t\t{\r\n\t\t\tplayer.ChatMessage(\"Slow down...\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (controlBookmarks.Count >= 128)\r\n\t\t{\r\n\t\t\tplayer.ChatMessage(\"Too many bookmarks, delete some\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tnextAddTime = UnityEngine.Time.realtimeSinceStartup + 1f;\r\n\t\tstring text = msg.read.String();\r\n\t\tif (Interface.CallHook(\"OnBookmarkAdd\", this, player, text) == null)\r\n\t\t{\r\n\t\t\tForceAddBookmark(text);\r\n\t\t\tSendControlBookmarks(player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVendingShopRename","Parameters":"(VendingMachine,string,BasePlayer)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_UpdateShopName(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tstring obj = msg.read.String(32);\r\n\t\tif (CanPlayerAdmin(player) && Interface.CallHook(\"OnVendingShopRename\", this, obj, player) == null)\r\n\t\t{\r\n\t\t\tshopName = obj;\r\n\t\t\tUpdateMapMarker();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSignUpdated","Parameters":"(PhotoFrame,BasePlayer)","ClassName":"PhotoFrame","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(3uL)]\r\n\t[RPC_Server.MaxDistance(5f)]\r\n\tpublic void UpdateSign(RPCMessage msg)\r\n\t{\r\n\t\tif (!(msg.player == null) && CanUpdateSign(msg.player))\r\n\t\t{\r\n\t\t\tbyte[] array = msg.read.BytesWithSize();\r\n\t\t\tif (array != null && ImageProcessing.IsValidPNG(array, 1024, 1024))\r\n\t\t\t{\r\n\t\t\t\tFileStorage.server.RemoveAllByEntity(net.ID);\r\n\t\t\t\t_overlayTextureCrc = FileStorage.server.Store(array, FileStorage.Type.png, net.ID);\r\n\t\t\t\tLogEdit(msg.player);\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t\tInterface.CallHook(\"OnSignUpdated\", this, msg.player);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPhoneCallStart","Parameters":"(PhoneController,PhoneController,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void BeginCall()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPhoneCallStart\", this, activeCallTo, currentPlayer) == null)\r\n\t\t{\r\n\t\t\tif (IsMobile && activeCallTo != null && !activeCallTo.RequirePower)\r\n\t\t\t{\r\n\t\t\t\t_ = currentPlayer != null;\r\n\t\t\t}\r\n\t\t\tSetPhoneStateWithPlayer(Telephone.CallState.InProcess);\r\n\t\t\tInvoke(TimeOutCall, TelephoneManager.MaxCallLength);\r\n\t\t\tInterface.CallHook(\"OnPhoneCallStarted\", this, activeCallTo, currentPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBradleyApcTarget","Parameters":"(BradleyAPC,BaseEntity)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic bool VisibilityTest(BaseEntity ent)\r\n\t{\r\n\t\tif (ent == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!(Vector3.Distance(ent.transform.position, base.transform.position) < viewDistance))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tbool flag = false;\r\n\t\tif (ent is BasePlayer)\r\n\t\t{\r\n\t\t\tBasePlayer basePlayer = ent as BasePlayer;\r\n\t\t\tVector3 position = mainTurret.transform.position;\r\n\t\t\tflag = IsVisible(basePlayer.eyes.position, position) || IsVisible(basePlayer.transform.position + Vector3.up * 0.1f, position);\r\n\t\t\tif (!flag && basePlayer.isMounted && basePlayer.GetMounted().VehicleParent() != null && basePlayer.GetMounted().VehicleParent().AlwaysAllowBradleyTargeting)\r\n\t\t\t{\r\n\t\t\t\tflag = IsVisible(basePlayer.GetMounted().VehicleParent().bounds.center, position);\r\n\t\t\t}\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tflag = !UnityEngine.Physics.SphereCast(new Ray(position, Vector3Ex.Direction(basePlayer.eyes.position, position)), 0.05f, Vector3.Distance(basePlayer.eyes.position, position), 10551297);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"Standard vis test!\");\r\n\t\t\tflag = IsVisible(ent.CenterPoint());\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanBradleyApcTarget\", this, ent);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn flag;\r\n\t}\r\n"},{"Name":"CanDesignFirework","Parameters":"(BasePlayer,PatternFirework)","ClassName":"PatternFirework","MethodCode":"\r\n\tprivate bool PlayerCanModify(BasePlayer player)\r\n\t{\r\n\t\tif (player == null || !player.CanInteract())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanDesignFirework\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tBuildingPrivlidge buildingPrivilege = GetBuildingPrivilege();\r\n\t\tif (buildingPrivilege != null && !buildingPrivilege.CanAdministrate(player))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnDispenserGather","Parameters":"(ResourceDispenser,BasePlayer,Item)","ClassName":"ResourceDispenser","MethodCode":"\r\n\tprivate void GiveResourceFromItem(BasePlayer entity, ItemAmount itemAmt, float gatherDamage, float destroyFraction, AttackEntity attackWeapon)\r\n\t{\r\n\t\tif (itemAmt.amount == 0f)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = Mathf.Min(gatherDamage, base.baseEntity.Health()) / base.baseEntity.MaxHealth();\r\n\t\tfloat num2 = itemAmt.startAmount / startingItemCounts;\r\n\t\tfloat f = Mathf.Clamp(itemAmt.startAmount * num / num2, 0f, itemAmt.amount);\r\n\t\tf = Mathf.Round(f);\r\n\t\tfloat num3 = f * destroyFraction * 2f;\r\n\t\tif (itemAmt.amount <= f + num3)\r\n\t\t{\r\n\t\t\tfloat num4 = (f + num3) / itemAmt.amount;\r\n\t\t\tf /= num4;\r\n\t\t\tnum3 /= num4;\r\n\t\t}\r\n\t\titemAmt.amount -= Mathf.Floor(f);\r\n\t\titemAmt.amount -= Mathf.Floor(num3);\r\n\t\tif (f < 1f)\r\n\t\t{\r\n\t\t\tf = ((UnityEngine.Random.Range(0f, 1f) <= f) ? 1f : 0f);\r\n\t\t\titemAmt.amount = 0f;\r\n\t\t}\r\n\t\tif (itemAmt.amount < 0f)\r\n\t\t{\r\n\t\t\titemAmt.amount = 0f;\r\n\t\t}\r\n\t\tif (f >= 1f)\r\n\t\t{\r\n\t\t\tint num5 = CalculateGatherBonus(entity, itemAmt, f);\r\n\t\t\tint iAmount = Mathf.FloorToInt(f) + num5;\r\n\t\t\tItem item = ItemManager.CreateByItemID(itemAmt.itemid, iAmount, 0uL);\r\n\t\t\tif (Interface.CallHook(\"OnDispenserGather\", this, entity, item) == null && item != null)\r\n\t\t\t{\r\n\t\t\t\tOverrideOwnership(item, attackWeapon);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, base.baseEntity, entity, attackWeapon);\r\n\t\t\t\tInterface.CallHook(\"OnDispenserGathered\", this, entity, item);\r\n\t\t\t\tentity.GiveItem(item, BaseEntity.GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnElevatorMove","Parameters":"(Elevator,int)","ClassName":"Elevator","MethodCode":"\r\n\tpublic bool RequestMoveLiftTo(int targetFloor, out float timeToTravel, Elevator fromElevator)\r\n\t{\r\n\t\ttimeToTravel = 0f;\r\n\t\tif (Interface.CallHook(\"OnElevatorMove\", this, targetFloor) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsBusy())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!IsStatic && ioEntity != null && !ioEntity.IsPowered())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!IsValidFloor(targetFloor))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tint num = LiftPositionToFloor();\r\n\t\tif (num == targetFloor)\r\n\t\t{\r\n\t\t\tOpenDoorsAtFloor(num);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!liftEntity.IsValid(base.isServer))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tElevatorLift elevatorLift = liftEntity.Get(base.isServer);\r\n\t\tif (!elevatorLift.CanMove())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tVector3 worldSpaceFloorPosition = GetWorldSpaceFloorPosition(targetFloor);\r\n\t\tif (!GamePhysics.LineOfSight(elevatorLift.transform.position, worldSpaceFloorPosition, 2097152))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tOnMoveBegin();\r\n\t\ttimeToTravel = TimeToTravelDistance(Mathf.Abs(elevatorLift.transform.position.y - worldSpaceFloorPosition.y));\r\n\t\tLeanTween.moveY(elevatorLift.gameObject, worldSpaceFloorPosition.y, timeToTravel).delay = LiftMoveDelay;\r\n\t\ttimeToTravel += LiftMoveDelay;\r\n\t\tSetFlag(Flags.Busy, b: true);\r\n\t\tif (targetFloor < Floor)\r\n\t\t{\r\n\t\t\televatorLift.ToggleHurtTrigger(state: true);\r\n\t\t}\r\n\t\televatorLift.SetFlag(Flags.Busy, b: true);\r\n\t\tInvoke(ClearBusy, timeToTravel + 1f);\r\n\t\televatorLift.NotifyNewFloor(targetFloor, Floor);\r\n\t\tEntityLinkBroadcast(delegate(Elevator elevatorEnt)\r\n\t\t{\r\n\t\t\televatorEnt.SetFlag(Flags.Busy, b: true);\r\n\t\t}, (ConstructionSocket socket) => socket.socketType == ConstructionSocket.Type.Elevator);\r\n\t\tif (ioEntity != null)\r\n\t\t{\r\n\t\t\tioEntity.SetFlag(Flags.Busy, b: true);\r\n\t\t\tioEntity.SendChangedToRoot(forceUpdate: true);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnEngineStatsRefreshed","Parameters":"(VehicleModuleEngine,Rust.Modular.EngineStorage)","ClassName":"VehicleModuleEngine","MethodCode":"\r\n\tpublic void RefreshPerformanceStats(EngineStorage engineStorage)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEngineStatsRefresh\", this, engineStorage) == null)\r\n\t\t{\r\n\t\t\tif (engineStorage == null)\r\n\t\t\t{\r\n\t\t\t\tIsUsable = false;\r\n\t\t\t\tPerformanceFractionAcceleration = 0f;\r\n\t\t\t\tPerformanceFractionTopSpeed = 0f;\r\n\t\t\t\tPerformanceFractionFuelEconomy = 0f;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tIsUsable = engineStorage.isUsable;\r\n\t\t\t\tPerformanceFractionAcceleration = GetPerformanceFraction(engineStorage.accelerationBoostPercent);\r\n\t\t\t\tPerformanceFractionTopSpeed = GetPerformanceFraction(engineStorage.topSpeedBoostPercent);\r\n\t\t\t\tPerformanceFractionFuelEconomy = GetPerformanceFraction(engineStorage.fuelEconomyBoostPercent);\r\n\t\t\t}\r\n\t\t\tOverallPerformanceFraction = (PerformanceFractionAcceleration + PerformanceFractionTopSpeed + PerformanceFractionFuelEconomy) / 3f;\r\n\t\t\tInterface.CallHook(\"OnEngineStatsRefreshed\", this, engineStorage);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerVoice","Parameters":"(BasePlayer,byte[])","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void OnReceivedVoice(byte[] data)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerVoice\", this, data) == null)\r\n\t\t{\r\n\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\tnetWrite.PacketID(Message.Type.VoiceData);\r\n\t\t\tnetWrite.EntityID(net.ID);\r\n\t\t\tnetWrite.BytesWithSize(data);\r\n\t\t\tfloat num = 0f;\r\n\t\t\tif (HasPlayerFlag(PlayerFlags.VoiceRangeBoost))\r\n\t\t\t{\r\n\t\t\t\tnum = Voice.voiceRangeBoostAmount;\r\n\t\t\t}\r\n\t\t\tnetWrite.Send(new SendInfo(BaseNetworkable.GetConnectionsWithin(base.transform.position, 100f + num))\r\n\t\t\t{\r\n\t\t\t\tpriority = Priority.Immediate\r\n\t\t\t});\r\n\t\t\tif (activeTelephone != null)\r\n\t\t\t{\r\n\t\t\t\tactiveTelephone.OnReceivedVoiceFromUser(data);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStructureRotate","Parameters":"(BuildingBlock,BasePlayer)","ClassName":"BuildingBlock","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void DoRotation(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && CanRotate(msg.player) && blockDefinition.canRotateAfterPlacement && Interface.CallHook(\"OnStructureRotate\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\tbase.transform.localRotation *= Quaternion.Euler(blockDefinition.rotationAmount);\r\n\t\t\tRefreshEntityLinks();\r\n\t\t\tUpdateSurroundingEntities();\r\n\t\t\tUpdateSkin(force: true);\r\n\t\t\tRefreshNeighbours(linkToNeighbours: false);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"RefreshSkin\"));\r\n\t\t\tif (!globalNetworkCooldown)\r\n\t\t\t{\r\n\t\t\t\tglobalNetworkCooldown = true;\r\n\t\t\t\tGlobalNetworkHandler.server.TrySendNetworkUpdate(this);\r\n\t\t\t\tCancelInvoke(ResetGlobalNetworkCooldown);\r\n\t\t\t\tInvoke(ResetGlobalNetworkCooldown, 15f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCargoShipSpawnCrate","Parameters":"(CargoShip)","ClassName":"CargoShip","MethodCode":"\r\n\tpublic void RespawnLoot()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnCargoShipSpawnCrate\", this) == null)\r\n\t\t{\r\n\t\t\tInvokeRepeating(PlayHorn, 0f, 8f);\r\n\t\t\tSpawnCrate(lockedCratePrefab.resourcePath);\r\n\t\t\tSpawnCrate(eliteCratePrefab.resourcePath);\r\n\t\t\tfor (int i = 0; i < 4; i++)\r\n\t\t\t{\r\n\t\t\t\tSpawnCrate(militaryCratePrefab.resourcePath);\r\n\t\t\t}\r\n\t\t\tfor (int j = 0; j < 4; j++)\r\n\t\t\t{\r\n\t\t\t\tSpawnCrate(junkCratePrefab.resourcePath);\r\n\t\t\t}\r\n\t\t\tlootRoundsPassed++;\r\n\t\t\tif (lootRoundsPassed >= loot_rounds)\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(RespawnLoot);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNpcEquipWeapon","Parameters":"(NPCPlayer,Item)","ClassName":"NPCPlayer","MethodCode":"\r\n\tpublic virtual void EquipWeapon(bool skipDeployDelay = false)\r\n\t{\r\n\t\tif (base.inventory == null || base.inventory.containerBelt == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.containerBelt.GetSlot(0);\r\n\t\tif (Interface.CallHook(\"OnNpcEquipWeapon\", this, slot) != null || slot == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUpdateActiveItem(base.inventory.containerBelt.GetSlot(0).uid);\r\n\t\tBaseEntity heldEntity = slot.GetHeldEntity();\r\n\t\tif (!(heldEntity != null))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tAttackEntity component = heldEntity.GetComponent<AttackEntity>();\r\n\t\tif (component != null)\r\n\t\t{\r\n\t\t\tif (skipDeployDelay)\r\n\t\t\t{\r\n\t\t\t\tcomponent.ResetAttackCooldown();\r\n\t\t\t}\r\n\t\t\tcomponent.TopUpAmmo();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnExcavatorGather","Parameters":"(ExcavatorArm,Item)","ClassName":"ExcavatorArm","MethodCode":"\r\n\tpublic void ProduceResources()\r\n\t{\r\n\t\tfloat num = resourceProductionTickRate / timeForFullResources;\r\n\t\tfloat num2 = resourcesToMine[resourceMiningIndex].amount * num;\r\n\t\tpendingResources[resourceMiningIndex].amount += num2;\r\n\t\tItemAmount[] array = pendingResources;\r\n\t\tforeach (ItemAmount itemAmount in array)\r\n\t\t{\r\n\t\t\tif (!(itemAmount.amount >= (float)outputPiles.Count))\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tint num3 = Mathf.FloorToInt(itemAmount.amount / (float)outputPiles.Count);\r\n\t\t\titemAmount.amount -= num3 * 2;\r\n\t\t\tforeach (ExcavatorOutputPile outputPile in outputPiles)\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(resourcesToMine[resourceMiningIndex].itemDef, num3, 0uL);\r\n\t\t\t\tif (Interface.CallHook(\"OnExcavatorGather\", this, item) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnExcavatorProduceItem(item, this);\r\n\t\t\t\tif (!item.MoveToContainer(outputPile.inventory))\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Drop(outputPile.GetDropPosition(), outputPile.GetDropVelocity());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanSpectateTarget","Parameters":"(BasePlayer,string)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void UpdateSpectateTarget(string strName)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanSpectateTarget\", this, strName) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tspectateFilter = strName;\r\n\t\tIEnumerable<BaseEntity> enumerable = null;\r\n\t\tif (spectateFilter.StartsWith(\"@\"))\r\n\t\t{\r\n\t\t\tstring filter = spectateFilter.Substring(1);\r\n\t\t\tenumerable = (from x in BaseNetworkable.serverEntities\r\n\t\t\t\twhere x.name.Contains(filter, CompareOptions.IgnoreCase)\r\n\t\t\t\twhere x != this\r\n\t\t\t\tselect x).Cast<BaseEntity>();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tIEnumerable<BasePlayer> source = activePlayerList.Where((BasePlayer x) => !x.IsSpectating() && !x.IsDead() && !x.IsSleeping());\r\n\t\t\tif (strName.Length > 0)\r\n\t\t\t{\r\n\t\t\t\tsource = from x in source\r\n\t\t\t\t\twhere x.displayName.Contains(spectateFilter, CompareOptions.IgnoreCase) || x.UserIDString.Contains(spectateFilter)\r\n\t\t\t\t\twhere x != this\r\n\t\t\t\t\tselect x;\r\n\t\t\t}\r\n\t\t\tsource = source.OrderBy((BasePlayer x) => x.displayName);\r\n\t\t\tenumerable = source.Cast<BaseEntity>();\r\n\t\t}\r\n\t\tBaseEntity[] array = enumerable.ToArray();\r\n\t\tif (array.Length == 0)\r\n\t\t{\r\n\t\t\tChatMessage(\"No valid spectate targets!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = array[SpectateOffset % array.Length];\r\n\t\tif (baseEntity != null)\r\n\t\t{\r\n\t\t\tSpectatePlayer(baseEntity);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnShopCancelClick","Parameters":"(ShopFront,BasePlayer)","ClassName":"ShopFront","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void CancelClicked(RPCMessage msg)\r\n\t{\r\n\t\tif (IsTradingPlayer(msg.player) && Interface.CallHook(\"OnShopCancelClick\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\t_ = (bool)vendorPlayer;\r\n\t\t\t_ = (bool)customerPlayer;\r\n\t\t\tResetTrade();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnShopCompleteTrade","Parameters":"(ShopFront)","ClassName":"ShopFront","MethodCode":"\r\n\tpublic void CompleteTrade()\r\n\t{\r\n\t\tif (vendorPlayer != null && customerPlayer != null && HasFlag(Flags.Reserved1) && HasFlag(Flags.Reserved2))\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnShopCompleteTrade\", this) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tswappingItems = true;\r\n\t\t\t\tfor (int num = vendorInventory.capacity - 1; num >= 0; num--)\r\n\t\t\t\t{\r\n\t\t\t\t\tItem slot = vendorInventory.GetSlot(num);\r\n\t\t\t\t\tItem slot2 = customerInventory.GetSlot(num);\r\n\t\t\t\t\tif ((bool)customerPlayer && slot != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcustomerPlayer.GiveItem(slot);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((bool)vendorPlayer && slot2 != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvendorPlayer.GiveItem(slot2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tswappingItems = false;\r\n\t\t\t}\r\n\t\t\tEffect.server.Run(transactionCompleteEffect.resourcePath, this, 0u, new Vector3(0f, 1f, 0f), Vector3.zero);\r\n\t\t}\r\n\t\tResetTrade();\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnLootEntityEnd","Parameters":"(BasePlayer,ItemBasedFlowRestrictor)","ClassName":"ItemBasedFlowRestrictor","MethodCode":"\r\n\tpublic void PlayerStoppedLooting(BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnLootEntityEnd\", player, this);\r\n\t}\r\n"},{"Name":"OnPlayerCorpseSpawn","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual BaseCorpse CreateCorpse(PlayerFlags flagsOnDeath, Vector3 posOnDeath, Quaternion rotOnDeath, List<TriggerBase> triggersOnDeath, bool forceServerSide = false)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerCorpseSpawn\", this) != null)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"Create corpse\"))\r\n\t\t{\r\n\t\t\tstring strCorpsePrefab = ((!(ConVar.Physics.serversideragdolls || forceServerSide)) ? \"assets/prefabs/player/player_corpse.prefab\" : \"assets/prefabs/player/player_corpse_new.prefab\");\r\n\t\t\tbool flag = false;\r\n\t\t\tif (ConVar.Global.cinematicGingerbreadCorpses)\r\n\t\t\t{\r\n\t\t\t\tforeach (Item item in inventory.containerWear.itemList)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (item != null && item.info.TryGetComponent<ItemCorpseOverride>(out var component))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstrCorpsePrefab = ((GetFloatBasedOnUserID(userID, 4332uL) > 0.5f) ? component.FemaleCorpse.resourcePath : component.MaleCorpse.resourcePath);\r\n\t\t\t\t\t\tflag = component.BlockWearableCopy;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPlayerCorpse playerCorpse = DropCorpse(strCorpsePrefab, posOnDeath, rotOnDeath, flagsOnDeath, modelState) as PlayerCorpse;\r\n\t\t\tif ((bool)playerCorpse)\r\n\t\t\t{\r\n\t\t\t\tplayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));\r\n\t\t\t\tif (!flag)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayerCorpse.TakeFrom(this, inventory.containerMain, inventory.containerWear, inventory.containerBelt);\r\n\t\t\t\t}\r\n\t\t\t\tplayerCorpse.playerName = displayName;\r\n\t\t\t\tplayerCorpse.streamerName = RandomUsernames.Get(userID);\r\n\t\t\t\tplayerCorpse.playerSteamID = userID;\r\n\t\t\t\tplayerCorpse.underwearSkin = GetUnderwearSkin();\r\n\t\t\t\tif (!CollectionEx.IsNullOrEmpty(triggersOnDeath))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (TriggerBase item2 in triggersOnDeath)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item2 is TriggerParent triggerParent)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttriggerParent.ForceParentEarly(playerCorpse);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tplayerCorpse.Spawn();\r\n\t\t\t\tplayerCorpse.TakeChildren(this);\r\n\t\t\t\tResourceDispenser component2 = playerCorpse.GetComponent<ResourceDispenser>();\r\n\t\t\t\tint num = 2;\r\n\t\t\t\tif (lifeStory != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum += Mathf.Clamp(Mathf.FloorToInt(lifeStory.secondsAlive / 180f), 0, 20);\r\n\t\t\t\t}\r\n\t\t\t\tcomponent2.containedItems.Add(new ItemAmount(ItemManager.FindItemDefinition(\"fat.animal\"), num));\r\n\t\t\t\tInterface.CallHook(\"OnPlayerCorpseSpawned\", this, playerCorpse);\r\n\t\t\t\treturn playerCorpse;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t\tstatic float GetFloatBasedOnUserID(ulong steamid, ulong seed)\r\n\t\t{\r\n\t\t\tUnityEngine.Random.State state = UnityEngine.Random.state;\r\n\t\t\tUnityEngine.Random.InitState((int)(seed + steamid));\r\n\t\t\tfloat result = UnityEngine.Random.Range(0f, 1f);\r\n\t\t\tUnityEngine.Random.state = state;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTechTreeNodeUnlock","Parameters":"(Workbench,TechTreeData.NodeInstance,BasePlayer)","ClassName":"Workbench","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_TechTreeUnlock(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tint id = msg.read.Int32();\r\n\t\tint level = msg.read.Int32();\r\n\t\tTechTreeData techTreeForLevel = GetTechTreeForLevel(level);\r\n\t\tif (techTreeForLevel == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tTechTreeData.NodeInstance byID = techTreeForLevel.GetByID(id);\r\n\t\tif (byID == null)\r\n\t\t{\r\n\t\t\tDebug.Log(\"Node for unlock not found :\" + id);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!techTreeForLevel.PlayerCanUnlock(player, byID))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (byID.IsGroup())\r\n\t\t\t{\r\n\t\t\t\tforeach (int output in byID.outputs)\r\n\t\t\t\t{\r\n\t\t\t\t\tTechTreeData.NodeInstance byID2 = techTreeForLevel.GetByID(output);\r\n\t\t\t\t\tif (byID2 != null && byID2.itemDef != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tplayer.blueprints.Unlock(byID2.itemDef);\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnBlueprintLearned(player, byID2.itemDef, \"techtree\", 0, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDebug.Log(\"Player unlocked group :\" + byID.groupName);\r\n\t\t\t}\r\n\t\t\telse if (byID.itemDef != null && Interface.CallHook(\"OnTechTreeNodeUnlock\", this, byID, player) == null)\r\n\t\t\t{\r\n\t\t\t\tint tax;\r\n\t\t\t\tint num = ScrapForResearch(byID.itemDef, techTreeForLevel.techTreeLevel, out tax);\r\n\t\t\t\tint itemid = ItemManager.FindItemDefinition(\"scrap\").itemid;\r\n\t\t\t\tif (player.inventory.GetAmount(itemid) >= num + tax)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.inventory.Take(null, itemid, num + tax);\r\n\t\t\t\t\tplayer.blueprints.Unlock(byID.itemDef);\r\n\t\t\t\t\tInterface.CallHook(\"OnTechTreeNodeUnlocked\", this, byID, player);\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnBlueprintLearned(player, byID.itemDef, \"techtree\", num + tax, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBedMade","Parameters":"(SleepingBag,BasePlayer)","ClassName":"SleepingBag","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_MakeBed(RPCMessage msg)\r\n\t{\r\n\t\tif (!canBePublic || !IsPublic() || !msg.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ConVar.Server.max_sleeping_bags > 0)\r\n\t\t{\r\n\t\t\tCanAssignBedResult? canAssignBedResult = CanAssignBed(msg.player, this, msg.player.userID, 1, 0, this);\r\n\t\t\tif (canAssignBedResult.HasValue)\r\n\t\t\t{\r\n\t\t\t\tif (canAssignBedResult.Value.Result != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Red_Normal, cannotMakeBedPhrase, false);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Blue_Long, bagLimitPhrase, false, canAssignBedResult.Value.Count.ToString(), canAssignBedResult.Value.Max.ToString());\r\n\t\t\t\t}\r\n\t\t\t\tif (canAssignBedResult.Value.Result != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tulong num = deployerUserID;\r\n\t\tdeployerUserID = msg.player.userID;\r\n\t\tNotifyPlayer(num);\r\n\t\tNotifyPlayer(deployerUserID);\r\n\t\tOnBagChangedOwnership(this, num);\r\n\t\tInterface.CallHook(\"OnBedMade\", this, msg.player);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnEngineStart","Parameters":"(MotorRowboat,BasePlayer)","ClassName":"MotorRowboat","MethodCode":"\r\n\tpublic void EngineToggle(bool wantsOn)\r\n\t{\r\n\t\tif (!fuelSystem.HasFuel(forceCheck: true))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer driver = GetDriver();\r\n\t\tif (!wantsOn || Interface.CallHook(\"OnEngineStart\", this, driver) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.On, wantsOn);\r\n\t\t\tif (wantsOn)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnEngineStarted\", this, driver);\r\n\t\t\t}\r\n\t\t\tif (wantsOn)\r\n\t\t\t{\r\n\t\t\t\trigidBody.WakeUp();\r\n\t\t\t\tbuoyancy.Wake();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVendingTransaction","Parameters":"(VendingMachine,BasePlayer,int,int,ItemContainer)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic bool DoTransaction(BasePlayer buyer, int sellOrderId, int numberOfTransactions = 1, ItemContainer targetContainer = null, Action<BasePlayer, Item> onCurrencyRemoved = null, Action<BasePlayer, Item> onItemPurchased = null, MarketTerminal droneMarketTerminal = null)\r\n\t{\r\n\t\tif (sellOrderId < 0 || sellOrderId >= sellOrders.sellOrders.Count)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (targetContainer == null && Vector3.Distance(buyer.transform.position, base.transform.position) > 4f)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnVendingTransaction\", this, buyer, sellOrderId, numberOfTransactions, targetContainer);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tProtoBuf.VendingMachine.SellOrder sellOrder = sellOrders.sellOrders[sellOrderId];\r\n\t\tList<Item> obj2 = Facepunch.Pool.Get<List<Item>>();\r\n\t\tGetItemsToSell(sellOrder, obj2);\r\n\t\tif (obj2 == null || obj2.Count == 0)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tnumberOfTransactions = Mathf.Clamp(numberOfTransactions, 1, obj2[0].hasCondition ? 1 : 1000000);\r\n\t\tint num = sellOrder.itemToSellAmount * numberOfTransactions;\r\n\t\tint num2 = obj2.Sum((Item x) => x.amount);\r\n\t\tif (num > num2)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tList<Item> source = buyer.inventory.FindItemsByItemID(sellOrder.currencyID);\r\n\t\tif (sellOrder.currencyIsBP)\r\n\t\t{\r\n\t\t\tsource = (from x in buyer.inventory.FindItemsByItemID(blueprintBaseDef.itemid)\r\n\t\t\t\twhere x.blueprintTarget == sellOrder.currencyID\r\n\t\t\t\tselect x).ToList();\r\n\t\t}\r\n\t\tsource = (from x in source\r\n\t\t\twhere !x.hasCondition || (x.conditionNormalized >= 0.5f && x.maxConditionNormalized > 0.5f)\r\n\t\t\twhere x.GetItemVolume() <= maxCurrencyVolume\r\n\t\t\tselect x).ToList();\r\n\t\tif (source.Count == 0)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tint num3 = source.Sum((Item x) => x.amount);\r\n\t\tint num4 = GetTotalPriceForOrder(sellOrder) * numberOfTransactions;\r\n\t\tif (num3 < num4)\r\n\t\t{\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttransactionActive = true;\r\n\t\tint num5 = 0;\r\n\t\tforeach (Item item3 in source)\r\n\t\t{\r\n\t\t\tint num6 = Mathf.Min(num4 - num5, item3.amount);\r\n\t\t\tItem item = ((item3.amount > num6) ? item3.SplitItem(num6) : item3);\r\n\t\t\tTakeCurrencyItem(item);\r\n\t\t\tonCurrencyRemoved?.Invoke(buyer, item);\r\n\t\t\tnum5 += num6;\r\n\t\t\tif (num5 >= num4)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Rust.Analytics.Azure.OnBuyFromVendingMachine(buyer, this, sellOrder.itemToSellID, sellOrder.itemToSellAmount * numberOfTransactions, sellOrder.itemToSellIsBP, sellOrder.currencyID, num4, sellOrder.currencyIsBP, numberOfTransactions, sellOrder.priceMultiplier, droneMarketTerminal);\r\n\t\tint num7 = 0;\r\n\t\tforeach (Item item4 in obj2)\r\n\t\t{\r\n\t\t\tint num8 = num - num7;\r\n\t\t\tItem item2 = ((item4.amount > num8) ? item4.SplitItem(num8) : item4);\r\n\t\t\tif (item2 == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogError(\"Vending machine error, contact developers!\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnum7 += item2.amount;\r\n\t\t\t\tobject obj3 = Interface.CallHook(\"CanPurchaseItem\", buyer, item2, onItemPurchased, this, targetContainer);\r\n\t\t\t\tif (obj3 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!(obj3 is bool))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (bool)obj3;\r\n\t\t\t\t}\r\n\t\t\t\tRecordSaleAnalytics(item2, sellOrderId);\r\n\t\t\t\tif (targetContainer == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tGiveSoldItem(item2, buyer);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!item2.MoveToContainer(targetContainer))\r\n\t\t\t\t{\r\n\t\t\t\t\titem2.Drop(targetContainer.dropPosition, targetContainer.dropVelocity);\r\n\t\t\t\t}\r\n\t\t\t\tonItemPurchased?.Invoke(buyer, item2);\r\n\t\t\t}\r\n\t\t\tif (num7 >= num)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\tUpdateEmptyFlag();\r\n\t\ttransactionActive = false;\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnClientCommand","Parameters":"(Network.Connection,string)","ClassName":"ConsoleNetwork","MethodCode":"\r\n\tinternal static void OnClientCommand(Message packet)\r\n\t{\r\n\t\tif (packet.read.Unread > ConVar.Server.maxpacketsize_command)\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.LogWarning(\"Dropping client command due to size\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttimer.Restart();\r\n\t\tstring text = packet.read.StringRaw();\r\n\t\tif (packet.connection == null || !packet.connection.connected)\r\n\t\t{\r\n\t\t\tUnityEngine.Debug.LogWarning(\"Client without connection tried to run command: \" + text);\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnClientCommand\", packet.connection, text) == null)\r\n\t\t{\r\n\t\t\tstring text2 = ConsoleSystem.Run(ConsoleSystem.Option.Server.FromConnection(packet.connection).Quiet(), text);\r\n\t\t\tif (!string.IsNullOrEmpty(text2))\r\n\t\t\t{\r\n\t\t\t\tSendClientReply(packet.connection, text2);\r\n\t\t\t}\r\n\t\t\tif (timer.Elapsed > RuntimeProfiler.ConsoleCommandWarningThreshold)\r\n\t\t\t{\r\n\t\t\t\tLagSpikeProfiler.ConsoleCommand(timer.Elapsed, packet, text);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnResearchCostDetermine","Parameters":"(ItemDefinition)","ClassName":"ResearchTable","MethodCode":"\r\n\tpublic static int ScrapForResearch(ItemDefinition info)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnResearchCostDetermine\", info);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\tif (info.isRedirectOf != null)\r\n\t\t{\r\n\t\t\treturn ScrapForResearch(info.isRedirectOf);\r\n\t\t}\r\n\t\tint result = 0;\r\n\t\tif (info.rarity == Rarity.Common)\r\n\t\t{\r\n\t\t\tresult = 20;\r\n\t\t}\r\n\t\tif (info.rarity == Rarity.Uncommon)\r\n\t\t{\r\n\t\t\tresult = 75;\r\n\t\t}\r\n\t\tif (info.rarity == Rarity.Rare)\r\n\t\t{\r\n\t\t\tresult = 125;\r\n\t\t}\r\n\t\tif (info.rarity == Rarity.VeryRare || info.rarity == Rarity.None)\r\n\t\t{\r\n\t\t\tresult = 500;\r\n\t\t}\r\n\t\tItemBlueprint itemBlueprint = ItemManager.FindBlueprint(info);\r\n\t\tif (itemBlueprint != null && itemBlueprint.defaultBlueprint)\r\n\t\t{\r\n\t\t\treturn ConVar.Server.defaultBlueprintResearchCost;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnPlayerSleep","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual void StartSleeping()\r\n\t{\r\n\t\tif (!IsSleeping())\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerSleep\", this);\r\n\t\t\tif (IsRestrained)\r\n\t\t\t{\r\n\t\t\t\tinventory.SetLockedByRestraint(flag: false);\r\n\t\t\t}\r\n\t\t\tif (InSafeZone() && !IsInvoking(ScheduledDeath))\r\n\t\t\t{\r\n\t\t\t\tInvoke(ScheduledDeath, NPCAutoTurret.sleeperhostiledelay);\r\n\t\t\t}\r\n\t\t\tBaseMountable baseMountable = GetMounted();\r\n\t\t\tif (baseMountable != null && !AllowSleeperMounting(baseMountable))\r\n\t\t\t{\r\n\t\t\t\tEnsureDismounted();\r\n\t\t\t}\r\n\t\t\tSetPlayerFlag(PlayerFlags.Sleeping, b: true);\r\n\t\t\tsleepStartTime = UnityEngine.Time.time;\r\n\t\t\tsleepingPlayerList.TryAdd(this);\r\n\t\t\tbots.Remove(this);\r\n\t\t\tCancelInvoke(InventoryUpdate);\r\n\t\t\tCancelInvoke(TeamUpdate);\r\n\t\t\tCancelInvoke(UpdateClanLastSeen);\r\n\t\t\tinventory.loot.Clear();\r\n\t\t\tinventory.containerMain.OnChanged();\r\n\t\t\tinventory.containerBelt.OnChanged();\r\n\t\t\tinventory.containerWear.OnChanged();\r\n\t\t\tEnablePlayerCollider();\r\n\t\t\tif (!IsLoadingAfterTransfer())\r\n\t\t\t{\r\n\t\t\t\tRemovePlayerRigidbody();\r\n\t\t\t\tTurnOffAllLights();\r\n\t\t\t}\r\n\t\t\tSetServerFall(wantsOn: true);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnXmasLootDistribute","Parameters":"(XMasRefill)","ClassName":"XMasRefill","MethodCode":"\r\n\tpublic override void ServerInit()\r\n\t{\r\n\t\tbase.ServerInit();\r\n\t\tif (!XMas.enabled)\r\n\t\t{\r\n\t\t\tInvoke(RemoveMe, 0.1f);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tgoodKids = ((BasePlayer.activePlayerList != null) ? new List<BasePlayer>(BasePlayer.activePlayerList) : new List<BasePlayer>());\r\n\t\tstockings = ((Stocking.stockings != null) ? new List<Stocking>(Stocking.stockings.Values) : new List<Stocking>());\r\n\t\tInvoke(RemoveMe, 60f);\r\n\t\tif (Interface.CallHook(\"OnXmasLootDistribute\", this) == null)\r\n\t\t{\r\n\t\t\tInvokeRepeating(DistributeLoot, 3f, 0.02f);\r\n\t\t\tInvoke(SendBells, 0.5f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemStacked","Parameters":"(Item,Item,ItemContainer,int)","ClassName":"Item","MethodCode":"\r\n\tpublic bool MoveToContainer(ItemContainer newcontainer, int iTargetPos = -1, bool allowStack = true, bool ignoreStackLimit = false, BasePlayer sourcePlayer = null, bool allowSwap = true)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"MoveToContainer\"))\r\n\t\t{\r\n\t\t\tbool flag = iTargetPos == -1;\r\n\t\t\tItemContainer itemContainer = parent;\r\n\t\t\tif (iTargetPos == -1)\r\n\t\t\t{\r\n\t\t\t\tif (allowStack && info.stackable > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (Item item3 in from x in newcontainer.FindItemsByItemID(info.itemid)\r\n\t\t\t\t\t\torderby x.position\r\n\t\t\t\t\t\tselect x)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item3.CanStack(this) && (ignoreStackLimit || item3.amount < item3.MaxStackable()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tiTargetPos = item3.position;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (iTargetPos == -1 && newcontainer.GetEntityOwner(returnHeldEntity: true) is IIdealSlotEntity idealSlotEntity)\r\n\t\t\t\t{\r\n\t\t\t\t\tiTargetPos = idealSlotEntity.GetIdealSlot(sourcePlayer, newcontainer, this);\r\n\t\t\t\t\tif (iTargetPos == int.MinValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (iTargetPos == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (newcontainer == parent)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbool flag2 = newcontainer.HasFlag(ItemContainer.Flag.Clothing) && info.isWearable;\r\n\t\t\t\t\tItemModWearable itemModWearable = info.ItemModWearable;\r\n\t\t\t\t\tfor (int i = 0; i < newcontainer.capacity; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItem slot = newcontainer.GetSlot(i);\r\n\t\t\t\t\t\tif (slot == null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (CanMoveTo(newcontainer, i))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tiTargetPos = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (flag2 && slot != null && !slot.info.ItemModWearable.CanExistWith(itemModWearable))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tiTargetPos = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (newcontainer.HasAvailableSlotsDefined && DoItemSlotsConflict(slot))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tiTargetPos = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flag2 && iTargetPos == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tiTargetPos = newcontainer.capacity - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (iTargetPos == -1)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!CanMoveTo(newcontainer, iTargetPos))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (iTargetPos >= 0 && newcontainer.SlotTaken(this, iTargetPos))\r\n\t\t\t{\r\n\t\t\t\tItem slot2 = newcontainer.GetSlot(iTargetPos);\r\n\t\t\t\tif (slot2 == this)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (allowStack && slot2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint num = slot2.MaxStackable();\r\n\t\t\t\t\tif (slot2.CanStack(this))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (ignoreStackLimit)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnum = int.MaxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (slot2.amount >= num)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tint num2 = Mathf.Min(num - slot2.amount, amount);\r\n\t\t\t\t\t\tslot2.amount += num2;\r\n\t\t\t\t\t\tnewcontainer.onItemAddedToStack?.Invoke(slot2, num2);\r\n\t\t\t\t\t\tamount -= num2;\r\n\t\t\t\t\t\tslot2.MarkDirty();\r\n\t\t\t\t\t\tInterface.CallHook(\"OnItemStacked\", slot2, this, newcontainer, num2);\r\n\t\t\t\t\t\tMarkDirty();\r\n\t\t\t\t\t\tif (amount <= 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tRemoveFromWorld();\r\n\t\t\t\t\t\t\tRemoveFromContainer();\r\n\t\t\t\t\t\t\tRemove();\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (flag)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn MoveToContainer(newcontainer, -1, allowStack, ignoreStackLimit, sourcePlayer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (parent != null && allowSwap && slot2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tItemContainer itemContainer2 = parent;\r\n\t\t\t\t\tint iTargetPos2 = position;\r\n\t\t\t\t\tItemContainer newcontainer2 = slot2.parent;\r\n\t\t\t\t\tint num3 = slot2.position;\r\n\t\t\t\t\tif (!slot2.CanMoveTo(itemContainer2, iTargetPos2))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (itemContainer2.maxStackSize > 0 && slot2.amount > itemContainer2.maxStackSize)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItem item = slot2.SplitItem(slot2.amount - itemContainer2.maxStackSize);\r\n\t\t\t\t\t\tif (item == null || !item.MoveToContainer(newcontainer2, -1, allowStack: false, ignoreStackLimit: false, sourcePlayer, allowSwap: false))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tslot2.amount += item.amount;\r\n\t\t\t\t\t\t\titem.Remove();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tBaseEntity entityOwner = GetEntityOwner();\r\n\t\t\t\t\tBaseEntity entityOwner2 = slot2.GetEntityOwner();\r\n\t\t\t\t\tRemoveFromContainer();\r\n\t\t\t\t\tslot2.RemoveFromContainer();\r\n\t\t\t\t\tRemoveConflictingSlots(newcontainer, entityOwner, sourcePlayer);\r\n\t\t\t\t\tslot2.RemoveConflictingSlots(itemContainer2, entityOwner2, sourcePlayer);\r\n\t\t\t\t\tif (!slot2.MoveToContainer(itemContainer2, iTargetPos2, allowStack: true, ignoreStackLimit: false, sourcePlayer) || !MoveToContainer(newcontainer, iTargetPos, allowStack: true, ignoreStackLimit: false, sourcePlayer))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tRemoveFromContainer();\r\n\t\t\t\t\t\tslot2.RemoveFromContainer();\r\n\t\t\t\t\t\tSetParent(itemContainer2);\r\n\t\t\t\t\t\tposition = iTargetPos2;\r\n\t\t\t\t\t\tslot2.SetParent(newcontainer2);\r\n\t\t\t\t\t\tslot2.position = num3;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (parent == newcontainer)\r\n\t\t\t{\r\n\t\t\t\tif (iTargetPos >= 0 && iTargetPos != position && !parent.SlotTaken(this, iTargetPos))\r\n\t\t\t\t{\r\n\t\t\t\t\tposition = iTargetPos;\r\n\t\t\t\t\tMarkDirty();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (newcontainer.maxStackSize > 0 && newcontainer.maxStackSize < amount)\r\n\t\t\t{\r\n\t\t\t\tItem item2 = SplitItem(newcontainer.maxStackSize);\r\n\t\t\t\tif (item2 != null && !item2.MoveToContainer(newcontainer, iTargetPos, allowStack: false, ignoreStackLimit: false, sourcePlayer) && (itemContainer == null || !item2.MoveToContainer(itemContainer, -1, allowStack: true, ignoreStackLimit: false, sourcePlayer)))\r\n\t\t\t\t{\r\n\t\t\t\t\tDroppedItem droppedItem = item2.Drop(newcontainer.dropPosition, newcontainer.dropVelocity) as DroppedItem;\r\n\t\t\t\t\tif (droppedItem != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdroppedItem.DroppedBy = sourcePlayer?.userID ?? ((BasePlayer.EncryptedValue<ulong>)0uL);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tInterface.CallHook(\"OnItemStacked\", item2, this, newcontainer);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (!newcontainer.CanAccept(this))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tBaseEntity entityOwner3 = GetEntityOwner();\r\n\t\t\tRemoveFromContainer();\r\n\t\t\tRemoveFromWorld();\r\n\t\t\tRemoveConflictingSlots(newcontainer, entityOwner3, sourcePlayer);\r\n\t\t\tposition = iTargetPos;\r\n\t\t\tSetParent(newcontainer);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCargoShipHarborArrived","Parameters":"(CargoShip)","ClassName":"CargoShip","MethodCode":"\r\n\tpublic void OnArrivedAtHarbor()\r\n\t{\r\n\t\tSetFlag(Flags.Reserved1, b: true);\r\n\t\tList<Transform> obj = Pool.Get<List<Transform>>();\r\n\t\tfloat num = UnityEngine.Random.Range(dock_time * 0.05f, dock_time * 0.1f);\r\n\t\tforeach (HarborCraneContainerPickup allCrane in HarborCraneContainerPickup.AllCranes)\r\n\t\t{\r\n\t\t\tif (allCrane == null || allCrane.isClient || allCrane.Distance2D(this) > 150f)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tobj.Clear();\r\n\t\t\tCargoShipContainerDestination[] array = containerDestinations;\r\n\t\t\tforeach (CargoShipContainerDestination cargoShipContainerDestination in array)\r\n\t\t\t{\r\n\t\t\t\tif (allCrane.IsDestinationValidForCrane(cargoShipContainerDestination))\r\n\t\t\t\t{\r\n\t\t\t\t\tobj.Add(cargoShipContainerDestination.transform);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (obj.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tallCrane.AssignDestination(obj, this, num);\r\n\t\t\t\tnum += dock_time * UnityEngine.Random.Range(0.1f, 0.15f);\r\n\t\t\t}\r\n\t\t}\r\n\t\tPool.FreeUnmanaged(ref obj);\r\n\t\tInvoke(PreHarborLeaveHorn, dock_time - 60f);\r\n\t\tif (refresh_loot_on_dock)\r\n\t\t{\r\n\t\t\tRespawnLoot();\r\n\t\t}\r\n\t\tif (harborIndex == 0)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved3, b: true);\r\n\t\t}\r\n\t\telse if (harborIndex == 1)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved4, b: true);\r\n\t\t}\r\n\t\tInvoke(LeaveHarbor, dock_time);\r\n\t\tInterface.CallHook(\"OnCargoShipHarborArrived\", this);\r\n\t}\r\n"},{"Name":"OnPhoneAnswered","Parameters":"(PhoneController,PhoneController)","ClassName":"PhoneController","MethodCode":"\r\n\tpublic void AnswerPhone(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif (IsInvoking(TimeOutDialing))\r\n\t\t{\r\n\t\t\tCancelInvoke(TimeOutDialing);\r\n\t\t}\r\n\t\tif (!(activeCallTo == null))\r\n\t\t{\r\n\t\t\tBasePlayer player = msg.player;\r\n\t\t\tif (Interface.CallHook(\"OnPhoneAnswer\", this, activeCallTo) == null)\r\n\t\t\t{\r\n\t\t\t\tUpdateServerPlayer(player);\r\n\t\t\t\tBeginCall();\r\n\t\t\t\tactiveCallTo.BeginCall();\r\n\t\t\t\tInterface.CallHook(\"OnPhoneAnswered\", this, activeCallTo);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnRconInitialize","Parameters":"()","ClassName":"RCon","MethodCode":"\r\n\tpublic static void Initialize()\r\n\t{\r\n\t\tif (Interface.CallHook(\"IOnRconInitialize\") != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Port == 0)\r\n\t\t{\r\n\t\t\tPort = Server.port;\r\n\t\t}\r\n\t\tPassword = CommandLine.GetSwitch(\"-rcon.password\", CommandLine.GetSwitch(\"+rcon.password\", \"\"));\r\n\t\tif (Password == \"password\" || Password == \"\")\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tOutput.OnMessage += OnMessage;\r\n\t\tif (Web)\r\n\t\t{\r\n\t\t\tlistenerNew = new Listener();\r\n\t\t\tif (!string.IsNullOrEmpty(Ip))\r\n\t\t\t{\r\n\t\t\t\tlistenerNew.Address = Ip;\r\n\t\t\t}\r\n\t\t\tlistenerNew.Password = Password;\r\n\t\t\tlistenerNew.Port = Port;\r\n\t\t\tlistenerNew.SslCertificate = CommandLine.GetSwitch(\"-rcon.ssl\", null);\r\n\t\t\tlistenerNew.SslCertificatePassword = CommandLine.GetSwitch(\"-rcon.sslpwd\", null);\r\n\t\t\tlistenerNew.OnMessage = delegate(IPAddress ip, int id, string msg)\r\n\t\t\t{\r\n\t\t\t\tCommand item = JsonConvert.DeserializeObject<Command>(msg);\r\n\t\t\t\titem.Ip = ip;\r\n\t\t\t\titem.ConnectionId = id;\r\n\t\t\t\tCommands.Enqueue(item);\r\n\t\t\t};\r\n\t\t\tlistenerNew.Start();\r\n\t\t\tUnityEngine.Debug.Log(\"WebSocket RCon Started on \" + Port);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlistener = new RConListener();\r\n\t\t\tUnityEngine.Debug.Log(\"RCon Started on \" + Port);\r\n\t\t\tUnityEngine.Debug.Log(\"Source style TCP Rcon is deprecated. Please switch to Websocket Rcon before it goes away.\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseHBHFSensor","Parameters":"(BasePlayer,HBHFSensor)","ClassName":"HBHFSensor","MethodCode":"\r\n\tpublic bool CanUse(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseHBHFSensor\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn player.CanBuild();\r\n\t}\r\n"},{"Name":"OnTeamCreate","Parameters":"(BasePlayer)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void trycreateteam(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tif (maxTeamSize == 0)\r\n\t\t{\r\n\t\t\targ.ReplyWith(\"Teams are disabled on this server\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (basePlayer.currentTeam == 0L && Interface.CallHook(\"OnTeamCreate\", basePlayer) == null)\r\n\t\t{\r\n\t\t\tPlayerTeam playerTeam = ServerInstance.CreateTeam();\r\n\t\t\tPlayerTeam playerTeam2 = playerTeam;\r\n\t\t\tplayerTeam2.teamLeader = basePlayer.userID;\r\n\t\t\tplayerTeam2.AddPlayer(basePlayer);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnTeamChanged(\"created\", playerTeam2.teamID, basePlayer.userID, basePlayer.userID, playerTeam2.members);\r\n\t\t\tInterface.CallHook(\"OnTeamCreated\", basePlayer, playerTeam);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRocketLaunched","Parameters":"(BasePlayer,BaseEntity)","ClassName":"BaseLauncher","MethodCode":"\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server]\r\n\tprivate void SV_Launch(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!VerifyClientAttack(player))\r\n\t\t{\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (reloadFinished && HasReloadCooldown())\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Reloading (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"reload_cooldown\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treloadStarted = false;\r\n\t\treloadFinished = false;\r\n\t\tif (!base.UsingInfiniteAmmoCheat)\r\n\t\t{\r\n\t\t\tif (primaryMagazine.contents <= 0)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Magazine empty (\" + base.ShortPrefabName + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"magazine_empty\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tModifyAmmoCount(-1);\r\n\t\t}\r\n\t\tSignalBroadcast(Signal.Attack, string.Empty, player.net.connection);\r\n\t\tVector3 vector = msg.read.Vector3();\r\n\t\tVector3 vector2 = msg.read.Vector3().normalized;\r\n\t\tbool num = msg.read.Bit();\r\n\t\tBaseEntity mounted = player.GetParentEntity();\r\n\t\tif (mounted == null)\r\n\t\t{\r\n\t\t\tmounted = player.GetMounted();\r\n\t\t}\r\n\t\tif (num)\r\n\t\t{\r\n\t\t\tif (mounted != null)\r\n\t\t\t{\r\n\t\t\t\tvector = mounted.transform.TransformPoint(vector);\r\n\t\t\t\tvector2 = mounted.transform.TransformDirection(vector2);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvector = player.eyes.position;\r\n\t\t\t\tvector2 = player.eyes.BodyForward();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!ValidateEyePos(player, vector))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModProjectile component = primaryMagazine.ammoType.GetComponent<ItemModProjectile>();\r\n\t\tif (!component)\r\n\t\t{\r\n\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Item mod not found (\" + base.ShortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(player, this, \"mod_missing\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num2 = GetAimCone() + component.projectileSpread;\r\n\t\tif (num2 > 0f)\r\n\t\t{\r\n\t\t\tvector2 = AimConeUtil.GetModifiedAimConeDirection(num2, vector2);\r\n\t\t}\r\n\t\tfloat num3 = 1f;\r\n\t\tif (UnityEngine.Physics.Raycast(vector, vector2, out var hitInfo, num3, 1237003025))\r\n\t\t{\r\n\t\t\tnum3 = hitInfo.distance - 0.1f;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(component.projectileObject.resourcePath, vector + vector2 * num3);\r\n\t\tif (baseEntity == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbaseEntity.creatorEntity = player;\r\n\t\tServerProjectile component2 = baseEntity.GetComponent<ServerProjectile>();\r\n\t\tif ((bool)component2)\r\n\t\t{\r\n\t\t\tcomponent2.InitializeVelocity(GetInheritedVelocity(player, vector2) + vector2 * component2.speed * initialSpeedMultiplier);\r\n\t\t}\r\n\t\tbaseEntity.Spawn();\r\n\t\tProjectileLaunched_Server(component2);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnExplosiveLaunched(player, baseEntity, this);\r\n\t\tInterface.CallHook(\"OnRocketLaunched\", player, baseEntity);\r\n\t\tStartAttackCooldown(ScaleRepeatDelay(repeatDelay));\r\n\t\tItem ownerItem = GetOwnerItem();\r\n\t\tif (ownerItem != null)\r\n\t\t{\r\n\t\t\tif (!base.UsingInfiniteAmmoCheat)\r\n\t\t\t{\r\n\t\t\t\townerItem.LoseCondition(UnityEngine.Random.Range(1f, 2f));\r\n\t\t\t}\r\n\t\t\tBaseMountable mounted2 = player.GetMounted();\r\n\t\t\tif (mounted2 != null)\r\n\t\t\t{\r\n\t\t\t\tmounted2.OnWeaponFired(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerKicked","Parameters":"(BasePlayer,string,bool)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void Kick(string reason, bool reserveSlot = true)\r\n\t{\r\n\t\tif (IsConnected)\r\n\t\t{\r\n\t\t\tnet.connection.canReserveSlot = reserveSlot;\r\n\t\t\tNetwork.Net.sv.Kick(net.connection, reason);\r\n\t\t\tInterface.CallHook(\"OnPlayerKicked\", this, reason, reserveSlot);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDigitalClockRing","Parameters":"(DigitalClock)","ClassName":"DigitalClock","MethodCode":"\r\n\tprivate void Ring()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnDigitalClockRing\", this) == null)\r\n\t\t{\r\n\t\t\tisRinging = true;\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"RPC_StartRinging\"));\r\n\t\t\tInvoke(StopRinging, 5f);\r\n\t\t\tMarkDirty();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHorseHitch","Parameters":"(RidableHorse,HitchTrough.HitchSpot)","ClassName":"HitchTrough","MethodCode":"\r\n\tpublic bool AttemptToHitch(RidableHorse horse, HitchSpot hitch = null)\r\n\t{\r\n\t\tif (horse == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (hitch == null)\r\n\t\t{\r\n\t\t\thitch = GetClosest(horse.transform.position);\r\n\t\t}\r\n\t\tif (hitch != null)\r\n\t\t{\r\n\t\t\tobject obj = Interface.CallHook(\"OnHorseHitch\", horse, hitch);\r\n\t\t\tif (obj is bool)\r\n\t\t\t{\r\n\t\t\t\treturn (bool)obj;\r\n\t\t\t}\r\n\t\t\thitch.SetOccupiedBy(horse);\r\n\t\t\thorse.SetHitch(this);\r\n\t\t\thorse.transform.SetPositionAndRotation(hitch.spot.position, hitch.spot.rotation);\r\n\t\t\thorse.DismountAllPlayers();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnCoalingTowerGather","Parameters":"(CoalingTower,Item)","ClassName":"CoalingTower","MethodCode":"\r\n\tprivate void EmptyTenPercent()\r\n\t{\r\n\t\tif (!IsPowered())\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.GenericError);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!HasUnloadableLinedUp)\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.NoTrainCar);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tTrainCarUnloadable activeUnloadable = GetActiveUnloadable();\r\n\t\tif (tcUnloadingNow == null || activeUnloadable != tcUnloadingNow)\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.NoTrainCar);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tStorageContainer storageContainer = tcUnloadingNow.GetStorageContainer();\r\n\t\tif (storageContainer.inventory == null || !TrainWagonLootData.instance.TryGetLootFromIndex(LootTypeIndex, out var lootOption))\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.NoTrainCar);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = tcUnloadingNow.wagonType != TrainCarUnloadable.WagonType.Fuel;\r\n\t\tItemContainer itemContainer = null;\r\n\t\tPercentFullStorageContainer percentFullStorageContainer = (flag ? GetOreStorage() : GetFuelStorage());\r\n\t\tif (percentFullStorageContainer != null)\r\n\t\t{\r\n\t\t\titemContainer = percentFullStorageContainer.inventory;\r\n\t\t}\r\n\t\tif (itemContainer == null)\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.GenericError);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemContainer inventory = storageContainer.inventory;\r\n\t\tItemContainer newcontainer = itemContainer;\r\n\t\tint iAmount = Mathf.RoundToInt((float)lootOption.maxLootAmount / 10f);\r\n\t\tList<Item> obj = Facepunch.Pool.Get<List<Item>>();\r\n\t\tint num = inventory.Take(obj, lootOption.lootItem.itemid, iAmount);\r\n\t\tbool flag2 = true;\r\n\t\tif (num > 0)\r\n\t\t{\r\n\t\t\tforeach (Item item in obj)\r\n\t\t\t{\r\n\t\t\t\tif (tcUnloadingNow.wagonType == TrainCarUnloadable.WagonType.Lootboxes)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (Interface.CallHook(\"OnCoalingTowerGather\", this, item) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tbool flag3 = item.MoveToContainer(newcontainer);\r\n\t\t\t\tif (!flag2 || flag3)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\titem.MoveToContainer(inventory);\r\n\t\t\t\tflag2 = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tFacepunch.Pool.Free(ref obj, freeElements: false);\r\n\t\tfloat orePercent = tcUnloadingNow.GetOrePercent();\r\n\t\tif (orePercent == 0f)\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.NoError);\r\n\t\t}\r\n\t\telse if (!flag2)\r\n\t\t{\r\n\t\t\tEndEmptyProcess(ActionAttemptStatus.OutputIsFull);\r\n\t\t}\r\n\t\telse if (flag)\r\n\t\t{\r\n\t\t\ttcUnloadingNow.SetVisualOreLevel(orePercent);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBookmarkControl","Parameters":"(ComputerStation,BasePlayer,string,IRemoteControllable)","ClassName":"ComputerStation","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void BeginControllingBookmark(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!IsPlayerAdmin(player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (!IsValidIdentifier(text) || !controlBookmarks.Contains(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIRemoteControllable remoteControllable = RemoteControlEntity.FindByID(text);\r\n\t\tif (remoteControllable == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity ent = remoteControllable.GetEnt();\r\n\t\tif (ent == null)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"RC identifier \" + text + \" was found but has a null or destroyed entity, this should never happen\");\r\n\t\t}\r\n\t\telse if (remoteControllable.CanControl(player.userID) && !(Vector3.Distance(base.transform.position, ent.transform.position) >= remoteControllable.MaxRange) && Interface.CallHook(\"OnBookmarkControl\", this, player, text, remoteControllable) == null)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = currentlyControllingEnt.Get(serverside: true);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tIRemoteControllable component = baseEntity.GetComponent<IRemoteControllable>();\r\n\t\t\t\tcomponent?.StopControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t\t\tInterface.CallHook(\"OnBookmarkControlEnded\", this, player, component);\r\n\t\t\t}\r\n\t\t\tplayer.net.SwitchSecondaryGroup(ent.net.group);\r\n\t\t\tcurrentlyControllingEnt.uid = ent.net.ID;\r\n\t\t\tcurrentPlayerID = player.userID;\r\n\t\t\tbool b = remoteControllable.InitializeControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t\tSetFlag(Flags.Reserved2, b, recursive: false, networkupdate: false);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tSendControlBookmarks(player);\r\n\t\t\tif (Rust.GameInfo.HasAchievements && remoteControllable.GetEnt() is CCTV_RC)\r\n\t\t\t{\r\n\t\t\t\tInvokeRepeating(CheckCCTVAchievement, 1f, 3f);\r\n\t\t\t}\r\n\t\t\tInvokeRepeating(ControlCheck, 0f, 0f);\r\n\t\t\tInterface.CallHook(\"OnBookmarkControlStarted\", this, player, text, remoteControllable);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCollectiblePickedup","Parameters":"(CollectibleEntity,BasePlayer,Item)","ClassName":"CollectibleEntity","MethodCode":"\r\n\tpublic void DoPickup(BasePlayer reciever, bool eat = false)\r\n\t{\r\n\t\tif (itemList == null || Interface.CallHook(\"OnCollectiblePickup\", this, reciever, eat) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemAmount[] array = itemList;\r\n\t\tforeach (ItemAmount itemAmount in array)\r\n\t\t{\r\n\t\t\tif (reciever != null && reciever.IsInTutorial && itemAmount.ignoreInTutorial)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tItem item = ItemManager.Create(itemAmount.itemDef, (int)itemAmount.amount, 0uL);\r\n\t\t\tif (item == null)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (eat && item.info.category == ItemCategory.Food && reciever != null)\r\n\t\t\t{\r\n\t\t\t\tItemModConsume component = item.info.GetComponent<ItemModConsume>();\r\n\t\t\t\tif (component != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tcomponent.DoAction(item, reciever);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((bool)reciever)\r\n\t\t\t{\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, this, reciever);\r\n\t\t\t\tInterface.CallHook(\"OnCollectiblePickedup\", this, reciever, item);\r\n\t\t\t\treciever.GiveItem(item, GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\titem.Drop(base.transform.position + Vector3.up * 0.5f, Vector3.up);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemList = null;\r\n\t\tif (pickupEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(pickupEffect.resourcePath, base.transform.position, base.transform.up);\r\n\t\t}\r\n\t\tRandomItemDispenser randomItemDispenser = PrefabAttribute.server.Find<RandomItemDispenser>(prefabID);\r\n\t\tif (randomItemDispenser != null)\r\n\t\t{\r\n\t\t\trandomItemDispenser.DistributeItems(reciever, base.transform.position);\r\n\t\t}\r\n\t\tKill();\r\n\t}\r\n"},{"Name":"CanAssignBed","Parameters":"(BasePlayer,SleepingBag,ulong)","ClassName":"SleepingBag","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void AssignToFriend(RPCMessage msg)\r\n\t{\r\n\t\tif (!msg.player.CanInteract() || deployerUserID != (ulong)msg.player.userID)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tulong num = msg.read.UInt64();\r\n\t\tif (num == 0L || Interface.CallHook(\"CanAssignBed\", msg.player, this, num) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ConVar.Server.max_sleeping_bags > 0)\r\n\t\t{\r\n\t\t\tCanAssignBedResult? canAssignBedResult = CanAssignBed(msg.player, this, num);\r\n\t\t\tif (canAssignBedResult.HasValue)\r\n\t\t\t{\r\n\t\t\t\tBasePlayer basePlayer = RelationshipManager.FindByID(num);\r\n\t\t\t\tif (canAssignBedResult.Value.Result == BagResultType.TooManyBags)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (basePlayer == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, cannotAssignBedNoPlayerPhrase, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring playerNameStreamSafe = NameHelper.GetPlayerNameStreamSafe(msg.player, basePlayer);\r\n\t\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, cannotAssignBedPhrase, false, playerNameStreamSafe);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (canAssignBedResult.Value.Result == BagResultType.BagBlocked)\r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, bedAssigningBlocked, false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (canAssignBedResult.Value.Result == BagResultType.TargetIsPlayingTutorial)\r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, tutorialPhrase, false);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tbasePlayer?.ShowToast(GameTip.Styles.Blue_Long, assignedBagPhrase, false, canAssignBedResult.Value.Count.ToString(), canAssignBedResult.Value.Max.ToString());\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Blue_Long, bagLimitPhrase, false, (GetSleepingBagCount(msg.player.userID) - 1).ToString(), canAssignBedResult.Value.Max.ToString());\r\n\t\t\t\t}\r\n\t\t\t\tif (canAssignBedResult.Value.Result != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tulong num2 = deployerUserID;\r\n\t\tdeployerUserID = num;\r\n\t\tNotifyPlayer(num2);\r\n\t\tNotifyPlayer(deployerUserID);\r\n\t\tOnBagChangedOwnership(this, num2);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnSleepingBagAssigned(msg.player, this, num);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"CanSwapToSeat","Parameters":"(BasePlayer,BaseMountable)","ClassName":"BaseMountable","MethodCode":"\r\n\tpublic virtual bool CanSwapToThis(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanSwapToSeat\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnEntityDestroy","Parameters":"(BradleyAPC)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic override void OnKilled(HitInfo info)\r\n\t{\r\n\t\tif (base.isClient || Interface.CallHook(\"OnEntityDestroy\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tCreateExplosionMarker(10f);\r\n\t\tEffect.server.Run(explosionEffect.resourcePath, mainTurretEyePos.transform.position, Vector3.up, null, broadcast: true);\r\n\t\tVector3 zero = Vector3.zero;\r\n\t\tGameObject gibSource = servergibs.Get().GetComponent<ServerGib>()._gibSource;\r\n\t\tList<ServerGib> list = ServerGib.CreateGibs(servergibs.resourcePath, base.gameObject, gibSource, zero, 3f);\r\n\t\tfor (int i = 0; i < 12 - maxCratesToSpawn; i++)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(this.fireBall.resourcePath, base.transform.position, base.transform.rotation);\r\n\t\t\tif (!baseEntity)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfloat minInclusive = 3f;\r\n\t\t\tfloat maxInclusive = 10f;\r\n\t\t\tVector3 onUnitSphere = UnityEngine.Random.onUnitSphere;\r\n\t\t\tbaseEntity.transform.position = base.transform.position + new Vector3(0f, 1.5f, 0f) + onUnitSphere * UnityEngine.Random.Range(-4f, 4f);\r\n\t\t\tCollider component = baseEntity.GetComponent<Collider>();\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t\tbaseEntity.SetVelocity(zero + onUnitSphere * UnityEngine.Random.Range(minInclusive, maxInclusive));\r\n\t\t\tforeach (ServerGib item in list)\r\n\t\t\t{\r\n\t\t\t\tUnityEngine.Physics.IgnoreCollision(component, item.GetCollider(), ignore: true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int j = 0; j < maxCratesToSpawn; j++)\r\n\t\t{\r\n\t\t\tVector3 onUnitSphere2 = UnityEngine.Random.onUnitSphere;\r\n\t\t\tonUnitSphere2.y = 0f;\r\n\t\t\tonUnitSphere2.Normalize();\r\n\t\t\tVector3 pos = base.transform.position + new Vector3(0f, 1.5f, 0f) + onUnitSphere2 * UnityEngine.Random.Range(2f, 3f);\r\n\t\t\tBaseEntity baseEntity2 = GameManager.server.CreateEntity(crateToDrop.resourcePath, pos, Quaternion.LookRotation(onUnitSphere2));\r\n\t\t\tbaseEntity2.Spawn();\r\n\t\t\tLootContainer lootContainer = baseEntity2 as LootContainer;\r\n\t\t\tif ((bool)lootContainer)\r\n\t\t\t{\r\n\t\t\t\tlootContainer.Invoke(lootContainer.RemoveMe, 1800f);\r\n\t\t\t}\r\n\t\t\tCollider component2 = baseEntity2.GetComponent<Collider>();\r\n\t\t\tRigidbody rigidbody = baseEntity2.gameObject.AddComponent<Rigidbody>();\r\n\t\t\trigidbody.useGravity = true;\r\n\t\t\trigidbody.collisionDetectionMode = CollisionDetectionMode.ContinuousDynamic;\r\n\t\t\trigidbody.mass = 2f;\r\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\r\n\t\t\trigidbody.velocity = zero + onUnitSphere2 * UnityEngine.Random.Range(1f, 3f);\r\n\t\t\trigidbody.angularVelocity = Vector3Ex.Range(-1.75f, 1.75f);\r\n\t\t\trigidbody.drag = 0.5f * (rigidbody.mass / 5f);\r\n\t\t\trigidbody.angularDrag = 0.2f * (rigidbody.mass / 5f);\r\n\t\t\tFireBall fireBall = GameManager.server.CreateEntity(this.fireBall.resourcePath) as FireBall;\r\n\t\t\tif ((bool)fireBall)\r\n\t\t\t{\r\n\t\t\t\tfireBall.SetParent(baseEntity2);\r\n\t\t\t\tfireBall.Spawn();\r\n\t\t\t\tfireBall.GetComponent<Rigidbody>().isKinematic = true;\r\n\t\t\t\tfireBall.GetComponent<Collider>().enabled = false;\r\n\t\t\t}\r\n\t\t\tbaseEntity2.SendMessage(\"SetLockingEnt\", fireBall.gameObject, SendMessageOptions.DontRequireReceiver);\r\n\t\t\tforeach (ServerGib item2 in list)\r\n\t\t\t{\r\n\t\t\t\tUnityEngine.Physics.IgnoreCollision(component2, item2.GetCollider(), ignore: true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tKillSpawnedScientists();\r\n\t\tif (info != null && info.InitiatorPlayer != null && info.InitiatorPlayer.serverClan != null)\r\n\t\t{\r\n\t\t\tinfo.InitiatorPlayer.AddClanScore(ClanScoreEventType.DestroyedBradley);\r\n\t\t}\r\n\t\tbase.OnKilled(info);\r\n\t}\r\n"},{"Name":"CanAcceptItem","Parameters":"(ItemContainer,Item,int)","ClassName":"ItemContainer","MethodCode":"\r\n\tpublic CanAcceptResult CanAcceptItem(Item item, int targetPos)\r\n\t{\r\n\t\tif (canAcceptItem != null && !canAcceptItem(item, targetPos))\r\n\t\t{\r\n\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t}\r\n\t\tif (isServer && availableSlots != null && availableSlots.Count > 0)\r\n\t\t{\r\n\t\t\tif (item.info.occupySlots == (ItemSlot)0 || item.info.occupySlots == ItemSlot.None)\r\n\t\t\t{\r\n\t\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t\t}\r\n\t\t\tif (item.isBroken)\r\n\t\t\t{\r\n\t\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t\t}\r\n\t\t\tint num = 0;\r\n\t\t\tforeach (ItemSlot availableSlot in availableSlots)\r\n\t\t\t{\r\n\t\t\t\tnum |= (int)availableSlot;\r\n\t\t\t}\r\n\t\t\tif (((uint)num & (uint)item.info.occupySlots) != (uint)item.info.occupySlots)\r\n\t\t\t{\r\n\t\t\t\treturn CanAcceptResult.CannotAcceptRightNow;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((allowedContents & item.info.itemType) != item.info.itemType)\r\n\t\t{\r\n\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t}\r\n\t\tif (HasLimitedAllowedItems)\r\n\t\t{\r\n\t\t\tbool flag = false;\r\n\t\t\tfor (int i = 0; i < onlyAllowedItems.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tif (onlyAllowedItems[i] == item.info)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t\t}\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanAcceptItem\", this, item, targetPos);\r\n\t\tif (obj is CanAcceptResult)\r\n\t\t{\r\n\t\t\treturn (CanAcceptResult)obj;\r\n\t\t}\r\n\t\tif (blockedItems != null && blockedItems.Contains(item.info))\r\n\t\t{\r\n\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t}\r\n\t\tif (item.GetItemVolume() > containerVolume)\r\n\t\t{\r\n\t\t\treturn CanAcceptResult.CannotAccept;\r\n\t\t}\r\n\t\treturn CanAcceptResult.CanAccept;\r\n\t}\r\n"},{"Name":"OnItemSplit","Parameters":"(Item,int)","ClassName":"Item","MethodCode":"\r\n\tpublic Item SplitItem(int split_Amount)\r\n\t{\r\n\t\tAssert.IsTrue(split_Amount > 0, \"split_Amount <= 0\");\r\n\t\tif (split_Amount <= 0)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (split_Amount >= amount)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnItemSplit\", this, split_Amount);\r\n\t\tif (obj is Item)\r\n\t\t{\r\n\t\t\treturn (Item)obj;\r\n\t\t}\r\n\t\tamount -= split_Amount;\r\n\t\tItem item = ItemManager.CreateByItemID(info.itemid, 1, 0uL);\r\n\t\titem.amount = split_Amount;\r\n\t\titem.skin = skin;\r\n\t\tif (IsBlueprint())\r\n\t\t{\r\n\t\t\titem.blueprintTarget = blueprintTarget;\r\n\t\t}\r\n\t\tif (info.amountType == ItemDefinition.AmountType.Genetics && instanceData != null && instanceData.dataInt != 0)\r\n\t\t{\r\n\t\t\titem.instanceData = new ProtoBuf.Item.InstanceData();\r\n\t\t\titem.instanceData.dataInt = instanceData.dataInt;\r\n\t\t\titem.instanceData.ShouldPool = false;\r\n\t\t}\r\n\t\tif (instanceData != null && instanceData.dataInt > 0 && info != null && info.Blueprint != null && info.Blueprint.workbenchLevelRequired == 3)\r\n\t\t{\r\n\t\t\titem.instanceData = new ProtoBuf.Item.InstanceData();\r\n\t\t\titem.instanceData.dataInt = instanceData.dataInt;\r\n\t\t\titem.instanceData.ShouldPool = false;\r\n\t\t\titem.SetFlag(Flag.IsOn, IsOn());\r\n\t\t}\r\n\t\tMarkDirty();\r\n\t\treturn item;\r\n\t}\r\n"},{"Name":"OnItemUpgrade","Parameters":"(Item,Item,BasePlayer)","ClassName":"ItemModUpgrade","MethodCode":"\r\n\tpublic override void ServerCommand(Item item, string command, BasePlayer player)\r\n\t{\r\n\t\tif (!(command == \"upgrade_item\") || item.amount < numForUpgrade)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (UnityEngine.Random.Range(0f, 1f) <= upgradeSuccessChance)\r\n\t\t{\r\n\t\t\titem.UseItem(numForUpgrade);\r\n\t\t\tItem item2 = ItemManager.Create(upgradedItem, numUpgradedItem, 0uL);\r\n\t\t\tInterface.CallHook(\"OnItemUpgrade\", item, item2, player);\r\n\t\t\tif (!item2.MoveToContainer(player.inventory.containerMain))\r\n\t\t\t{\r\n\t\t\t\titem2.Drop(player.GetDropPosition(), player.GetDropVelocity());\r\n\t\t\t}\r\n\t\t\tif (successEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(successEffect.resourcePath, player.eyes.position);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\titem.UseItem(numToLoseOnFail);\r\n\t\t\tif (failEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(failEffect.resourcePath, player.eyes.position);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHelicopterDropDoorOpen","Parameters":"(CH47HelicopterAIController)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic void SetDropDoorOpen(bool open)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnHelicopterDropDoorOpen\", this) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved8, open);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnLootEntityEnd","Parameters":"(BasePlayer,StorageContainer)","ClassName":"StorageContainer","MethodCode":"\r\n\tpublic virtual void PlayerStoppedLooting(BasePlayer player)\r\n\t{\r\n\t\tInterface.CallHook(\"OnLootEntityEnd\", player, this);\r\n\t\tSetFlag(Flags.Open, b: false);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnExperimentStarted","Parameters":"(Workbench,BasePlayer)","ClassName":"Workbench","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_BeginExperiment(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (player == null || IsWorking())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPersistantPlayer persistantPlayerInfo = player.PersistantPlayerInfo;\r\n\t\tint num = UnityEngine.Random.Range(0, experimentalItems.subSpawn.Length);\r\n\t\tfor (int i = 0; i < experimentalItems.subSpawn.Length; i++)\r\n\t\t{\r\n\t\t\tint num2 = i + num;\r\n\t\t\tif (num2 >= experimentalItems.subSpawn.Length)\r\n\t\t\t{\r\n\t\t\t\tnum2 -= experimentalItems.subSpawn.Length;\r\n\t\t\t}\r\n\t\t\tItemDefinition itemDef = experimentalItems.subSpawn[num2].category.items[0].itemDef;\r\n\t\t\tif ((bool)itemDef.Blueprint && !itemDef.Blueprint.defaultBlueprint && itemDef.Blueprint.userCraftable && itemDef.Blueprint.isResearchable && !itemDef.Blueprint.NeedsSteamItem && !itemDef.Blueprint.NeedsSteamDLC && !persistantPlayerInfo.unlockedItems.Contains(itemDef.itemid))\r\n\t\t\t{\r\n\t\t\t\tpendingBlueprint = itemDef;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pendingBlueprint == null)\r\n\t\t{\r\n\t\t\tplayer.ChatMessage(\"You have already unlocked everything for this workbench tier.\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnExperimentStart\", this, player) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tItem slot = base.inventory.GetSlot(0);\r\n\t\t\tif (slot != null)\r\n\t\t\t{\r\n\t\t\t\tif (!slot.MoveToContainer(player.inventory.containerMain))\r\n\t\t\t\t{\r\n\t\t\t\t\tslot.Drop(GetDropPosition(), GetDropVelocity());\r\n\t\t\t\t}\r\n\t\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\t}\r\n\t\t\tif (experimentStartEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(experimentStartEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tbase.inventory.SetLocked(isLocked: true);\r\n\t\t\tCancelInvoke(ExperimentComplete);\r\n\t\t\tInvoke(ExperimentComplete, 5f);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tInterface.CallHook(\"OnExperimentStarted\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemCraft","Parameters":"(IndustrialCrafter,ItemBlueprint)","ClassName":"IndustrialCrafter","MethodCode":"\r\n\tprotected override void RunJob()\r\n\t{\r\n\t\tbase.RunJob();\r\n\t\tif (ConVar.Server.industrialCrafterFrequency <= 0f || HasFlag(Flags.Reserved1) || currentlyCrafting != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i <= 3; i++)\r\n\t\t{\r\n\t\t\tItem targetBlueprint = GetTargetBlueprint(i);\r\n\t\t\tif (targetBlueprint == null || GetWorkbench() == null || GetWorkbench().Workbenchlevel < targetBlueprint.blueprintTargetDef.Blueprint.workbenchLevelRequired)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tItemBlueprint blueprint = targetBlueprint.blueprintTargetDef.Blueprint;\r\n\t\t\tif (Interface.CallHook(\"OnItemCraft\", this, blueprint) != null)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbool flag = true;\r\n\t\t\tforeach (ItemAmount ingredient in blueprint.ingredients)\r\n\t\t\t{\r\n\t\t\t\tif ((float)GetInputAmount(ingredient.itemDef) < ingredient.amount)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tflag = false;\r\n\t\t\tfor (int j = 8; j <= 11; j++)\r\n\t\t\t{\r\n\t\t\t\tItem slot = _inventory.GetSlot(j);\r\n\t\t\t\tif (slot == null || (slot.info == targetBlueprint.blueprintTargetDef && slot.amount + blueprint.amountToCreate <= slot.MaxStackable()))\r\n\t\t\t\t{\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tSetFlag(Flags.Reserved2, b: false);\r\n\t\t\tforeach (ItemAmount ingredient2 in blueprint.ingredients)\r\n\t\t\t{\r\n\t\t\t\tConsumeInputIngredient(ingredient2);\r\n\t\t\t}\r\n\t\t\tcurrentlyCrafting = targetBlueprint.blueprintTargetDef;\r\n\t\t\tcurrentlyCraftingAmount = blueprint.amountToCreate;\r\n\t\t\tfloat time = blueprint.time;\r\n\t\t\tInvoke(CompleteCraft, time);\r\n\t\t\tjobFinishes = time;\r\n\t\t\tSetFlag(Flags.Reserved1, b: true);\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"ClientUpdateCraftTimeRemaining\"), (float)jobFinishes, jobFinishes.Duration);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanChangeCode","Parameters":"(BasePlayer,CodeLock,string,bool)","ClassName":"CodeLock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f, CheckParent = true)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_ChangeCode(RPCMessage rpc)\r\n\t{\r\n\t\tif (!rpc.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = rpc.read.String();\r\n\t\tbool flag = rpc.read.Bit();\r\n\t\tif (!IsLocked() && text.Length == 4 && text.IsNumeric() && !(!hasCode && flag) && Interface.CallHook(\"CanChangeCode\", rpc.player, this, text, flag) == null)\r\n\t\t{\r\n\t\t\tif (!hasCode && !flag)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Locked, b: true);\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnCodelockChanged(rpc.player, this, flag ? guestCode : code, text, flag);\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tcode = text;\r\n\t\t\t\thasCode = code.Length > 0;\r\n\t\t\t\twhitelistPlayers.Clear();\r\n\t\t\t\twhitelistPlayers.Add(rpc.player.userID);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tguestCode = text;\r\n\t\t\t\thasGuestCode = guestCode.Length > 0;\r\n\t\t\t\tguestPlayers.Clear();\r\n\t\t\t\tguestPlayers.Add(rpc.player.userID);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnCodeChanged\", rpc.player, this, text, flag);\r\n\t\t\tDoEffect(effectCodeChanged.resourcePath);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretStartup","Parameters":"(AutoTurret)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void InitiateStartup()\r\n\t{\r\n\t\tif (!IsOnline() && !booting && Interface.CallHook(\"OnTurretStartup\", this) == null)\r\n\t\t{\r\n\t\t\tEffect.server.Run(onlineSound.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\tInvoke(SetOnline, 2f);\r\n\t\t\tbooting = true;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityReskin","Parameters":"(BaseEntity,ItemSkinDirectory.Skin,BasePlayer)","ClassName":"SprayCan","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server.CallsPerSecond(2uL)]\r\n\tprivate void ChangeItemSkin(RPCMessage msg)\r\n\t{\r\n\t\tNetworkableId uid = msg.read.EntityID();\r\n\t\tint targetSkin = msg.read.Int32();\r\n\t\tBaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(uid);\r\n\t\tif (!ValidateEntityAndSkin(msg.player, baseNetworkable, targetSkin))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (baseNetworkable != null)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity2 = baseNetworkable as BaseEntity;\r\n\t\t\tif ((object)baseEntity2 != null)\r\n\t\t\t{\r\n\t\t\t\tif (!GetItemDefinitionForEntity(baseEntity2, out var def, useRedirect: false))\r\n\t\t\t\t{\r\n\t\t\t\t\tFailResponse(SprayFailReason.InvalidItem);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tItemDefinition itemDefinition = null;\r\n\t\t\t\tulong num = ItemDefinition.FindSkin((def.isRedirectOf != null) ? def.isRedirectOf.itemid : def.itemid, targetSkin);\r\n\t\t\t\tItemSkinDirectory.Skin skin = def.skins.FirstOrDefault((ItemSkinDirectory.Skin x) => x.id == targetSkin);\r\n\t\t\t\tif (Interface.CallHook(\"OnEntityReskin\", baseEntity2, skin, msg.player) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (skin.invItem != null && skin.invItem is ItemSkin itemSkin)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (itemSkin.Redirect != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemDefinition = itemSkin.Redirect;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ((bool)def && def.isRedirectOf != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemDefinition = def.isRedirectOf;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (def.isRedirectOf != null || ((bool)def && def.isRedirectOf != null))\r\n\t\t\t\t{\r\n\t\t\t\t\titemDefinition = def.isRedirectOf;\r\n\t\t\t\t}\r\n\t\t\t\tif (itemDefinition == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseEntity2.skinID = num;\r\n\t\t\t\t\tbaseEntity2.SendNetworkUpdate();\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Server.SkinUsed(def.shortname, targetSkin);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!CanEntityBeRespawned(baseEntity2, out var reason2))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFailResponse(reason2);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!GetEntityPrefabPath(itemDefinition, out var resourcePath))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebug.LogWarning(\"Cannot find resource path of redirect entity to spawn! \" + itemDefinition.gameObject.name);\r\n\t\t\t\t\t\tFailResponse(SprayFailReason.InvalidItem);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tVector3 localPosition = baseEntity2.transform.localPosition;\r\n\t\t\t\t\tQuaternion localRotation = baseEntity2.transform.localRotation;\r\n\t\t\t\t\tBaseEntity baseEntity3 = baseEntity2.GetParentEntity();\r\n\t\t\t\t\tfloat health = baseEntity2.Health();\r\n\t\t\t\t\tEntityRef[] slots = baseEntity2.GetSlots();\r\n\t\t\t\t\tulong ownerID = baseEntity2.OwnerID;\r\n\t\t\t\t\tfloat lastAttackedTime = ((baseEntity2 is BaseCombatEntity baseCombatEntity) ? baseCombatEntity.lastAttackedTime : 0f);\r\n\t\t\t\t\tHashSet<PlayerNameID> hashSet = null;\r\n\t\t\t\t\tif (baseEntity2 is BuildingPrivlidge buildingPrivlidge)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thashSet = new HashSet<PlayerNameID>(buildingPrivlidge.authorizedPlayers);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbool flag = baseEntity2 is Door || baseEntity2 is BuildingPrivlidge;\r\n\t\t\t\t\tDictionary<ContainerSet, List<Item>> dictionary2 = new Dictionary<ContainerSet, List<Item>>();\r\n\t\t\t\t\tSaveEntityStorage(baseEntity2, dictionary2, 0);\r\n\t\t\t\t\tList<ChildPreserveInfo> obj = Facepunch.Pool.Get<List<ChildPreserveInfo>>();\r\n\t\t\t\t\tif (flag)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (BaseEntity child in baseEntity2.children)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tobj.Add(new ChildPreserveInfo\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tTargetEntity = child,\r\n\t\t\t\t\t\t\t\tTargetBone = child.parentBone,\r\n\t\t\t\t\t\t\t\tLocalPosition = child.transform.localPosition,\r\n\t\t\t\t\t\t\t\tLocalRotation = child.transform.localRotation\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tforeach (ChildPreserveInfo item in obj)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem.TargetEntity.SetParent(null, worldPositionStays: true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < baseEntity2.children.Count; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tSaveEntityStorage(baseEntity2.children[i], dictionary2, -1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbaseEntity2.Kill();\r\n\t\t\t\t\tbaseEntity2 = GameManager.server.CreateEntity(resourcePath, (baseEntity3 != null) ? baseEntity3.transform.TransformPoint(localPosition) : localPosition, (baseEntity3 != null) ? (baseEntity3.transform.rotation * localRotation) : localRotation);\r\n\t\t\t\t\tbaseEntity2.SetParent(baseEntity3);\r\n\t\t\t\t\tbaseEntity2.transform.localPosition = localPosition;\r\n\t\t\t\t\tbaseEntity2.transform.localRotation = localRotation;\r\n\t\t\t\t\tbaseEntity2.OwnerID = ownerID;\r\n\t\t\t\t\tif (GetItemDefinitionForEntity(baseEntity2, out var def2, useRedirect: false) && def2.isRedirectOf != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseEntity2.skinID = 0uL;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseEntity2.skinID = num;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (baseEntity2 is DecayEntity decayEntity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdecayEntity.AttachToBuilding(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbaseEntity2.Spawn();\r\n\t\t\t\t\tif (baseEntity2 is BaseCombatEntity baseCombatEntity2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseCombatEntity2.SetHealth(health);\r\n\t\t\t\t\t\tbaseCombatEntity2.lastAttackedTime = lastAttackedTime;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (baseEntity2 is BuildingPrivlidge buildingPrivlidge2 && hashSet != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuildingPrivlidge2.authorizedPlayers = hashSet;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (dictionary2.Count > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tRestoreEntityStorage(baseEntity2, 0, dictionary2);\r\n\t\t\t\t\t\tif (!flag)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor (int j = 0; j < baseEntity2.children.Count; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tRestoreEntityStorage(baseEntity2.children[j], -1, dictionary2);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tforeach (KeyValuePair<ContainerSet, List<Item>> item2 in dictionary2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tforeach (Item item3 in item2.Value)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDebug.Log($\"Deleting {item3} as it has no new container\");\r\n\t\t\t\t\t\t\t\titem3.Remove();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Server.SkinUsed(def.shortname, targetSkin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flag)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (ChildPreserveInfo item4 in obj)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem4.TargetEntity.SetParent(baseEntity2, item4.TargetBone, worldPositionStays: true);\r\n\t\t\t\t\t\t\titem4.TargetEntity.transform.localPosition = item4.LocalPosition;\r\n\t\t\t\t\t\t\titem4.TargetEntity.transform.localRotation = item4.LocalRotation;\r\n\t\t\t\t\t\t\titem4.TargetEntity.SendNetworkUpdate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbaseEntity2.SetSlots(slots);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tInterface.CallHook(\"OnEntityReskinned\", baseEntity2, skin, msg.player);\r\n\t\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t\t\t}\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ReskinResult\"), 1, baseEntity2.net.ID);\r\n\t\t\t}\r\n\t\t}\r\n\t\tLoseCondition(ConditionLossPerReskin);\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ChangeSprayColour\"), -1);\r\n\t\tSetFlag(Flags.Busy, b: true);\r\n\t\tInvoke(ClearBusy, SprayCooldown);\r\n\t\tvoid FailResponse(SprayFailReason reason)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ReskinResult\"), 0, (int)reason);\r\n\t\t}\r\n\t\tstatic void RestoreEntityStorage(BaseEntity baseEntity, int index, Dictionary<ContainerSet, List<Item>> copy)\r\n\t\t{\r\n\t\t\tif (baseEntity is IItemContainerEntity itemContainerEntity)\r\n\t\t\t{\r\n\t\t\t\tContainerSet containerSet = default(ContainerSet);\r\n\t\t\t\tcontainerSet.ContainerIndex = index;\r\n\t\t\t\tcontainerSet.PrefabId = ((index != 0) ? baseEntity.prefabID : 0u);\r\n\t\t\t\tContainerSet key = containerSet;\r\n\t\t\t\tif (copy.ContainsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (Item item5 in copy[key])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem5.MoveToContainer(itemContainerEntity.inventory);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcopy.Remove(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstatic void SaveEntityStorage(BaseEntity baseEntity, Dictionary<ContainerSet, List<Item>> dictionary, int index)\r\n\t\t{\r\n\t\t\tif (baseEntity is IItemContainerEntity itemContainerEntity2)\r\n\t\t\t{\r\n\t\t\t\tContainerSet containerSet2 = default(ContainerSet);\r\n\t\t\t\tcontainerSet2.ContainerIndex = index;\r\n\t\t\t\tcontainerSet2.PrefabId = ((index != 0) ? baseEntity.prefabID : 0u);\r\n\t\t\t\tContainerSet key2 = containerSet2;\r\n\t\t\t\tif (!dictionary.ContainsKey(key2))\r\n\t\t\t\t{\r\n\t\t\t\t\tdictionary.Add(key2, new List<Item>());\r\n\t\t\t\t\tforeach (Item item6 in itemContainerEntity2.inventory.itemList)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdictionary[key2].Add(item6);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (Item item7 in dictionary[key2])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem7.RemoveFromContainer();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDebug.Log(\"Multiple containers with the same prefab id being added during vehicle reskin\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerSpawn","Parameters":"(BasePlayer,Network.Connection)","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic BasePlayer SpawnNewPlayer(Network.Connection connection)\r\n\t{\r\n\t\tBasePlayer.SpawnPoint spawnPoint = FindSpawnPoint();\r\n\t\tBasePlayer basePlayer = GameManager.server.CreateEntity(\"assets/prefabs/player/player.prefab\", spawnPoint.pos, spawnPoint.rot).ToPlayer();\r\n\t\tif (Interface.CallHook(\"OnPlayerSpawn\", basePlayer, connection) != null)\r\n\t\t{\r\n\t\t\treturn basePlayer;\r\n\t\t}\r\n\t\tbasePlayer.health = 0f;\r\n\t\tbasePlayer.lifestate = BaseCombatEntity.LifeState.Dead;\r\n\t\tbasePlayer.ResetLifeStateOnSpawn = false;\r\n\t\tbasePlayer.limitNetworking = true;\r\n\t\tif (connection == null)\r\n\t\t{\r\n\t\t\tbasePlayer.EnableTransferProtection();\r\n\t\t}\r\n\t\tbasePlayer.Spawn();\r\n\t\tbasePlayer.limitNetworking = false;\r\n\t\tif (connection != null)\r\n\t\t{\r\n\t\t\tbasePlayer.PlayerInit(connection);\r\n\t\t\tif ((bool)BaseGameMode.GetActiveGameMode(serverside: true))\r\n\t\t\t{\r\n\t\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnNewPlayer(basePlayer);\r\n\t\t\t}\r\n\t\t\telse if (UnityEngine.Application.isEditor || (SleepingBag.FindForPlayer(basePlayer.userID, ignoreTimers: true).Length == 0 && !basePlayer.hasPreviousLife))\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.Respawn();\r\n\t\t\t}\r\n\t\t\tDebugEx.Log($\"{basePlayer.displayName} with steamid {basePlayer.userID.Get()} joined from ip {basePlayer.net.connection.ipaddress}\");\r\n\t\t\tDebugEx.Log($\"\\tNetworkId {basePlayer.userID.Get()} is {basePlayer.net.ID} ({basePlayer.displayName})\");\r\n\t\t\tif (basePlayer.net.connection.ownerid != 0L && basePlayer.net.connection.ownerid != basePlayer.net.connection.userid)\r\n\t\t\t{\r\n\t\t\t\tDebugEx.Log($\"\\t{basePlayer} is sharing the account {basePlayer.net.connection.ownerid}\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn basePlayer;\r\n\t}\r\n"},{"Name":"CanFastTrackCraftTask","Parameters":"(ItemCrafter,ItemCraftTask,int)","ClassName":"ItemCrafter","MethodCode":"\r\n\tpublic bool FastTrackTask(int taskID)\r\n\t{\r\n\t\tint taskID2 = taskID;\r\n\t\tif (queue.Count == 0)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (owner != null && owner.IsTransferring())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tItemCraftTask value = queue.First.Value;\r\n\t\tif (value == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tItemCraftTask itemCraftTask = queue.FirstOrDefault((ItemCraftTask x) => x.taskUID == taskID2 && !x.cancelled);\r\n\t\tif (itemCraftTask == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (itemCraftTask == value)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanFastTrackCraftTask\", this, itemCraftTask, taskID);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tvalue.endTime = 0f;\r\n\t\tqueue.Remove(itemCraftTask);\r\n\t\tqueue.AddFirst(itemCraftTask);\r\n\t\towner.Command(\"note.craft_fasttracked\", taskID2);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanRenameBed","Parameters":"(BasePlayer,SleepingBag,string)","ClassName":"SleepingBag","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void Rename(RPCMessage msg)\r\n\t{\r\n\t\tif (!msg.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (Interface.CallHook(\"CanRenameBed\", msg.player, this, text) == null)\r\n\t\t{\r\n\t\t\ttext = WordFilter.Filter(text);\r\n\t\t\tif (string.IsNullOrEmpty(text))\r\n\t\t\t{\r\n\t\t\t\ttext = \"Unnamed Sleeping Bag\";\r\n\t\t\t}\r\n\t\t\tif (text.Length > 24)\r\n\t\t\t{\r\n\t\t\t\ttext = text.Substring(0, 22) + \"..\";\r\n\t\t\t}\r\n\t\t\tniceName = text;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tNotifyPlayer(deployerUserID);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnAirdrop","Parameters":"(CargoPlane,UnityEngine.Vector3)","ClassName":"CargoPlane","MethodCode":"\r\n\tpublic void UpdateDropPosition(Vector3 newDropPosition)\r\n\t{\r\n\t\tfloat x = TerrainMeta.Size.x;\r\n\t\tfloat y = TerrainMeta.HighestPoint.y + 250f;\r\n\t\tstartPos = Vector3Ex.Range(-1f, 1f);\r\n\t\tstartPos.y = 0f;\r\n\t\tstartPos.Normalize();\r\n\t\tstartPos *= x * 2f;\r\n\t\tstartPos.y = y;\r\n\t\tendPos = startPos * -1f;\r\n\t\tendPos.y = startPos.y;\r\n\t\tstartPos += newDropPosition;\r\n\t\tendPos += newDropPosition;\r\n\t\tsecondsToTake = Vector3.Distance(startPos, endPos) / 50f;\r\n\t\tsecondsToTake *= UnityEngine.Random.Range(0.95f, 1.05f);\r\n\t\tbase.transform.position = startPos;\r\n\t\tbase.transform.rotation = Quaternion.LookRotation(endPos - startPos);\r\n\t\tdropPosition = newDropPosition;\r\n\t\tInterface.CallHook(\"OnAirdrop\", this, newDropPosition);\r\n\t}\r\n"},{"Name":"CanFireLiquidWeapon","Parameters":"(BasePlayer,LiquidWeapon)","ClassName":"LiquidWeapon","MethodCode":"\r\n\tprivate bool CanFire(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanFireLiquidWeapon\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (RequiresPumping && pressure < PressureLossPerTick)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (HasFlag(Flags.Open))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (AmountHeld() <= 0)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!player.CanInteract())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!player.CanAttack() || player.IsRunning())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tItem item = GetItem();\r\n\t\tif (item == null || item.contents == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnNetworkGroupLeft","Parameters":"(BaseNetworkable,Network.Visibility.Group)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic virtual void OnNetworkGroupLeave(Group group)\r\n\t{\r\n\t\tInterface.CallHook(\"OnNetworkGroupLeft\", this, group);\r\n\t}\r\n"},{"Name":"OnBigWheelLoss","Parameters":"(BigWheelGame,Item,BigWheelBettingTerminal)","ClassName":"BigWheelGame","MethodCode":"\r\n\tpublic void Payout()\r\n\t{\r\n\t\tHitNumber currentHitType = GetCurrentHitType();\r\n\t\tGuid value = Guid.NewGuid();\r\n\t\tforeach (BigWheelBettingTerminal terminal in terminals)\r\n\t\t{\r\n\t\t\tif (terminal.isClient)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tbool flag = false;\r\n\t\t\tbool flag2 = false;\r\n\t\t\tItem slot = terminal.inventory.GetSlot((int)currentHitType.hitType);\r\n\t\t\tif (slot != null)\r\n\t\t\t{\r\n\t\t\t\tint num = currentHitType.ColorToMultiplier(currentHitType.hitType);\r\n\t\t\t\tint amount = slot.amount;\r\n\t\t\t\tif (Interface.CallHook(\"OnBigWheelWin\", this, slot, terminal, num) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tslot.amount += slot.amount * num;\r\n\t\t\t\t\tslot.RemoveFromContainer();\r\n\t\t\t\t\tslot.MoveToContainer(terminal.inventory, 5);\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGamblingResult(terminal.lastPlayer, terminal, amount, slot.amount, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < 5; i++)\r\n\t\t\t{\r\n\t\t\t\tItem slot2 = terminal.inventory.GetSlot(i);\r\n\t\t\t\tif (slot2 != null && Interface.CallHook(\"OnBigWheelLoss\", this, slot2, terminal) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGamblingResult(terminal.lastPlayer, terminal, slot2.amount, 0, value);\r\n\t\t\t\t\tslot2.Remove();\r\n\t\t\t\t\tflag2 = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (flag || flag2)\r\n\t\t\t{\r\n\t\t\t\tterminal.ClientRPC(RpcTarget.NetworkGroup(\"WinOrLoseSound\"), flag);\r\n\t\t\t}\r\n\t\t}\r\n\t\tItemManager.DoRemoves();\r\n\t\tSetTerminalsLocked(isLocked: false);\r\n\t}\r\n"},{"Name":"CanAssignMission","Parameters":"(BasePlayer,BaseMission,IMissionProvider)","ClassName":"BaseMission","MethodCode":"\r\n\tpublic static bool AssignMission(BasePlayer assignee, IMissionProvider provider, BaseMission mission)\r\n\t{\r\n\t\tif (!missionsenabled)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!mission.IsEligableForMission(assignee, provider))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanAssignMission\", assignee, mission, provider);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tint num = assignee.missions.FindIndexWith((MissionInstance i) => i.missionID, mission.id);\r\n\t\tMissionInstance missionInstance;\r\n\t\tint activeMission;\r\n\t\tif (num >= 0)\r\n\t\t{\r\n\t\t\tmissionInstance = assignee.missions[num];\r\n\t\t\tactiveMission = num;\r\n\t\t\tmissionInstance.Reset();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmissionInstance = Pool.Get<MissionInstance>();\r\n\t\t\tactiveMission = assignee.missions.Count;\r\n\t\t\tassignee.missions.Add(missionInstance);\r\n\t\t}\r\n\t\tmissionInstance.missionID = mission.id;\r\n\t\tmissionInstance.startTime = Time.time;\r\n\t\tmissionInstance.providerID = provider.ProviderID();\r\n\t\tmissionInstance.status = MissionStatus.Active;\r\n\t\tmissionInstance.objectiveStatuses = new MissionInstance.ObjectiveStatus[mission.objectives.Length];\r\n\t\tfor (int j = 0; j < mission.objectives.Length; j++)\r\n\t\t{\r\n\t\t\tmissionInstance.objectiveStatuses[j] = new MissionInstance.ObjectiveStatus();\r\n\t\t}\r\n\t\tmission.MissionStart(missionInstance, assignee);\r\n\t\tassignee.SetActiveMission(activeMission);\r\n\t\tassignee.MissionDirty();\r\n\t\tInterface.CallHook(\"OnMissionAssigned\", mission, provider, assignee);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanLootEntity","Parameters":"(BasePlayer,WorldItem)","ClassName":"WorldItem","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tprivate void RPC_OpenLoot(RPCMessage rpc)\r\n\t{\r\n\t\tif (item == null || item.contents == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModContainer component = item.info.GetComponent<ItemModContainer>();\r\n\t\tif (!(component == null) && component.canLootInWorld)\r\n\t\t{\r\n\t\t\tBasePlayer player = rpc.player;\r\n\t\t\tif ((bool)player && player.CanInteract() && CanOpenInSafeZone(player) && Interface.CallHook(\"CanLootEntity\", player, this) == null && player.inventory.loot.StartLootingEntity(this))\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Open, b: true);\r\n\t\t\t\tplayer.inventory.loot.AddContainer(item.contents);\r\n\t\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\t\tplayer.ClientRPC(RpcTarget.Player(\"RPC_OpenLootPanel\", player), \"generic_resizable\");\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWeaponModChange","Parameters":"(BaseProjectile,BasePlayer)","ClassName":"BaseProjectile","MethodCode":"\r\n\tpublic void DelayedModsChanged()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnWeaponModChange\", this, GetOwnerPlayer()) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num = Mathf.CeilToInt(ProjectileWeaponMod.Mult(this, (ProjectileWeaponMod x) => x.magazineCapacity, (ProjectileWeaponMod.Modifier y) => y.scalar, 1f) * (float)primaryMagazine.definition.builtInSize);\r\n\t\tif (num == primaryMagazine.capacity)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (primaryMagazine.contents > 0 && primaryMagazine.contents > num)\r\n\t\t{\r\n\t\t\t_ = primaryMagazine.ammoType;\r\n\t\t\tint contents = primaryMagazine.contents;\r\n\t\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\t\tItemContainer itemContainer = null;\r\n\t\t\tif (ownerPlayer != null)\r\n\t\t\t{\r\n\t\t\t\titemContainer = ownerPlayer.inventory.containerMain;\r\n\t\t\t}\r\n\t\t\telse if (GetCachedItem() != null)\r\n\t\t\t{\r\n\t\t\t\titemContainer = GetCachedItem().parent;\r\n\t\t\t}\r\n\t\t\tSetAmmoCount(0);\r\n\t\t\tif (itemContainer != null)\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(primaryMagazine.ammoType, contents, 0uL);\r\n\t\t\t\tif (!item.MoveToContainer(itemContainer))\r\n\t\t\t\t{\r\n\t\t\t\t\tVector3 vPos = base.transform.position;\r\n\t\t\t\t\tif (itemContainer.entityOwner != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvPos = itemContainer.entityOwner.transform.position + Vector3.up * 0.25f;\r\n\t\t\t\t\t}\r\n\t\t\t\t\titem.Drop(vPos, Vector3.up * 5f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tprimaryMagazine.capacity = num;\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n"},{"Name":"OnVehicleModulesAssigned","Parameters":"(ModularCar,Rust.Modular.ItemModVehicleModule[])","ClassName":"ModularCar","MethodCode":"\r\n\tpublic void SpawnPreassignedModules()\r\n\t{\r\n\t\tif (!spawnSettings.useSpawnSettings || CollectionEx.IsNullOrEmpty(spawnSettings.configurationOptions))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tModularCarPresetConfig modularCarPresetConfig = spawnSettings.configurationOptions[UnityEngine.Random.Range(0, spawnSettings.configurationOptions.Length)];\r\n\t\tif (Interface.CallHook(\"OnVehicleModulesAssign\", this, modularCarPresetConfig.socketItemDefs) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < modularCarPresetConfig.socketItemDefs.Length; i++)\r\n\t\t{\r\n\t\t\tItemModVehicleModule itemModVehicleModule = modularCarPresetConfig.socketItemDefs[i];\r\n\t\t\tif (itemModVehicleModule != null && base.Inventory.SocketsAreFree(i, itemModVehicleModule.socketsTaken))\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(itemModVehicleModule.GetComponent<ItemDefinition>(), 1, 0uL);\r\n\t\t\t\tfloat num = UnityEngine.Random.Range(spawnSettings.minStartHealthPercent, spawnSettings.maxStartHealthPercent);\r\n\t\t\t\titem.condition = item.maxCondition * num;\r\n\t\t\t\tif (!TryAddModule(item))\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnVehicleModulesAssigned\", this, modularCarPresetConfig.socketItemDefs);\r\n\t\tInvoke(HandleAdminBonus, 0f);\r\n\t}\r\n"},{"Name":"OnRackedWeaponSwap","Parameters":"(Item,WeaponRackSlot,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate void SwapPlayerWeapon(BasePlayer player, int gridCellIndex, int takeFromBeltIndex, int rotation)\r\n\t{\r\n\t\tItem item = player.GetHeldEntity()?.GetItem();\r\n\t\tif (item == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWorldModelRackMountConfig forItemDef = WorldModelRackMountConfig.GetForItemDef(item.info);\r\n\t\tif (forItemDef == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(gridCellIndex);\r\n\t\tif (weaponAtIndex != null)\r\n\t\t{\r\n\t\t\tint mountSlotIndex = gridCellIndex;\r\n\t\t\tif (CustomRackType != 0)\r\n\t\t\t{\r\n\t\t\t\tgridCellIndex = 0;\r\n\t\t\t}\r\n\t\t\tint bestPlacementCellIndex = GetBestPlacementCellIndex(GetXYForIndex(gridCellIndex), forItemDef, rotation, weaponAtIndex);\r\n\t\t\tif (bestPlacementCellIndex != -1 && Interface.CallHook(\"OnRackedWeaponSwap\", item, weaponAtIndex, player, this) == null)\r\n\t\t\t{\r\n\t\t\t\titem.RemoveFromContainer();\r\n\t\t\t\tGivePlayerWeapon(player, mountSlotIndex, takeFromBeltIndex, tryHold: false);\r\n\t\t\t\tMountWeapon(item, player, bestPlacementCellIndex, rotation, sendUpdate: false);\r\n\t\t\t\tItemManager.DoRemoves();\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tInterface.CallHook(\"OnRackedWeaponSwapped\", item, weaponAtIndex, player, this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTakeCurrencyItem","Parameters":"(NPCVendingMachine,Item)","ClassName":"NPCVendingMachine","MethodCode":"\r\n\tpublic override void TakeCurrencyItem(Item takenCurrencyItem)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnTakeCurrencyItem\", this, takenCurrencyItem) == null)\r\n\t\t{\r\n\t\t\ttakenCurrencyItem.MoveToContainer(base.inventory);\r\n\t\t\ttakenCurrencyItem.RemoveFromContainer();\r\n\t\t\ttakenCurrencyItem.Remove();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemAction","Parameters":"(Item,string,BasePlayer)","ClassName":"PlayerInventory","MethodCode":"\r\n\t[BaseEntity.RPC_Server.FromOwner]\r\n\t[BaseEntity.RPC_Server]\r\n\tprivate void ItemCmd(BaseEntity.RPCMessage msg)\r\n\t{\r\n\t\tif ((msg.player != null && msg.player.IsWounded()) || base.baseEntity.IsTransferring())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemId id = msg.read.ItemID();\r\n\t\tstring text = msg.read.String();\r\n\t\tItem item = FindItemByUID(id);\r\n\t\tif (item == null || Interface.CallHook(\"OnItemAction\", item, text, msg.player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity entityOwner = item.GetEntityOwner();\r\n\t\tif ((entityOwner != null && entityOwner == msg.player && msg.player.IsRestrainedOrSurrendering) || item.IsLocked() || (item.parent != null && item.parent.IsLocked()) || !CanMoveItemsFrom(item.GetEntityOwner(), item))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (text == \"drop\")\r\n\t\t{\r\n\t\t\tint num = item.amount;\r\n\t\t\tif (msg.read.Unread >= 4)\r\n\t\t\t{\r\n\t\t\t\tnum = msg.read.Int32();\r\n\t\t\t}\r\n\t\t\tif (!msg.player.isMounted && !msg.player.HasParent() && !GamePhysics.LineOfSight(msg.player.transform.position, msg.player.eyes.position, 1218519041))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbase.baseEntity.stats.Add(\"item_drop\", 1, (Stats)5);\r\n\t\t\tif (num < item.amount)\r\n\t\t\t{\r\n\t\t\t\tItem item2 = item.SplitItem(num);\r\n\t\t\t\tItemContainer parent = item.parent;\r\n\t\t\t\tif (item2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tDroppedItem droppedItem = item2.Drop(base.baseEntity.GetDropPosition(), base.baseEntity.GetDropVelocity()) as DroppedItem;\r\n\t\t\t\t\tif (droppedItem != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdroppedItem.DropReason = DroppedItem.DropReasonEnum.Player;\r\n\t\t\t\t\t\tdroppedItem.DroppedBy = base.baseEntity.userID;\r\n\t\t\t\t\t\tdroppedItem.DroppedTime = DateTime.UtcNow;\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnItemDropped(base.baseEntity, droppedItem, DroppedItem.DropReasonEnum.Player);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tparent?.onItemRemovedFromStack?.Invoke(item, num);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tItemContainer parent2 = item.parent;\r\n\t\t\t\tDroppedItem droppedItem2 = item.Drop(base.baseEntity.GetDropPosition(), base.baseEntity.GetDropVelocity()) as DroppedItem;\r\n\t\t\t\tif (droppedItem2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tdroppedItem2.DropReason = DroppedItem.DropReasonEnum.Player;\r\n\t\t\t\t\tdroppedItem2.DroppedBy = base.baseEntity.userID;\r\n\t\t\t\t\tdroppedItem2.DroppedTime = DateTime.UtcNow;\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnItemDropped(base.baseEntity, droppedItem2, DroppedItem.DropReasonEnum.Player);\r\n\t\t\t\t}\r\n\t\t\t\tparent2?.onItemAddedRemoved?.Invoke(item, arg2: false);\r\n\t\t\t}\r\n\t\t\tbase.baseEntity.SignalBroadcast(BaseEntity.Signal.Gesture, \"drop_item\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\titem.ServerCommand(text, base.baseEntity);\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tServerUpdate(0f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemUnwrap","Parameters":"(Item,BasePlayer,ItemModUnwrap)","ClassName":"ItemModUnwrap","MethodCode":"\r\n\tpublic override void ServerCommand(Item item, string command, BasePlayer player)\r\n\t{\r\n\t\tif (command == \"unwrap\" && item.amount > 0 && Interface.CallHook(\"OnItemUnwrap\", item, player, this) == null)\r\n\t\t{\r\n\t\t\titem.UseItem();\r\n\t\t\tint num = UnityEngine.Random.Range(minTries, maxTries + 1);\r\n\t\t\tfor (int i = 0; i < num; i++)\r\n\t\t\t{\r\n\t\t\t\trevealList.SpawnIntoContainer(player.inventory.containerMain);\r\n\t\t\t}\r\n\t\t\tif (successEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(successEffect.resourcePath, player.eyes.position);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemDeployed","Parameters":"(Deployer,ItemModDeployable,BaseEntity)","ClassName":"Deployer","MethodCode":"\r\n\tpublic void DoDeploy_Regular(Deployable deployable, Ray ray)\r\n\t{\r\n\t\tif (!HasItemAmount())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!ownerPlayer.CanBuild())\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.NoPermission, false);\r\n\t\t}\r\n\t\telse if (ConVar.AntiHack.objectplacement && ownerPlayer.TriggeredAntiHack())\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.Antihack, false);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!CheckPlacement(deployable, ray, 8f) || !UnityEngine.Physics.Raycast(ray, out var hitInfo, 8f, 1235288065))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tVector3 point = hitInfo.point;\r\n\t\t\tQuaternion deployedRotation = GetDeployedRotation(hitInfo.normal, ray.direction);\r\n\t\t\tItem ownerItem = GetOwnerItem();\r\n\t\t\tItemModDeployable modDeployable = GetModDeployable();\r\n\t\t\tif (ownerPlayer.Distance(point) > 3f)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.TooFarAway, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!ownerPlayer.CanBuild(point, deployedRotation, deployable.bounds))\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.NoPermission, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(modDeployable.entityPrefab.resourcePath, point, deployedRotation);\r\n\t\t\tif (!baseEntity)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogWarning(\"Couldn't create prefab:\" + modDeployable.entityPrefab.resourcePath);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbaseEntity.skinID = ownerItem.skin;\r\n\t\t\tbaseEntity.SendMessage(\"SetDeployedBy\", ownerPlayer, SendMessageOptions.DontRequireReceiver);\r\n\t\t\tbaseEntity.OwnerID = ownerPlayer.userID;\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t\tmodDeployable.OnDeployed(baseEntity, ownerPlayer);\r\n\t\t\tInterface.CallHook(\"OnItemDeployed\", this, modDeployable, baseEntity);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityBuilt(baseEntity, ownerPlayer);\r\n\t\t\tUseItemAmount(1);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMissionStarted","Parameters":"(BaseMission,BaseMission.MissionInstance,BasePlayer)","ClassName":"BaseMission","MethodCode":"\r\n\tpublic virtual void MissionStart(MissionInstance instance, BasePlayer assignee)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnMissionStart\", this, instance, assignee) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < objectives.Length; i++)\r\n\t\t{\r\n\t\t\tobjectives[i].Get().MissionStarted(i, instance, assignee);\r\n\t\t}\r\n\t\tif (acceptEffect.isValid)\r\n\t\t{\r\n\t\t\tDoMissionEffect(acceptEffect.resourcePath, assignee);\r\n\t\t}\r\n\t\tMissionEntityEntry[] array = missionEntities;\r\n\t\tforeach (MissionEntityEntry missionEntityEntry in array)\r\n\t\t{\r\n\t\t\tif (missionEntityEntry.spawnOnMissionStart)\r\n\t\t\t{\r\n\t\t\t\tinstance.GetMissionEntity(missionEntityEntry.identifier, assignee);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (AllowedTutorialItems != 0)\r\n\t\t{\r\n\t\t\tassignee.SetTutorialAllowance(AllowedTutorialItems);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnMissionStarted\", this, instance, assignee);\r\n\t}\r\n"},{"Name":"OnMessagePlayer","Parameters":"(string,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void ChatMessage(string msg)\r\n\t{\r\n\t\tif (base.isServer && Interface.CallHook(\"OnMessagePlayer\", msg, this) == null)\r\n\t\t{\r\n\t\t\tSendConsoleCommand(\"chat.add\", 2, 0, msg);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStashOcclude","Parameters":"(StashContainer)","ClassName":"StashContainer","MethodCode":"\r\n\tpublic void DoOccludedCheck()\r\n\t{\r\n\t\tif (UnityEngine.Physics.SphereCast(new Ray(base.transform.position + Vector3.up * 5f, Vector3.down), 0.25f, 5f, 2097152) && Interface.CallHook(\"OnStashOcclude\", this) == null)\r\n\t\t{\r\n\t\t\tDropItems();\r\n\t\t\tKill();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFireBallSpread","Parameters":"(FireBall,BaseEntity)","ClassName":"FireBall","MethodCode":"\r\n\tpublic void TryToSpread()\r\n\t{\r\n\t\tfloat num = 0.9f - generation * 0.1f;\r\n\t\tif (UnityEngine.Random.Range(0f, 1f) < num && spreadSubEntity.isValid)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(spreadSubEntity.resourcePath);\r\n\t\t\tif ((bool)baseEntity)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.transform.position = base.transform.position + Vector3.up * 0.25f;\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t\tVector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(45f, Vector3.up);\r\n\t\t\t\tbaseEntity.creatorEntity = ((creatorEntity == null) ? baseEntity : creatorEntity);\r\n\t\t\t\tInterface.CallHook(\"OnFireBallSpread\", this, baseEntity);\r\n\t\t\t\tbaseEntity.SetVelocity(modifiedAimConeDirection * UnityEngine.Random.Range(5f, 8f));\r\n\t\t\t\tbaseEntity.SendMessage(\"SetGeneration\", generation + 1f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRackedWeaponLoaded","Parameters":"(Item,ItemDefinition,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\t[RPC_Server]\r\n\tprivate void LoadWeaponAmmo(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!player)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint gridIndex = msg.read.Int32();\r\n\t\tint num = msg.read.Int32();\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(gridIndex);\r\n\t\tif (weaponAtIndex == null || !weaponAtIndex.CanBeReloadedAtWeaponRack())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.GetSlot(weaponAtIndex.InventoryIndex);\r\n\t\tif (slot == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity heldEntity = slot.GetHeldEntity();\r\n\t\tif (heldEntity == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseProjectile component = heldEntity.GetComponent<BaseProjectile>();\r\n\t\tif (component == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(num);\r\n\t\tif (itemDefinition == null || Interface.CallHook(\"OnRackedWeaponLoad\", slot, itemDefinition, player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (itemDefinition == SnowballGun.SnowballInventoryItem)\r\n\t\t{\r\n\t\t\titemDefinition = SnowballGun.SnowballAmmoItem;\r\n\t\t\tif (!(itemDefinition != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tnum = itemDefinition.itemid;\r\n\t\t}\r\n\t\tif (itemDefinition == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModProjectile component2 = itemDefinition.GetComponent<ItemModProjectile>();\r\n\t\tif (!(component2 == null) && component2.IsAmmo(component.primaryMagazine.definition.ammoTypes))\r\n\t\t{\r\n\t\t\tif (num != component.primaryMagazine.ammoType.itemid && component.primaryMagazine.contents > 0)\r\n\t\t\t{\r\n\t\t\t\tplayer.GiveItem(ItemManager.CreateByItemID(component.primaryMagazine.ammoType.itemid, component.primaryMagazine.contents, 0uL));\r\n\t\t\t\tcomponent.SetAmmoCount(0);\r\n\t\t\t}\r\n\t\t\tcomponent.primaryMagazine.ammoType = itemDefinition;\r\n\t\t\tcomponent.TryReloadMagazine(player.inventory);\r\n\t\t\tSetSlotAmmoDetails(weaponAtIndex, slot);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tClientRPC(RpcTarget.Player(\"PlayAmmoSound\", player), itemDefinition.itemid, 0);\r\n\t\t\tInterface.CallHook(\"OnRackedWeaponLoaded\", slot, itemDefinition, player, this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBoomboxStationValidate","Parameters":"(string)","ClassName":"BoomBox","MethodCode":"\r\n\tpublic static bool IsStationValid(string url)\r\n\t{\r\n\t\tParseServerUrlList();\r\n\t\tobject obj = Interface.CallHook(\"OnBoomboxStationValidate\", url);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (ValidStations == null || !ValidStations.ContainsValue(url))\r\n\t\t{\r\n\t\t\tif (ServerValidStations != null)\r\n\t\t\t{\r\n\t\t\t\treturn ServerValidStations.ContainsValue(url);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnPortalUse","Parameters":"(BasePlayer,BasePortal)","ClassName":"BasePortal","MethodCode":"\r\n\tpublic virtual void UsePortal(BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPortalUse\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tLinkPortal();\r\n\t\tif (targetPortal != null)\r\n\t\t{\r\n\t\t\tplayer.PauseFlyHackDetection();\r\n\t\t\tplayer.PauseSpeedHackDetection();\r\n\t\t\tVector3 position = player.transform.position;\r\n\t\t\tVector3 vector = targetPortal.GetLocalEntryExitPosition();\r\n\t\t\tVector3 vector2 = base.transform.InverseTransformDirection(player.eyes.BodyForward());\r\n\t\t\tVector3 vector3 = vector2;\r\n\t\t\tif (isMirrored)\r\n\t\t\t{\r\n\t\t\t\tVector3 position2 = base.transform.InverseTransformPoint(player.transform.position);\r\n\t\t\t\tvector = targetPortal.relativeAnchor.transform.TransformPoint(position2);\r\n\t\t\t\tvector3 = targetPortal.relativeAnchor.transform.TransformDirection(vector2);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvector3 = targetPortal.GetLocalEntryExitRotation() * Vector3.forward;\r\n\t\t\t}\r\n\t\t\tif (disappearEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(disappearEffect.resourcePath, position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tif (appearEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(appearEffect.resourcePath, vector, Vector3.up);\r\n\t\t\t}\r\n\t\t\tplayer.SetParent(null, worldPositionStays: true);\r\n\t\t\tplayer.Teleport(vector);\r\n\t\t\tplayer.ForceUpdateTriggers();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"ForceViewAnglesTo\", player), vector3);\r\n\t\t\tif (transitionSoundEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(transitionSoundEffect.resourcePath, targetPortal.relativeAnchor.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tplayer.UpdateNetworkGroup();\r\n\t\t\tplayer.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tplayer.ClientRPC(RpcTarget.Player(\"StartLoading_Quick\", player), arg1: true);\r\n\t\t\tInterface.CallHook(\"OnPortalUsed\", player, this);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tDebug.Log(\"No portal...\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTrapTrigger","Parameters":"(BearTrap,UnityEngine.GameObject)","ClassName":"BearTrap","MethodCode":"\r\n\tpublic override void ObjectEntered(GameObject obj)\r\n\t{\r\n\t\tif (Armed() && Interface.CallHook(\"OnTrapTrigger\", this, obj) == null)\r\n\t\t{\r\n\t\t\thurtTarget = obj;\r\n\t\t\tInvoke(DelayedFire, 0.05f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRidableAnimalClaim","Parameters":"(BaseRidableAnimal,BasePlayer,Item)","ClassName":"BaseRidableAnimal","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_Claim(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!(player == null) && IsForSale())\r\n\t\t{\r\n\t\t\tint tokenItemID = msg.read.Int32();\r\n\t\t\tItem item = GetPurchaseToken(player, tokenItemID);\r\n\t\t\tif (item != null && Interface.CallHook(\"OnRidableAnimalClaim\", this, player, item) == null)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved2, b: false);\r\n\t\t\t\tOnClaimedWithToken(item);\r\n\t\t\t\titem.UseItem();\r\n\t\t\t\tFacepunch.Rust.Analytics.Server.VehiclePurchased(base.ShortPrefabName);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnVehiclePurchased(msg.player, this);\r\n\t\t\t\tAttemptMount(player, doMountChecks: false);\r\n\t\t\t\tInterface.CallHook(\"OnRidableAnimalClaimed\", this, player);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWallpaperSet","Parameters":"(BuildingBlock,ulong,int)","ClassName":"BuildingBlock","MethodCode":"\r\n\tpublic void SetWallpaper(ulong id, int side = 0)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnWallpaperSet\", this, id, side) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (side == 0)\r\n\t\t{\r\n\t\t\tif (HasWallpaper(side) && wallpaperID == id)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\twallpaperID = id;\r\n\t\t\twallpaperHealth = 100f;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (HasWallpaper(side) && wallpaperID2 == id)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\twallpaperID2 = id;\r\n\t\t\twallpaperHealth2 = 100f;\r\n\t\t}\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tSetConditionalModel(currentSkin.DetermineConditionalModelState(this));\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"RefreshSkin\"));\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanLock","Parameters":"(BasePlayer,KeyLock)","ClassName":"KeyLock","MethodCode":"\r\n\tprivate void Lock(BasePlayer player)\r\n\t{\r\n\t\tif (!(player == null) && player.CanInteract() && !IsLocked() && Interface.CallHook(\"CanLock\", player, this) == null && HasLockPermission(player))\r\n\t\t{\r\n\t\t\tLockLock(player);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNpcDuck","Parameters":"(HumanNPC)","ClassName":"HumanNPC","MethodCode":"\r\n\tpublic void SetDucked(bool flag)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnNpcDuck\", this) == null)\r\n\t\t{\r\n\t\t\tmodelState.ducked = flag;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnElevatorButtonPress","Parameters":"(ElevatorLift,BasePlayer,Elevator.Direction,bool)","ClassName":"ElevatorLift","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void Server_RaiseLowerFloor(RPCMessage msg)\r\n\t{\r\n\t\tElevator.Direction direction = (Elevator.Direction)msg.read.Int32();\r\n\t\tbool flag = msg.read.Bit();\r\n\t\tif (Interface.CallHook(\"OnElevatorButtonPress\", this, msg.player, direction, flag) == null)\r\n\t\t{\r\n\t\t\tSetFlag((direction == Elevator.Direction.Up) ? Flags.Reserved1 : Flags.Reserved2, b: true);\r\n\t\t\towner.Server_RaiseLowerElevator(direction, flag);\r\n\t\t\tInvoke(ClearDirection, 0.7f);\r\n\t\t\tif (liftButtonPressedEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(liftButtonPressedEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTrapTrigger","Parameters":"(Landmine,UnityEngine.GameObject)","ClassName":"Landmine","MethodCode":"\r\n\tpublic override void ObjectEntered(GameObject obj)\r\n\t{\r\n\t\tif (!base.isClient)\r\n\t\t{\r\n\t\t\tif (!Armed())\r\n\t\t\t{\r\n\t\t\t\tCancelInvoke(Arm);\r\n\t\t\t\tblocked = true;\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnTrapTrigger\", this, obj) == null)\r\n\t\t\t{\r\n\t\t\t\tBasePlayer ply = GameObjectEx.ToBaseEntity(obj) as BasePlayer;\r\n\t\t\t\tTrigger(ply);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRidableAnimalClaimed","Parameters":"(BaseRidableAnimal,BasePlayer)","ClassName":"BaseRidableAnimal","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_Claim(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!(player == null) && IsForSale())\r\n\t\t{\r\n\t\t\tint tokenItemID = msg.read.Int32();\r\n\t\t\tItem item = GetPurchaseToken(player, tokenItemID);\r\n\t\t\tif (item != null && Interface.CallHook(\"OnRidableAnimalClaim\", this, player, item) == null)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved2, b: false);\r\n\t\t\t\tOnClaimedWithToken(item);\r\n\t\t\t\titem.UseItem();\r\n\t\t\t\tFacepunch.Rust.Analytics.Server.VehiclePurchased(base.ShortPrefabName);\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnVehiclePurchased(msg.player, this);\r\n\t\t\t\tAttemptMount(player, doMountChecks: false);\r\n\t\t\t\tInterface.CallHook(\"OnRidableAnimalClaimed\", this, player);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamKick","Parameters":"(RelationshipManager.PlayerTeam,BasePlayer,ulong)","ClassName":"RelationshipManager","MethodCode":"\r\n\t[ServerUserVar]\r\n\tpublic static void kickmember(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tBasePlayer basePlayer = ArgEx.Player(arg);\r\n\t\tif (basePlayer == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(basePlayer.currentTeam);\r\n\t\tif (playerTeam != null && !(playerTeam.GetLeader() != basePlayer))\r\n\t\t{\r\n\t\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\t\tif ((ulong)basePlayer.userID != uLong && Interface.CallHook(\"OnTeamKick\", playerTeam, basePlayer, uLong) == null)\r\n\t\t\t{\r\n\t\t\t\tplayerTeam.RemovePlayer(uLong);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeTargeted","Parameters":"(BasePlayer,FlameTurret)","ClassName":"FlameTurret","MethodCode":"\r\n\tpublic bool CheckTrigger()\r\n\t{\r\n\t\tif (Time.realtimeSinceStartup < nextTriggerCheckTime)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tnextTriggerCheckTime = Time.realtimeSinceStartup + 1f / triggerCheckRate;\r\n\t\tList<RaycastHit> obj = Pool.Get<List<RaycastHit>>();\r\n\t\tHashSet<BaseEntity> entityContents = trigger.entityContents;\r\n\t\tbool flag = false;\r\n\t\tif (entityContents != null)\r\n\t\t{\r\n\t\t\tforeach (BaseEntity item in entityContents)\r\n\t\t\t{\r\n\t\t\t\tBasePlayer component = item.GetComponent<BasePlayer>();\r\n\t\t\t\tif (component.IsSleeping() || !component.IsAlive())\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj2 = Interface.CallHook(\"CanBeTargeted\", component, this);\r\n\t\t\t\tif (obj2 is bool)\r\n\t\t\t\t{\r\n\t\t\t\t\tPool.FreeUnmanaged(ref obj);\r\n\t\t\t\t\treturn (bool)obj2;\r\n\t\t\t\t}\r\n\t\t\t\tif (!(component.transform.position.y <= GetEyePosition().y + 0.5f) || component.IsBuildingAuthed())\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tobj.Clear();\r\n\t\t\t\tGamePhysics.TraceAll(new Ray(component.eyes.position, (GetEyePosition() - component.eyes.position).normalized), 0f, obj, 9f, 1218519297);\r\n\t\t\t\tfor (int i = 0; i < obj.Count; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tBaseEntity entity = RaycastHitEx.GetEntity(obj[i]);\r\n\t\t\t\t\tif (entity != null && (entity == this || entity.EqualNetID(this)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(entity != null) || entity.ShouldBlockProjectiles())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (flag)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tPool.FreeUnmanaged(ref obj);\r\n\t\treturn flag;\r\n\t}\r\n"},{"Name":"OnPlayerSpectateEnd","Parameters":"(BasePlayer,string)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void StopSpectating()\r\n\t{\r\n\t\tif (IsSpectating() && Interface.CallHook(\"OnPlayerSpectateEnd\", this, spectateFilter) == null)\r\n\t\t{\r\n\t\t\tSetParent(null);\r\n\t\t\tSetPlayerFlag(PlayerFlags.Spectating, b: false);\r\n\t\t\tUnityEngine.TransformEx.SetLayerRecursive(base.gameObject, 17);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseVending","Parameters":"(BasePlayer,VendingMachine)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic override bool CanOpenLootPanel(BasePlayer player, string panelName)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseVending\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (panelName == customerPanel)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (base.CanOpenLootPanel(player, panelName))\r\n\t\t{\r\n\t\t\treturn CanPlayerAdmin(player);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnServerInitialize","Parameters":"()","ClassName":"ServerMgr","MethodCode":"\r\n\tpublic bool Initialize(bool loadSave = true, string saveFile = \"\", bool allowOutOfDateSaves = false, bool skipInitialSpawn = false)\r\n\t{\r\n\t\tInterface.CallHook(\"OnServerInitialize\");\r\n\t\tpersistance = new UserPersistance(ConVar.Server.rootFolder);\r\n\t\tplayerStateManager = new PlayerStateManager(persistance);\r\n\t\tTutorialIsland.GenerateIslandSpawnPoints(loadingSave: true);\r\n\t\tif ((bool)SingletonComponent<SpawnHandler>.Instance)\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"SpawnHandler.UpdateDistributions\"))\r\n\t\t\t{\r\n\t\t\t\tSingletonComponent<SpawnHandler>.Instance.UpdateDistributions();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (loadSave)\r\n\t\t{\r\n\t\t\tWorld.LoadedFromSave = true;\r\n\t\t\tWorld.LoadedFromSave = (skipInitialSpawn = SaveRestore.Load(saveFile, allowOutOfDateSaves));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSaveRestore.SaveCreatedTime = DateTime.UtcNow;\r\n\t\t\tWorld.LoadedFromSave = false;\r\n\t\t}\r\n\t\tif (!World.LoadedFromSave)\r\n\t\t{\r\n\t\t\tSaveRestore.SpawnMapEntities(SaveRestore.FindMapEntities());\r\n\t\t}\r\n\t\tSaveRestore.InitializeWipeId();\r\n\t\tif ((bool)SingletonComponent<SpawnHandler>.Instance)\r\n\t\t{\r\n\t\t\tif (!skipInitialSpawn)\r\n\t\t\t{\r\n\t\t\t\tusing (TimeWarning.New(\"SpawnHandler.InitialSpawn\", 200))\r\n\t\t\t\t{\r\n\t\t\t\t\tSingletonComponent<SpawnHandler>.Instance.InitialSpawn();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tusing (TimeWarning.New(\"SpawnHandler.StartSpawnTick\", 200))\r\n\t\t\t{\r\n\t\t\t\tSingletonComponent<SpawnHandler>.Instance.StartSpawnTick();\r\n\t\t\t}\r\n\t\t}\r\n\t\tCreateImportantEntities();\r\n\t\tauth = GetComponent<ConnectionAuth>();\r\n\t\tFacepunch.Rust.Analytics.Azure.Initialize();\r\n\t\treturn World.LoadedFromSave;\r\n\t}\r\n"},{"Name":"IOnEntitySaved","Parameters":"(BaseNetworkable,BaseNetworkable.SaveInfo)","ClassName":"BaseNetworkable","MethodCode":"\r\n\tpublic void ToStream(Stream stream, SaveInfo saveInfo)\r\n\t{\r\n\t\tusing (saveInfo.msg = Facepunch.Pool.Get<ProtoBuf.Entity>())\r\n\t\t{\r\n\t\t\tSave(saveInfo);\r\n\t\t\tif (saveInfo.msg.baseEntity == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogError(this?.ToString() + \": ToStream - no BaseEntity!?\");\r\n\t\t\t}\r\n\t\t\tif (saveInfo.msg.baseNetworkable == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.LogError(this?.ToString() + \": ToStream - no baseNetworkable!?\");\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"IOnEntitySaved\", this, saveInfo);\r\n\t\t\tsaveInfo.msg.ToProto(stream);\r\n\t\t\tPostSave(saveInfo);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamDisbanded","Parameters":"(RelationshipManager.PlayerTeam)","ClassName":"RelationshipManager","MethodCode":"\r\n\tpublic void DisbandTeam(PlayerTeam teamToDisband)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnTeamDisband\", teamToDisband) == null)\r\n\t\t{\r\n\t\t\tteams.Remove(teamToDisband.teamID);\r\n\t\t\tInterface.CallHook(\"OnTeamDisbanded\", teamToDisband);\r\n\t\t\tFacepunch.Pool.Free(ref teamToDisband);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHorseUnhitch","Parameters":"(RidableHorse,HitchTrough.HitchSpot)","ClassName":"HitchTrough","MethodCode":"\r\n\tpublic void Unhitch(RidableHorse horse)\r\n\t{\r\n\t\tHitchSpot[] array = hitchSpots;\r\n\t\tforeach (HitchSpot hitchSpot in array)\r\n\t\t{\r\n\t\t\tif (hitchSpot.GetHorse(base.isServer) == horse)\r\n\t\t\t{\r\n\t\t\t\tif (Interface.CallHook(\"OnHorseUnhitch\", horse, hitchSpot) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\thitchSpot.SetOccupiedBy(null);\r\n\t\t\t\thorse.SetHitch(null);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMissionAssigned","Parameters":"(BaseMission,IMissionProvider,BasePlayer)","ClassName":"BaseMission","MethodCode":"\r\n\tpublic static bool AssignMission(BasePlayer assignee, IMissionProvider provider, BaseMission mission)\r\n\t{\r\n\t\tif (!missionsenabled)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!mission.IsEligableForMission(assignee, provider))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanAssignMission\", assignee, mission, provider);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tint num = assignee.missions.FindIndexWith((MissionInstance i) => i.missionID, mission.id);\r\n\t\tMissionInstance missionInstance;\r\n\t\tint activeMission;\r\n\t\tif (num >= 0)\r\n\t\t{\r\n\t\t\tmissionInstance = assignee.missions[num];\r\n\t\t\tactiveMission = num;\r\n\t\t\tmissionInstance.Reset();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmissionInstance = Pool.Get<MissionInstance>();\r\n\t\t\tactiveMission = assignee.missions.Count;\r\n\t\t\tassignee.missions.Add(missionInstance);\r\n\t\t}\r\n\t\tmissionInstance.missionID = mission.id;\r\n\t\tmissionInstance.startTime = Time.time;\r\n\t\tmissionInstance.providerID = provider.ProviderID();\r\n\t\tmissionInstance.status = MissionStatus.Active;\r\n\t\tmissionInstance.objectiveStatuses = new MissionInstance.ObjectiveStatus[mission.objectives.Length];\r\n\t\tfor (int j = 0; j < mission.objectives.Length; j++)\r\n\t\t{\r\n\t\t\tmissionInstance.objectiveStatuses[j] = new MissionInstance.ObjectiveStatus();\r\n\t\t}\r\n\t\tmission.MissionStart(missionInstance, assignee);\r\n\t\tassignee.SetActiveMission(activeMission);\r\n\t\tassignee.MissionDirty();\r\n\t\tInterface.CallHook(\"OnMissionAssigned\", mission, provider, assignee);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnRefreshVendingStock","Parameters":"(VendingMachine,ItemDefinition)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic void RefreshSellOrderStockLevel(ItemDefinition itemDef = null)\r\n\t{\r\n\t\tint num = 0;\r\n\t\tforeach (ProtoBuf.VendingMachine.SellOrder sellOrder in sellOrders.sellOrders)\r\n\t\t{\r\n\t\t\tif (!(itemDef == null) && itemDef.itemid != sellOrder.itemToSellID)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tList<Item> obj = Facepunch.Pool.Get<List<Item>>();\r\n\t\t\tGetItemsToSell(sellOrder, obj);\r\n\t\t\tint inStock;\r\n\t\t\tif (obj.Count < 0)\r\n\t\t\t{\r\n\t\t\t\tinStock = 0;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tList<Item> source = obj;\r\n\t\t\t\tFunc<Item, int> selector = (Item x) => x.amount;\r\n\t\t\t\tInterface.CallHook(\"OnRefreshVendingStock\", this, itemDef);\r\n\t\t\t\tinStock = source.Sum(selector) / sellOrder.itemToSellAmount;\r\n\t\t\t}\r\n\t\t\tsellOrder.inStock = inStock;\r\n\t\t\tfloat itemCondition = 0f;\r\n\t\t\tfloat itemConditionMax = 0f;\r\n\t\t\tint instanceData = 0;\r\n\t\t\tList<int> list = Facepunch.Pool.Get<List<int>>();\r\n\t\t\tint totalAttachmentSlots = 0;\r\n\t\t\tint ammoType = 0;\r\n\t\t\tint ammoCount = 0;\r\n\t\t\tif (obj.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tif (obj[0].hasCondition)\r\n\t\t\t\t{\r\n\t\t\t\t\titemCondition = obj[0].condition;\r\n\t\t\t\t\titemConditionMax = obj[0].maxCondition;\r\n\t\t\t\t}\r\n\t\t\t\tif (obj[0].info != null && obj[0].info.amountType == ItemDefinition.AmountType.Genetics && obj[0].instanceData != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tinstanceData = obj[0].instanceData.dataInt;\r\n\t\t\t\t\tsellOrder.inStock = obj[0].amount;\r\n\t\t\t\t}\r\n\t\t\t\tif (obj[0].contents != null && obj[0].contents.capacity > 0 && obj[0].contents.HasFlag(ItemContainer.Flag.ShowSlotsOnIcon))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (Item item in obj[0].contents.itemList)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.Add(item.info.itemid);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotalAttachmentSlots = obj[0].contents.capacity;\r\n\t\t\t\t}\r\n\t\t\t\tif (obj[0].ammoCount.HasValue)\r\n\t\t\t\t{\r\n\t\t\t\t\tammoCount = obj[0].ammoCount.Value;\r\n\t\t\t\t\tBaseEntity heldEntity = obj[0].GetHeldEntity();\r\n\t\t\t\t\tif ((bool)heldEntity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tBaseProjectile component = heldEntity.GetComponent<BaseProjectile>();\r\n\t\t\t\t\t\tif ((bool)component)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tammoType = component.primaryMagazine.ammoType.itemid;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsellOrder.ammoType = ammoType;\r\n\t\t\tsellOrder.ammoCount = ammoCount;\r\n\t\t\tsellOrder.itemCondition = itemCondition;\r\n\t\t\tsellOrder.itemConditionMax = itemConditionMax;\r\n\t\t\tsellOrder.instanceData = instanceData;\r\n\t\t\tif (sellOrder.attachmentsList != null)\r\n\t\t\t{\r\n\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref sellOrder.attachmentsList);\r\n\t\t\t}\r\n\t\t\tsellOrder.attachmentsList = list;\r\n\t\t\tsellOrder.totalAttachmentSlots = totalAttachmentSlots;\r\n\t\t\tsellOrder.priceMultiplier = GetDiscountForSlot(num, sellOrder);\r\n\t\t\tnum++;\r\n\t\t\tFacepunch.Pool.Free(ref obj, freeElements: false);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTreeMarkerHit","Parameters":"(TreeEntity,HitInfo)","ClassName":"TreeEntity","MethodCode":"\r\n\tpublic bool DidHitMarker(HitInfo info)\r\n\t{\r\n\t\tif (xMarker == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnTreeMarkerHit\", this, info);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (PrefabAttribute.server.Find<TreeMarkerData>(prefabID) != null)\r\n\t\t{\r\n\t\t\tif (new Bounds(xMarker.transform.position, Vector3.one * 0.2f).Contains(info.HitPositionWorld))\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tVector3 lhs = Vector3Ex.Direction2D(base.transform.position, xMarker.transform.position);\r\n\t\t\tVector3 attackNormal = info.attackNormal;\r\n\t\t\tfloat num = Vector3.Dot(lhs, attackNormal);\r\n\t\t\tfloat num2 = Vector3.Distance(xMarker.transform.position, info.HitPositionWorld);\r\n\t\t\tif (num >= 0.3f && num2 <= 0.2f)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnShopAcceptClick","Parameters":"(ShopFront,BasePlayer)","ClassName":"ShopFront","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void AcceptClicked(RPCMessage msg)\r\n\t{\r\n\t\tif (IsTradingPlayer(msg.player) && !(vendorPlayer == null) && !(customerPlayer == null) && Interface.CallHook(\"OnShopAcceptClick\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\tif (IsPlayerVendor(msg.player))\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved1, b: true);\r\n\t\t\t\tvendorInventory.SetLocked(isLocked: true);\r\n\t\t\t}\r\n\t\t\telse if (IsPlayerCustomer(msg.player))\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\t\t\tcustomerInventory.SetLocked(isLocked: true);\r\n\t\t\t}\r\n\t\t\tif (HasFlag(Flags.Reserved1) && HasFlag(Flags.Reserved2))\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flags.Reserved3, b: true);\r\n\t\t\t\tInvoke(CompleteTrade, 2f);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEngineLoadoutRefresh","Parameters":"(Rust.Modular.EngineStorage)","ClassName":"EngineStorage","MethodCode":"\r\n\tpublic void RefreshLoadoutData()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEngineLoadoutRefresh\", this) == null)\r\n\t\t{\r\n\t\t\tisUsable = base.inventory.IsFull() && base.inventory.itemList.All((Item item) => !item.isBroken);\r\n\t\t\taccelerationBoostPercent = GetContainerItemsValueFor(EngineItemTypeEx.BoostsAcceleration) / (float)accelerationBoostSlots;\r\n\t\t\ttopSpeedBoostPercent = GetContainerItemsValueFor(EngineItemTypeEx.BoostsTopSpeed) / (float)topSpeedBoostSlots;\r\n\t\t\tfuelEconomyBoostPercent = GetContainerItemsValueFor(EngineItemTypeEx.BoostsFuelEconomy) / (float)fuelEconomyBoostSlots;\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tGetEngineModule()?.RefreshPerformanceStats(this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemRecycle","Parameters":"(Item,Recycler)","ClassName":"Recycler","MethodCode":"\r\n\tpublic void RecycleThink()\r\n\t{\r\n\t\tbool flag = false;\r\n\t\tfloat num = (IsSafezoneRecycler() ? safezoneRecycleEfficiency : radtownRecycleEfficiency);\r\n\t\tint num2 = 0;\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\tif (num2 < 6)\r\n\t\t\t{\r\n\t\t\t\tItem slot = base.inventory.GetSlot(num2);\r\n\t\t\t\tif (!CanBeRecycled(slot))\r\n\t\t\t\t{\r\n\t\t\t\t\tnum2++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (Interface.CallHook(\"OnItemRecycle\", slot, this) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!HasRecyclable())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tStopRecycling();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (slot.hasCondition)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum = Mathf.Clamp01(num * Mathf.Clamp(slot.conditionNormalized * slot.maxConditionNormalized, 0.1f, 1f));\r\n\t\t\t\t}\r\n\t\t\t\tint num3 = 1;\r\n\t\t\t\tif (slot.amount > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum3 = Mathf.CeilToInt(Mathf.Min(slot.amount, (float)slot.MaxStackable() * 0.1f));\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnItemRecycleAmount\", slot, num3, this);\r\n\t\t\t\tif (obj is int)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum3 = (int)obj;\r\n\t\t\t\t}\r\n\t\t\t\tif (slot.info.Blueprint.scrapFromRecycle > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num4 = slot.info.Blueprint.scrapFromRecycle * num3;\r\n\t\t\t\t\tif (slot.MaxStackable() == 1 && slot.hasCondition)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum4 *= slot.conditionNormalized;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfloat num5 = num / 0.5f;\r\n\t\t\t\t\tnum4 *= num5;\r\n\t\t\t\t\tint num6 = Mathf.FloorToInt(num4);\r\n\t\t\t\t\tfloat num7 = num4 - (float)num6;\r\n\t\t\t\t\tscrapRemainder += num7;\r\n\t\t\t\t\tif (scrapRemainder >= 1f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint num8 = Mathf.FloorToInt(scrapRemainder);\r\n\t\t\t\t\t\tscrapRemainder -= num8;\r\n\t\t\t\t\t\tnum6 += num8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (num6 >= 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItem item = ItemManager.CreateByName(\"scrap\", num6, 0uL);\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnRecyclerItemProduced(item.info.shortname, item.amount, this, slot);\r\n\t\t\t\t\t\tMoveItemToOutput(item);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!string.IsNullOrEmpty(slot.info.Blueprint.RecycleStat))\r\n\t\t\t\t{\r\n\t\t\t\t\tList<BasePlayer> obj2 = Facepunch.Pool.Get<List<BasePlayer>>();\r\n\t\t\t\t\tVis.Entities(base.transform.position, 3f, obj2, 131072);\r\n\t\t\t\t\tforeach (BasePlayer item3 in obj2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item3.IsAlive() && !item3.IsSleeping() && item3.inventory.loot.entitySource == this)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem3.stats.Add(slot.info.Blueprint.RecycleStat, num3, (Stats)5);\r\n\t\t\t\t\t\t\titem3.stats.Save();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnItemRecycled(slot.info.shortname, num3, this);\r\n\t\t\t\tslot.UseItem(num3);\r\n\t\t\t\tforeach (ItemAmount ingredient in slot.info.Blueprint.ingredients)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (ingredient.itemDef.shortname == \"scrap\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfloat num9 = ingredient.amount / (float)slot.info.Blueprint.amountToCreate * num * (float)num3;\r\n\t\t\t\t\tint num10 = Mathf.FloorToInt(num9);\r\n\t\t\t\t\tfloat num11 = num9 - (float)num10;\r\n\t\t\t\t\tif (num11 > float.Epsilon && UnityEngine.Random.Range(0f, 1f) <= num11)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum10++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (num10 <= 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint num12 = Mathf.CeilToInt((float)num10 / (float)ingredient.itemDef.stackable);\r\n\t\t\t\t\tfor (int i = 0; i < num12; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint num13 = ((num10 > ingredient.itemDef.stackable) ? ingredient.itemDef.stackable : num10);\r\n\t\t\t\t\t\tItem item2 = ItemManager.Create(ingredient.itemDef, num13, 0uL);\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnRecyclerItemProduced(item2.info.shortname, item2.amount, this, slot);\r\n\t\t\t\t\t\tif (!MoveItemToOutput(item2))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnum10 -= num13;\r\n\t\t\t\t\t\tif (num10 <= 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (flag || !HasRecyclable())\r\n\t\t\t{\r\n\t\t\t\tStopRecycling();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanCraft","Parameters":"(ItemCrafter,ItemBlueprint,int,bool)","ClassName":"ItemCrafter","MethodCode":"\r\n\tpublic bool CanCraft(ItemBlueprint bp, int amount = 1, bool free = false)\r\n\t{\r\n\t\tif (base.baseEntity != null && base.baseEntity.IsRestrained)\r\n\t\t{\r\n\t\t\tHandcuffs restraintItem = base.baseEntity.Belt.GetRestraintItem();\r\n\t\t\tif (restraintItem != null && restraintItem.BlockCrafting)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfloat num = (float)amount / (float)bp.targetItem.craftingStackable;\r\n\t\tforeach (ItemCraftTask item in queue)\r\n\t\t{\r\n\t\t\tif (!item.cancelled)\r\n\t\t\t{\r\n\t\t\t\tnum += (float)item.amount / (float)item.blueprint.targetItem.craftingStackable;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (num > 8f)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"CanCraft\", this, bp, amount, free);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (amount < 1 || amount > bp.targetItem.craftingStackable)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tforeach (ItemAmount ingredient in bp.ingredients)\r\n\t\t{\r\n\t\t\tif (!DoesHaveUsableItem(ingredient.itemid, (int)ingredient.amount * amount))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (ingredient.itemDef.condition.enabled && !DoesHaveOKConditionItem(ingredient.itemid, (int)ingredient.amount * amount))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanUseLockedEntity","Parameters":"(BasePlayer,KeyLock)","ClassName":"KeyLock","MethodCode":"\r\n\tpublic override bool OnTryToOpen(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseLockedEntity\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (HasLockPermission(player))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn !IsLocked();\r\n\t}\r\n"},{"Name":"OnElevatorCall","Parameters":"(Elevator,Elevator)","ClassName":"Elevator","MethodCode":"\r\n\tpublic virtual void CallElevator()\r\n\t{\r\n\t\tEntityLinkBroadcast(delegate(Elevator elevatorEnt)\r\n\t\t{\r\n\t\t\tif (elevatorEnt.IsTop && Interface.CallHook(\"OnElevatorCall\", this, elevatorEnt) == null)\r\n\t\t\t{\r\n\t\t\t\televatorEnt.RequestMoveLiftTo(Floor, out var _, this);\r\n\t\t\t}\r\n\t\t}, (ConstructionSocket socket) => socket.socketType == ConstructionSocket.Type.Elevator);\r\n\t}\r\n"},{"Name":"OnBookmarkControlEnd","Parameters":"(ComputerStation,BasePlayer,BaseEntity)","ClassName":"ComputerStation","MethodCode":"\r\n\tpublic void StopControl(BasePlayer ply)\r\n\t{\r\n\t\tBaseEntity baseEntity = currentlyControllingEnt.Get(serverside: true);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnBookmarkControlEnd\", this, ply, baseEntity) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbaseEntity.GetComponent<IRemoteControllable>().StopControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t}\r\n\t\tif ((bool)ply)\r\n\t\t{\r\n\t\t\tply.net.SwitchSecondaryGroup(null);\r\n\t\t}\r\n\t\tcurrentlyControllingEnt.uid = default(NetworkableId);\r\n\t\tcurrentPlayerID = 0uL;\r\n\t\tSetFlag(Flags.Reserved2, b: false, recursive: false, networkupdate: false);\r\n\t\tSendNetworkUpdate();\r\n\t\tSendControlBookmarks(ply);\r\n\t\tCancelInvoke(ControlCheck);\r\n\t\tCancelInvoke(CheckCCTVAchievement);\r\n\t\tInterface.CallHook(\"OnBookmarkControlEnded\", this, ply, baseEntity);\r\n\t}\r\n"},{"Name":"CanHideStash","Parameters":"(BasePlayer,StashContainer)","ClassName":"StashContainer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RPC_HideStash(RPCMessage rpc)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanHideStash\", rpc.player, this) == null)\r\n\t\t{\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnStashHidden(rpc.player, this);\r\n\t\t\tSetHidden(isHidden: true);\r\n\t\t\tInterface.CallHook(\"OnStashHidden\", this, rpc.player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerDismountFailed","Parameters":"(BasePlayer,BaseMountable)","ClassName":"BaseMountable","MethodCode":"\r\n\t[RPC_Server]\r\n\tpublic void RPC_WantsDismount(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!HasValidDismountPosition(player))\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerDismountFailed\", player, this);\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnPlayerWantsDismount\", player, this) == null && (!(player != null) || !player.IsRestrained))\r\n\t\t{\r\n\t\t\tAttemptDismount(player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemPickup","Parameters":"(Item,BasePlayer)","ClassName":"WorldItem","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void Pickup(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && this.item != null && allowPickup && Interface.CallHook(\"OnItemPickup\", this.item, msg.player) == null && CanOpenInSafeZone(msg.player))\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"PickupSound\"));\r\n\t\t\tItem item = this.item;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnItemPickup(msg.player, this);\r\n\t\t\tRemoveItem();\r\n\t\t\tmsg.player.GiveItem(item, GiveItemReason.PickedUp);\r\n\t\t\tmsg.player.SignalBroadcast(Signal.Gesture, \"pickup_item\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretDeauthorize","Parameters":"(AutoTurret,BasePlayer)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tprivate void RemoveSelfAuthorize(RPCMessage rpc)\r\n\t{\r\n\t\tRPCMessage rpc2 = rpc;\r\n\t\tif (!booting && !IsOnline() && IsAuthed(rpc2.player) && Interface.CallHook(\"OnTurretDeauthorize\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tauthorizedPlayers.RemoveWhere((PlayerNameID x) => x.userid == (ulong)rpc2.player.userID);\r\n\t\t\tauthDirty = true;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityAuthChanged(this, rpc2.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), \"removed\", rpc2.player.userID);\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemDespawn","Parameters":"(Item)","ClassName":"DroppedItem","MethodCode":"\r\n\tpublic void IdleDestroy()\r\n\t{\r\n\t\tInterface.CallHook(\"OnItemDespawn\", item);\r\n\t\tFacepunch.Rust.Analytics.Azure.OnItemDespawn(this, item, (int)DropReason, DroppedBy);\r\n\t\tDestroyItem();\r\n\t\tKill();\r\n\t}\r\n"},{"Name":"OnNpcTarget","Parameters":"(HumanNPC,BaseEntity)","ClassName":"HumanNPC","MethodCode":"\r\n\tpublic BaseEntity GetBestTarget()\r\n\t{\r\n\t\tBaseEntity result = null;\r\n\t\tfloat num = -1f;\r\n\t\tforeach (BaseEntity player in Brain.Senses.Players)\r\n\t\t{\r\n\t\t\tif (!(player == null) && !(player.Health() <= 0f) && Interface.CallHook(\"OnNpcTarget\", this, player) == null)\r\n\t\t\t{\r\n\t\t\t\tfloat value = Vector3.Distance(player.transform.position, base.transform.position);\r\n\t\t\t\tfloat num2 = 1f - Mathf.InverseLerp(1f, Brain.SenseRange, value);\r\n\t\t\t\tfloat value2 = Vector3.Dot((player.transform.position - base.eyes.position).normalized, base.eyes.BodyForward());\r\n\t\t\t\tnum2 += Mathf.InverseLerp(Brain.VisionCone, 1f, value2) / 2f;\r\n\t\t\t\tnum2 += (Brain.Senses.Memory.IsLOS(player) ? 2f : 0f);\r\n\t\t\t\tif (num2 > num)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = player;\r\n\t\t\t\t\tnum = num2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnSprayCreate","Parameters":"(SprayCan,UnityEngine.Vector3,UnityEngine.Quaternion)","ClassName":"SprayCan","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\tprivate void CreateSpray(RPCMessage msg)\r\n\t{\r\n\t\tif (IsBusy())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ChangeSprayColour\"), -1);\r\n\t\tSetFlag(Flags.Busy, b: true);\r\n\t\tInvoke(ClearBusy, SprayCooldown);\r\n\t\tVector3 vector = msg.read.Vector3();\r\n\t\tVector3 vector2 = msg.read.Vector3();\r\n\t\tVector3 point = msg.read.Vector3();\r\n\t\tint num = msg.read.Int32();\r\n\t\tif (!(Vector3.Distance(vector, base.transform.position) > 4.5f))\r\n\t\t{\r\n\t\t\tQuaternion quaternion = Quaternion.LookRotation((new Plane(vector2, vector).ClosestPointOnPlane(point) - vector).normalized, vector2);\r\n\t\t\tquaternion *= Quaternion.Euler(0f, 0f, 90f);\r\n\t\t\tbool flag = false;\r\n\t\t\tif (msg.player.IsDeveloper)\r\n\t\t\t{\r\n\t\t\t\tflag = true;\r\n\t\t\t}\r\n\t\t\tif (num != 0 && !flag && !msg.player.blueprints.CheckSkinOwnership(num, msg.player.userID))\r\n\t\t\t{\r\n\t\t\t\tDebug.Log($\"SprayCan.ChangeItemSkin player does not have item :{num}:\");\r\n\t\t\t}\r\n\t\t\telse if (Interface.CallHook(\"OnSprayCreate\", this, vector, quaternion) == null)\r\n\t\t\t{\r\n\t\t\t\tulong num2 = ItemDefinition.FindSkin(SprayDecalItem.itemid, num);\r\n\t\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(SprayDecalEntityRef.resourcePath, vector, quaternion);\r\n\t\t\t\tbaseEntity.skinID = num2;\r\n\t\t\t\tbaseEntity.OnDeployed(null, GetOwnerPlayer(), GetItem());\r\n\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t\tCheckAchievementPosition(vector);\r\n\t\t\t\tLoseCondition(ConditionLossPerSpray);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUpdateSign","Parameters":"(BasePlayer,Signage)","ClassName":"Signage","MethodCode":"\r\n\tpublic virtual bool CanUpdateSign(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUpdateSign\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player.IsAdmin || player.IsDeveloper)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!player.CanBuild())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsLocked())\r\n\t\t{\r\n\t\t\treturn (ulong)player.userID == base.OwnerID;\r\n\t\t}\r\n\t\tif (!HeldEntityCheck(player))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnPlayerRespawn","Parameters":"(BasePlayer,SleepingBag)","ClassName":"SleepingBag","MethodCode":"\r\n\tpublic static bool SpawnPlayer(BasePlayer player, NetworkableId sleepingBag)\r\n\t{\r\n\t\tBasePlayer player2 = player;\r\n\t\tSleepingBag[] array = FindForPlayer(player2.userID, ignoreTimers: true);\r\n\t\tSleepingBag sleepingBag2 = array.FirstOrDefault((SleepingBag x) => x.ValidForPlayer(player2.userID, ignoreTimers: false) && x.net.ID == sleepingBag && x.unlockTime < UnityEngine.Time.realtimeSinceStartup);\r\n\t\tif (sleepingBag2 == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerRespawn\", player, sleepingBag2);\r\n\t\tif (obj is SleepingBag)\r\n\t\t{\r\n\t\t\tsleepingBag2 = (SleepingBag)obj;\r\n\t\t}\r\n\t\tif (sleepingBag2.GetRespawnState(player2.userID) != RespawnInformation.SpawnOptions.RespawnState.OK)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tsleepingBag2.GetSpawnPos(out var pos, out var rot);\r\n\t\tplayer2.RespawnAt(pos, rot, sleepingBag2);\r\n\t\tsleepingBag2.PostPlayerSpawn(player2);\r\n\t\tSleepingBag[] array2 = array;\r\n\t\tfor (int i = 0; i < array2.Length; i++)\r\n\t\t{\r\n\t\t\tSetBagTimer(array2[i], pos, SleepingBagResetReason.Respawned, player2);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanUnlockTechTreeNodePath","Parameters":"(BasePlayer,TechTreeData.NodeInstance,TechTreeData)","ClassName":"TechTreeData","MethodCode":"\r\n\tpublic bool PlayerHasPathForUnlock(BasePlayer player, NodeInstance node)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUnlockTechTreeNodePath\", player, node, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tNodeInstance entryNode = GetEntryNode();\r\n\t\tif (entryNode == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn CheckChainRecursive(player, entryNode, node);\r\n\t}\r\n"},{"Name":"OnRackedWeaponSwapped","Parameters":"(Item,WeaponRackSlot,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate void SwapPlayerWeapon(BasePlayer player, int gridCellIndex, int takeFromBeltIndex, int rotation)\r\n\t{\r\n\t\tItem item = player.GetHeldEntity()?.GetItem();\r\n\t\tif (item == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWorldModelRackMountConfig forItemDef = WorldModelRackMountConfig.GetForItemDef(item.info);\r\n\t\tif (forItemDef == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(gridCellIndex);\r\n\t\tif (weaponAtIndex != null)\r\n\t\t{\r\n\t\t\tint mountSlotIndex = gridCellIndex;\r\n\t\t\tif (CustomRackType != 0)\r\n\t\t\t{\r\n\t\t\t\tgridCellIndex = 0;\r\n\t\t\t}\r\n\t\t\tint bestPlacementCellIndex = GetBestPlacementCellIndex(GetXYForIndex(gridCellIndex), forItemDef, rotation, weaponAtIndex);\r\n\t\t\tif (bestPlacementCellIndex != -1 && Interface.CallHook(\"OnRackedWeaponSwap\", item, weaponAtIndex, player, this) == null)\r\n\t\t\t{\r\n\t\t\t\titem.RemoveFromContainer();\r\n\t\t\t\tGivePlayerWeapon(player, mountSlotIndex, takeFromBeltIndex, tryHold: false);\r\n\t\t\t\tMountWeapon(item, player, bestPlacementCellIndex, rotation, sendUpdate: false);\r\n\t\t\t\tItemManager.DoRemoves();\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tInterface.CallHook(\"OnRackedWeaponSwapped\", item, weaponAtIndex, player, this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityReskinned","Parameters":"(BaseEntity,ItemSkinDirectory.Skin,BasePlayer)","ClassName":"SprayCan","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server.CallsPerSecond(2uL)]\r\n\tprivate void ChangeItemSkin(RPCMessage msg)\r\n\t{\r\n\t\tNetworkableId uid = msg.read.EntityID();\r\n\t\tint targetSkin = msg.read.Int32();\r\n\t\tBaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(uid);\r\n\t\tif (!ValidateEntityAndSkin(msg.player, baseNetworkable, targetSkin))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (baseNetworkable != null)\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity2 = baseNetworkable as BaseEntity;\r\n\t\t\tif ((object)baseEntity2 != null)\r\n\t\t\t{\r\n\t\t\t\tif (!GetItemDefinitionForEntity(baseEntity2, out var def, useRedirect: false))\r\n\t\t\t\t{\r\n\t\t\t\t\tFailResponse(SprayFailReason.InvalidItem);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tItemDefinition itemDefinition = null;\r\n\t\t\t\tulong num = ItemDefinition.FindSkin((def.isRedirectOf != null) ? def.isRedirectOf.itemid : def.itemid, targetSkin);\r\n\t\t\t\tItemSkinDirectory.Skin skin = def.skins.FirstOrDefault((ItemSkinDirectory.Skin x) => x.id == targetSkin);\r\n\t\t\t\tif (Interface.CallHook(\"OnEntityReskin\", baseEntity2, skin, msg.player) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (skin.invItem != null && skin.invItem is ItemSkin itemSkin)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (itemSkin.Redirect != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemDefinition = itemSkin.Redirect;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ((bool)def && def.isRedirectOf != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemDefinition = def.isRedirectOf;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (def.isRedirectOf != null || ((bool)def && def.isRedirectOf != null))\r\n\t\t\t\t{\r\n\t\t\t\t\titemDefinition = def.isRedirectOf;\r\n\t\t\t\t}\r\n\t\t\t\tif (itemDefinition == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseEntity2.skinID = num;\r\n\t\t\t\t\tbaseEntity2.SendNetworkUpdate();\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Server.SkinUsed(def.shortname, targetSkin);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!CanEntityBeRespawned(baseEntity2, out var reason2))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFailResponse(reason2);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!GetEntityPrefabPath(itemDefinition, out var resourcePath))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebug.LogWarning(\"Cannot find resource path of redirect entity to spawn! \" + itemDefinition.gameObject.name);\r\n\t\t\t\t\t\tFailResponse(SprayFailReason.InvalidItem);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tVector3 localPosition = baseEntity2.transform.localPosition;\r\n\t\t\t\t\tQuaternion localRotation = baseEntity2.transform.localRotation;\r\n\t\t\t\t\tBaseEntity baseEntity3 = baseEntity2.GetParentEntity();\r\n\t\t\t\t\tfloat health = baseEntity2.Health();\r\n\t\t\t\t\tEntityRef[] slots = baseEntity2.GetSlots();\r\n\t\t\t\t\tulong ownerID = baseEntity2.OwnerID;\r\n\t\t\t\t\tfloat lastAttackedTime = ((baseEntity2 is BaseCombatEntity baseCombatEntity) ? baseCombatEntity.lastAttackedTime : 0f);\r\n\t\t\t\t\tHashSet<PlayerNameID> hashSet = null;\r\n\t\t\t\t\tif (baseEntity2 is BuildingPrivlidge buildingPrivlidge)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thashSet = new HashSet<PlayerNameID>(buildingPrivlidge.authorizedPlayers);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbool flag = baseEntity2 is Door || baseEntity2 is BuildingPrivlidge;\r\n\t\t\t\t\tDictionary<ContainerSet, List<Item>> dictionary2 = new Dictionary<ContainerSet, List<Item>>();\r\n\t\t\t\t\tSaveEntityStorage(baseEntity2, dictionary2, 0);\r\n\t\t\t\t\tList<ChildPreserveInfo> obj = Facepunch.Pool.Get<List<ChildPreserveInfo>>();\r\n\t\t\t\t\tif (flag)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (BaseEntity child in baseEntity2.children)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tobj.Add(new ChildPreserveInfo\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tTargetEntity = child,\r\n\t\t\t\t\t\t\t\tTargetBone = child.parentBone,\r\n\t\t\t\t\t\t\t\tLocalPosition = child.transform.localPosition,\r\n\t\t\t\t\t\t\t\tLocalRotation = child.transform.localRotation\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tforeach (ChildPreserveInfo item in obj)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem.TargetEntity.SetParent(null, worldPositionStays: true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < baseEntity2.children.Count; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tSaveEntityStorage(baseEntity2.children[i], dictionary2, -1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbaseEntity2.Kill();\r\n\t\t\t\t\tbaseEntity2 = GameManager.server.CreateEntity(resourcePath, (baseEntity3 != null) ? baseEntity3.transform.TransformPoint(localPosition) : localPosition, (baseEntity3 != null) ? (baseEntity3.transform.rotation * localRotation) : localRotation);\r\n\t\t\t\t\tbaseEntity2.SetParent(baseEntity3);\r\n\t\t\t\t\tbaseEntity2.transform.localPosition = localPosition;\r\n\t\t\t\t\tbaseEntity2.transform.localRotation = localRotation;\r\n\t\t\t\t\tbaseEntity2.OwnerID = ownerID;\r\n\t\t\t\t\tif (GetItemDefinitionForEntity(baseEntity2, out var def2, useRedirect: false) && def2.isRedirectOf != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseEntity2.skinID = 0uL;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseEntity2.skinID = num;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (baseEntity2 is DecayEntity decayEntity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdecayEntity.AttachToBuilding(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbaseEntity2.Spawn();\r\n\t\t\t\t\tif (baseEntity2 is BaseCombatEntity baseCombatEntity2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseCombatEntity2.SetHealth(health);\r\n\t\t\t\t\t\tbaseCombatEntity2.lastAttackedTime = lastAttackedTime;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (baseEntity2 is BuildingPrivlidge buildingPrivlidge2 && hashSet != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuildingPrivlidge2.authorizedPlayers = hashSet;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (dictionary2.Count > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tRestoreEntityStorage(baseEntity2, 0, dictionary2);\r\n\t\t\t\t\t\tif (!flag)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor (int j = 0; j < baseEntity2.children.Count; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tRestoreEntityStorage(baseEntity2.children[j], -1, dictionary2);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tforeach (KeyValuePair<ContainerSet, List<Item>> item2 in dictionary2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tforeach (Item item3 in item2.Value)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDebug.Log($\"Deleting {item3} as it has no new container\");\r\n\t\t\t\t\t\t\t\titem3.Remove();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Server.SkinUsed(def.shortname, targetSkin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flag)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (ChildPreserveInfo item4 in obj)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem4.TargetEntity.SetParent(baseEntity2, item4.TargetBone, worldPositionStays: true);\r\n\t\t\t\t\t\t\titem4.TargetEntity.transform.localPosition = item4.LocalPosition;\r\n\t\t\t\t\t\t\titem4.TargetEntity.transform.localRotation = item4.LocalRotation;\r\n\t\t\t\t\t\t\titem4.TargetEntity.SendNetworkUpdate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbaseEntity2.SetSlots(slots);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tInterface.CallHook(\"OnEntityReskinned\", baseEntity2, skin, msg.player);\r\n\t\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t\t\t}\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ReskinResult\"), 1, baseEntity2.net.ID);\r\n\t\t\t}\r\n\t\t}\r\n\t\tLoseCondition(ConditionLossPerReskin);\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ChangeSprayColour\"), -1);\r\n\t\tSetFlag(Flags.Busy, b: true);\r\n\t\tInvoke(ClearBusy, SprayCooldown);\r\n\t\tvoid FailResponse(SprayFailReason reason)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ReskinResult\"), 0, (int)reason);\r\n\t\t}\r\n\t\tstatic void RestoreEntityStorage(BaseEntity baseEntity, int index, Dictionary<ContainerSet, List<Item>> copy)\r\n\t\t{\r\n\t\t\tif (baseEntity is IItemContainerEntity itemContainerEntity)\r\n\t\t\t{\r\n\t\t\t\tContainerSet containerSet = default(ContainerSet);\r\n\t\t\t\tcontainerSet.ContainerIndex = index;\r\n\t\t\t\tcontainerSet.PrefabId = ((index != 0) ? baseEntity.prefabID : 0u);\r\n\t\t\t\tContainerSet key = containerSet;\r\n\t\t\t\tif (copy.ContainsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (Item item5 in copy[key])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem5.MoveToContainer(itemContainerEntity.inventory);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcopy.Remove(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstatic void SaveEntityStorage(BaseEntity baseEntity, Dictionary<ContainerSet, List<Item>> dictionary, int index)\r\n\t\t{\r\n\t\t\tif (baseEntity is IItemContainerEntity itemContainerEntity2)\r\n\t\t\t{\r\n\t\t\t\tContainerSet containerSet2 = default(ContainerSet);\r\n\t\t\t\tcontainerSet2.ContainerIndex = index;\r\n\t\t\t\tcontainerSet2.PrefabId = ((index != 0) ? baseEntity.prefabID : 0u);\r\n\t\t\t\tContainerSet key2 = containerSet2;\r\n\t\t\t\tif (!dictionary.ContainsKey(key2))\r\n\t\t\t\t{\r\n\t\t\t\t\tdictionary.Add(key2, new List<Item>());\r\n\t\t\t\t\tforeach (Item item6 in itemContainerEntity2.inventory.itemList)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdictionary[key2].Add(item6);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach (Item item7 in dictionary[key2])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem7.RemoveFromContainer();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDebug.Log(\"Multiple containers with the same prefab id being added during vehicle reskin\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerDig","Parameters":"(BasePlayer,BaseDiggableEntity)","ClassName":"BaseDiggableEntity","MethodCode":"\r\n\tpublic virtual void Dig(BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerDig\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (digsRemaining == RequiredDigCount)\r\n\t\t{\r\n\t\t\tOnFirstDig(player);\r\n\t\t}\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"RPC_OnDig\"), RequiredDigCount - digsRemaining, RequiredDigCount);\r\n\t\tdigsRemaining--;\r\n\t\tbase.health = digsRemaining;\r\n\t\tSendNetworkUpdate();\r\n\t\tOnSingleDig(player);\r\n\t\tif (digsRemaining <= 0)\r\n\t\t{\r\n\t\t\tOnFullyDug(player);\r\n\t\t\tif (DestroyOnDug)\r\n\t\t\t{\r\n\t\t\t\tKill();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerAddModifiers","Parameters":"(BasePlayer,Item,ItemModConsumable)","ClassName":"ItemModConsume","MethodCode":"\r\n\tpublic override void DoAction(Item item, BasePlayer player)\r\n\t{\r\n\t\tif (item.amount < 1)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tGameObjectRef gameObjectRef = GetConsumeEffect();\r\n\t\tif (gameObjectRef.isValid)\r\n\t\t{\r\n\t\t\tVector3 posLocal = (player.IsDucked() ? new Vector3(0f, 1f, 0f) : new Vector3(0f, 2f, 0f));\r\n\t\t\tEffect.server.Run(gameObjectRef.resourcePath, player, 0u, posLocal, Vector3.zero);\r\n\t\t}\r\n\t\tplayer.metabolism.MarkConsumption();\r\n\t\tItemModConsumable consumable = GetConsumable();\r\n\t\tif (!string.IsNullOrEmpty(consumable.achievementWhenEaten))\r\n\t\t{\r\n\t\t\tplayer.GiveAchievement(consumable.achievementWhenEaten);\r\n\t\t}\r\n\t\tFacepunch.Rust.Analytics.Azure.OnConsumableUsed(player, item);\r\n\t\tfloat num = Mathf.Max(consumable.amountToConsume, 1);\r\n\t\tfloat num2 = Mathf.Min(item.amount, num);\r\n\t\tfloat num3 = num2 / num;\r\n\t\tfloat num4 = item.conditionNormalized;\r\n\t\tif (consumable.conditionFractionToLose > 0f)\r\n\t\t{\r\n\t\t\tnum4 = consumable.conditionFractionToLose;\r\n\t\t}\r\n\t\tforeach (ItemModConsumable.ConsumableEffect effect in consumable.effects)\r\n\t\t{\r\n\t\t\tif (Mathf.Clamp01(player.healthFraction + player.metabolism.pending_health.Fraction()) > effect.onlyIfHealthLessThan)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (effect.type == MetabolismAttribute.Type.Health)\r\n\t\t\t{\r\n\t\t\t\tif (effect.amount < 0f)\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.OnAttacked(new HitInfo(player, player, DamageType.Generic, (0f - effect.amount) * num3 * num4, player.transform.position + player.transform.forward * 1f));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.health += effect.amount * num3 * num4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tplayer.metabolism.ApplyChange(effect.type, effect.amount * num3 * num4, effect.time * num3 * num4);\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayer.ProcessMissionEvent(BaseMission.MissionEventType.CONSUME, item.info.itemid, 1f);\r\n\t\tif (player.modifiers != null && Interface.CallHook(\"OnPlayerAddModifiers\", player, item, consumable) == null)\r\n\t\t{\r\n\t\t\tplayer.modifiers.Add(consumable.modifiers);\r\n\t\t}\r\n\t\tif (product != null)\r\n\t\t{\r\n\t\t\tItemAmountRandom[] array = product;\r\n\t\t\tforeach (ItemAmountRandom itemAmountRandom in array)\r\n\t\t\t{\r\n\t\t\t\tint num5 = Mathf.RoundToInt((float)itemAmountRandom.RandomAmount() * num4);\r\n\t\t\t\tif (num5 > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tItem item2 = ItemManager.Create(itemAmountRandom.itemDef, num5, 0uL);\r\n\t\t\t\t\tplayer.GiveItem(item2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (string.IsNullOrEmpty(eatGesture))\r\n\t\t{\r\n\t\t\tplayer.SignalBroadcast(BaseEntity.Signal.Gesture, eatGesture);\r\n\t\t}\r\n\t\tFacepunch.Rust.Analytics.Server.Consume(base.gameObject.name);\r\n\t\tif (consumable.conditionFractionToLose > 0f)\r\n\t\t{\r\n\t\t\titem.LoseCondition(consumable.conditionFractionToLose * item.maxCondition);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\titem.UseItem((int)num2);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnStructureUpgraded","Parameters":"(BuildingBlock,BasePlayer,BuildingGrade.Enum,ulong)","ClassName":"BuildingBlock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\t[RPC_Server]\r\n\tpublic void DoUpgradeToGrade(RPCMessage msg)\r\n\t{\r\n\t\tif (!msg.player.CanInteract())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConstructionGrade constructionGrade = blockDefinition.GetGrade((BuildingGrade.Enum)msg.read.Int32(), msg.read.UInt64());\r\n\t\tif (constructionGrade == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CanChangeToGrade(constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin, msg.player))\r\n\t\t{\r\n\t\t\tif (!(DeployVolume.LastDeployHit != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tBaseEntity baseEntity = GameObjectEx.ToBaseEntity(DeployVolume.LastDeployHit);\r\n\t\t\tif (baseEntity != null && baseEntity is BasePlayer basePlayer)\r\n\t\t\t{\r\n\t\t\t\tulong currentTeam = msg.player.currentTeam;\r\n\t\t\t\tif (currentTeam != 0L && currentTeam == basePlayer.currentTeam)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring playerNameStreamSafe = NameHelper.GetPlayerNameStreamSafe(msg.player, basePlayer);\r\n\t\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, ConstructionErrors.BlockedByPlayer, false, playerNameStreamSafe);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnStructureUpgrade\", this, msg.player, constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin) != null || !CanAffordUpgrade(constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin, msg.player))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (base.SecondsSinceAttacked < 30f)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, ConstructionErrors.CantUpgradeRecentlyDamaged, false, (30f - base.SecondsSinceAttacked).ToString(\"N0\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!constructionGrade.gradeBase.alwaysUnlock && constructionGrade.gradeBase.skin != 0L && !msg.player.blueprints.steamInventory.HasItem((int)constructionGrade.gradeBase.skin))\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Error, ConstructionErrors.SkinNotOwned, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tPayForUpgrade(constructionGrade, msg.player);\r\n\t\t\tif (msg.player != null)\r\n\t\t\t{\r\n\t\t\t\tplayerCustomColourToApply = GetShippingContainerBlockColourForPlayer(msg.player);\r\n\t\t\t}\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"DoUpgradeEffect\"), (int)constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin);\r\n\t\t\tBuildingGrade.Enum @enum = grade;\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnBuildingBlockUpgraded(msg.player, this, constructionGrade.gradeBase.type, playerCustomColourToApply, constructionGrade.gradeBase.skin);\r\n\t\t\tOnSkinChanged(skinID, constructionGrade.gradeBase.skin);\r\n\t\t\tChangeGrade(constructionGrade.gradeBase.type, playEffect: true);\r\n\t\t\tif (msg.player != null && @enum != constructionGrade.gradeBase.type)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ProcessMissionEvent(BaseMission.MissionEventType.UPGRADE_BUILDING_GRADE, new BaseMission.MissionEventPayload\r\n\t\t\t\t{\r\n\t\t\t\t\tNetworkIdentifier = net.ID,\r\n\t\t\t\t\tIntIdentifier = (int)constructionGrade.gradeBase.type\r\n\t\t\t\t}, 1f);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnStructureUpgraded\", this, msg.player, constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanSeeStash","Parameters":"(BasePlayer,StashContainer)","ClassName":"BasePlayer","MethodCode":"\r\n\tprivate void CheckStashRevealInvoke()\r\n\t{\r\n\t\tfor (int i = 0; i < nearbyStashes.Count; i++)\r\n\t\t{\r\n\t\t\tNearbyStash nearbyStash = nearbyStashes[i];\r\n\t\t\tif (nearbyStash.Entity == null || nearbyStash.Entity.IsDestroyed)\r\n\t\t\t{\r\n\t\t\t\tnearbyStashes.RemoveAt(i);\r\n\t\t\t}\r\n\t\t\telse if (nearbyStash.Entity.IsHidden() && nearbyStash.Entity.PlayerInRange(this))\r\n\t\t\t{\r\n\t\t\t\tnearbyStash.LookingAtTime += StashContainer.PlayerDetectionTickRate;\r\n\t\t\t\tif (nearbyStash.LookingAtTime >= nearbyStash.Entity.uncoverTime)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (Interface.CallHook(\"CanSeeStash\", this, nearbyStash.Entity) != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnearbyStash.Entity.SetHidden(isHidden: false);\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnStashRevealed(this, nearbyStash.Entity);\r\n\t\t\t\t\tInterface.CallHook(\"OnStashExposed\", nearbyStash.Entity, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnearbyStash.LookingAtTime = 0f;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDeleteVendingOffer","Parameters":"(VendingMachine,int)","ClassName":"VendingMachine","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_DeleteSellOrder(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (CanPlayerAdmin(player))\r\n\t\t{\r\n\t\t\tint num = msg.read.Int32();\r\n\t\t\tInterface.CallHook(\"OnDeleteVendingOffer\", this, num);\r\n\t\t\tif (num >= 0 && num < sellOrders.sellOrders.Count)\r\n\t\t\t{\r\n\t\t\t\tProtoBuf.VendingMachine.SellOrder sellOrder = sellOrders.sellOrders[num];\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnVendingMachineOrderChanged(msg.player, this, sellOrder.itemToSellID, sellOrder.itemToSellAmount, sellOrder.itemToSellIsBP, sellOrder.currencyID, sellOrder.currencyAmountPerItem, sellOrder.currencyIsBP, added: false);\r\n\t\t\t\tsellOrders.sellOrders.RemoveAt(num);\r\n\t\t\t}\r\n\t\t\tRefreshSellOrderStockLevel();\r\n\t\t\tUpdateMapMarker();\r\n\t\t\tSendSellOrders(player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnIORefCleared","Parameters":"(IOEntity.IORef,IOEntity)","ClassName":"IOEntity","MethodCode":"\r\n\t\tpublic void Clear()\r\n\t\t{\r\n\t\t\tIOEntity obj = ioEnt;\r\n\t\t\tioEnt = null;\r\n\t\t\tentityRef.Set(null);\r\n\t\t\tInterface.CallHook(\"OnIORefCleared\", this, obj);\r\n\t\t}\r\n"},{"Name":"OnPlayerRespawn","Parameters":"(BasePlayer,BasePlayer.SpawnPoint)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void Respawn()\r\n\t{\r\n\t\tSpawnPoint spawnPoint = ServerMgr.FindSpawnPoint(this);\r\n\t\tif (ConVar.Server.respawnAtDeathPosition && ServerCurrentDeathNote != null)\r\n\t\t{\r\n\t\t\tspawnPoint.pos = ServerCurrentDeathNote.worldPosition;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerRespawn\", this, spawnPoint);\r\n\t\tif (obj is SpawnPoint)\r\n\t\t{\r\n\t\t\tspawnPoint = (SpawnPoint)obj;\r\n\t\t}\r\n\t\tRespawnAt(spawnPoint.pos, spawnPoint.rot);\r\n\t}\r\n"},{"Name":"OnWeaponReload","Parameters":"(BaseProjectile,BasePlayer)","ClassName":"BaseProjectile","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsActiveItem]\r\n\tprivate void StartReload(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!VerifyClientRPC(player))\r\n\t\t{\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\treloadStarted = false;\r\n\t\t\treloadFinished = false;\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnWeaponReload\", this, player) == null)\r\n\t\t{\r\n\t\t\treloadFinished = false;\r\n\t\t\treloadStarted = true;\r\n\t\t\tfractionalInsertCounter = 0;\r\n\t\t\tif (CanRefundAmmo)\r\n\t\t\t{\r\n\t\t\t\tSwitchAmmoTypesIfNeeded(player.inventory);\r\n\t\t\t}\r\n\t\t\tOnReloadStarted();\r\n\t\t\tStartReloadCooldown(GetReloadDuration());\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCrateHackEnd","Parameters":"(HackableLockedCrate)","ClassName":"HackableLockedCrate","MethodCode":"\r\n\tpublic void HackProgress()\r\n\t{\r\n\t\thackSeconds += 1f;\r\n\t\tif (hackSeconds > requiredHackSeconds)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnCrateHackEnd\", this);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnLockedCrateFinished(originalHackerPlayerId, this);\r\n\t\t\tif (originalHackerPlayer != null && originalHackerPlayer.serverClan != null)\r\n\t\t\t{\r\n\t\t\t\toriginalHackerPlayer.AddClanScore(ClanScoreEventType.HackedCrate);\r\n\t\t\t}\r\n\t\t\tRefreshDecay();\r\n\t\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\t\tisLootable = true;\r\n\t\t\tCancelInvoke(HackProgress);\r\n\t\t}\r\n\t\tClientRPC(RpcTarget.NetworkGroup(\"UpdateHackProgress\"), (int)hackSeconds, (int)requiredHackSeconds);\r\n\t}\r\n"},{"Name":"OnMeleeThrown","Parameters":"(BasePlayer,Item)","ClassName":"BaseMelee","MethodCode":"\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server]\r\n\tprivate void CLProject(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!VerifyClientAttack(player))\r\n\t\t{\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (player == null || player.IsHeadUnderwater())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!canThrowAsProjectile)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Not throwable (\" + base.ShortPrefabName + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"not_throwable\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tItem item = GetItem();\r\n\t\t\tif (item == null)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Item not found (\" + base.ShortPrefabName + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"item_missing\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tItemModProjectile component = item.info.GetComponent<ItemModProjectile>();\r\n\t\t\tif (component == null)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Item mod not found (\" + base.ShortPrefabName + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"mod_missing\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tProjectileShoot projectileShoot = ProjectileShoot.Deserialize(msg.read);\r\n\t\t\tif (projectileShoot.projectiles.Count != 1)\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Projectile count mismatch (\" + base.ShortPrefabName + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"count_mismatch\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tplayer.CleanupExpiredProjectiles();\r\n\t\t\tGuid projectileGroupId = Guid.NewGuid();\r\n\t\t\tforeach (ProjectileShoot.Projectile projectile in projectileShoot.projectiles)\r\n\t\t\t{\r\n\t\t\t\tif (player.HasFiredProjectile(projectile.projectileID))\r\n\t\t\t\t{\r\n\t\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Duplicate ID (\" + projectile.projectileID + \")\");\r\n\t\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"duplicate_id\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tVector3 positionOffset = Vector3.zero;\r\n\t\t\t\tif (ConVar.AntiHack.projectile_positionoffset && (player.isMounted || player.HasParent()))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!ValidateEyePos(player, projectile.startPos, checkLineOfSight: false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tVector3 position = player.eyes.position;\r\n\t\t\t\t\tpositionOffset = position - projectile.startPos;\r\n\t\t\t\t\tprojectile.startPos = position;\r\n\t\t\t\t}\r\n\t\t\t\telse if (!ValidateEyePos(player, projectile.startPos))\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tplayer.NoteFiredProjectile(projectile.projectileID, projectile.startPos, projectile.startVel, this, item.info, projectileGroupId, positionOffset, item);\r\n\t\t\t\tEffect effect = new Effect();\r\n\t\t\t\teffect.Init(Effect.Type.Projectile, projectile.startPos, projectile.startVel, msg.connection);\r\n\t\t\t\teffect.scale = 1f;\r\n\t\t\t\teffect.pooledString = component.projectileObject.resourcePath;\r\n\t\t\t\teffect.number = projectile.seed;\r\n\t\t\t\tEffectNetwork.Send(effect);\r\n\t\t\t}\r\n\t\t\tprojectileShoot?.Dispose();\r\n\t\t\titem.SetParent(null);\r\n\t\t\tInterface.CallHook(\"OnMeleeThrown\", player, item);\r\n\t\t\tif (!canAiHearIt)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tfloat num = 0f;\r\n\t\t\tif (component.projectileObject == null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tGameObject gameObject = component.projectileObject.Get();\r\n\t\t\tif (!(gameObject != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tProjectile component2 = gameObject.GetComponent<Projectile>();\r\n\t\t\tif (!(component2 != null))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tforeach (DamageTypeEntry damageType in component2.damageTypes)\r\n\t\t\t{\r\n\t\t\t\tnum += damageType.amount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityDistanceCheck","Parameters":"(BaseEntity,BasePlayer,uint,string,float,bool)","ClassName":"BaseEntity","MethodCode":"\r\n\t\t\tpublic static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance, bool checkParent = false)\r\n\t\t\t{\r\n\t\t\t\tif (ent == null || player == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnEntityDistanceCheck\", ent, player, id, debugName, maximumDistance, checkParent);\r\n\t\t\t\tif (obj is bool)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (bool)obj;\r\n\t\t\t\t}\r\n\t\t\t\tbool flag = ent.Distance(player.eyes.position) <= maximumDistance;\r\n\t\t\t\tif (checkParent && !flag)\r\n\t\t\t\t{\r\n\t\t\t\t\tBaseEntity parentEntity = ent.GetParentEntity();\r\n\t\t\t\t\tflag = parentEntity != null && parentEntity.Distance(player.eyes.position) <= maximumDistance;\r\n\t\t\t\t}\r\n\t\t\t\treturn flag;\r\n\t\t\t}\r\n"},{"Name":"OnMapMarkerAdded","Parameters":"(BasePlayer,ProtoBuf.MapNote)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.FromOwner]\r\n\t[RPC_Server.CallsPerSecond(8uL)]\r\n\tpublic void Server_AddMarker(RPCMessage msg)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnMapMarkerAdd\", this, MapNote.Deserialize(msg.read)) == null)\r\n\t\t{\r\n\t\t\tmsg.read.Position = 13L;\r\n\t\t\tif (State.pointsOfInterest == null)\r\n\t\t\t{\r\n\t\t\t\tState.pointsOfInterest = Facepunch.Pool.Get<List<MapNote>>();\r\n\t\t\t}\r\n\t\t\tif (State.pointsOfInterest.Count >= ConVar.Server.maximumMapMarkers)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Blue_Short, MarkerLimitPhrase, false, ConVar.Server.maximumMapMarkers.ToString());\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tMapNote mapNote = MapNote.Deserialize(msg.read);\r\n\t\t\tValidateMapNote(mapNote);\r\n\t\t\tmapNote.colourIndex = FindUnusedPointOfInterestColour();\r\n\t\t\tState.pointsOfInterest.Add(mapNote);\r\n\t\t\tDirtyPlayerState();\r\n\t\t\tSendMarkersToClient();\r\n\t\t\tTeamUpdate();\r\n\t\t\tInterface.CallHook(\"OnMapMarkerAdded\", this, mapNote);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDemoRecordingStop","Parameters":"(string,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void StopDemoRecording()\r\n\t{\r\n\t\tif (net != null && net.connection != null && net.connection.IsRecording && Interface.CallHook(\"OnDemoRecordingStop\", net.connection.recordFilename, this) == null)\r\n\t\t{\r\n\t\t\tDebug.Log(ToString() + \" recording stopped: \" + net.connection.RecordFilename);\r\n\t\t\tnet.connection.StopRecording();\r\n\t\t\tCancelInvoke(MonitorDemoRecording);\r\n\t\t\tInterface.CallHook(\"OnDemoRecordingStopped\", net.connection.recordFilename, this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnDefaultItemsReceive","Parameters":"(PlayerInventory)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic void GiveDefaultItems()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnDefaultItemsReceive\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tStrip();\r\n\t\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\t\tif (activeGameMode != null && activeGameMode.HasLoadouts())\r\n\t\t{\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).LoadoutPlayer(base.baseEntity);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tGiveDefaultItemWithSkin(\"client.rockskin\", \"rock\");\r\n\t\tGiveDefaultItemWithSkin(\"client.torchskin\", \"torch\");\r\n\t\tif (IsBirthday() && !base.baseEntity.IsInTutorial)\r\n\t\t{\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"cakefiveyear\", 1, 0uL), containerBelt);\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"partyhat\", 1, 0uL), containerWear);\r\n\t\t}\r\n\t\tif (IsChristmas() && !base.baseEntity.IsInTutorial)\r\n\t\t{\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"snowball\", 1, 0uL), containerBelt);\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"snowball\", 1, 0uL), containerBelt);\r\n\t\t\tGiveItem(ItemManager.CreateByName(\"snowball\", 1, 0uL), containerBelt);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnDefaultItemsReceived\", this);\r\n\t\tvoid GiveDefaultItemWithSkin(string convarSkinName, string itemShortName)\r\n\t\t{\r\n\t\t\tulong num = 0uL;\r\n\t\t\tint infoInt = base.baseEntity.GetInfoInt(convarSkinName, 0);\r\n\t\t\tbool flag = false;\r\n\t\t\tbool flag2 = false;\r\n\t\t\tflag2 = base.baseEntity?.UnlockAllSkins ?? false;\r\n\t\t\tif (infoInt > 0 && (base.baseEntity.blueprints.CheckSkinOwnership(infoInt, base.baseEntity.userID) || flag2))\r\n\t\t\t{\r\n\t\t\t\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(itemShortName);\r\n\t\t\t\tif (itemDefinition != null && ItemDefinition.FindSkin(itemDefinition.itemid, infoInt) != 0L)\r\n\t\t\t\t{\r\n\t\t\t\t\tIPlayerItemDefinition itemDefinition2 = PlatformService.Instance.GetItemDefinition(infoInt);\r\n\t\t\t\t\tif (itemDefinition2 != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum = itemDefinition2.WorkshopDownload;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (num == 0L && itemDefinition.skins != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItemSkinDirectory.Skin[] skins = itemDefinition.skins;\r\n\t\t\t\t\t\tfor (int i = 0; i < skins.Length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tItemSkinDirectory.Skin skin = skins[i];\r\n\t\t\t\t\t\t\tif (skin.id == infoInt && skin.invItem != null && skin.invItem is ItemSkin itemSkin && itemSkin.Redirect != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tGiveItem(ItemManager.CreateByName(itemSkin.Redirect.shortname, 1, 0uL), containerBelt);\r\n\t\t\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!flag)\r\n\t\t\t{\r\n\t\t\t\tGiveItem(ItemManager.CreateByName(itemShortName, 1, num), containerBelt);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCupboardDeauthorize","Parameters":"(BuildingPrivlidge,BasePlayer)","ClassName":"BuildingPrivlidge","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void RemoveSelfAuthorize(RPCMessage rpc)\r\n\t{\r\n\t\tRPCMessage rpc2 = rpc;\r\n\t\tif (rpc2.player.CanInteract() && CanAdministrate(rpc2.player) && Interface.CallHook(\"OnCupboardDeauthorize\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tauthorizedPlayers.RemoveWhere((PlayerNameID x) => x.userid == (ulong)rpc2.player.userID);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityAuthChanged(this, rpc2.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), \"removed\", rpc2.player.userID);\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanBeWounded","Parameters":"(BasePlayer,HitInfo)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual bool EligibleForWounding(HitInfo info)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeWounded\", this, info);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!ConVar.Server.woundingenabled)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsWounded())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsSleeping())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (isMounted)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (info == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!IsWounded() && UnityEngine.Time.realtimeSinceStartup - lastWoundedStartTime < ConVar.Server.rewounddelay)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\t\tif ((bool)activeGameMode && !activeGameMode.allowWounding)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (triggers != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < triggers.Count; i++)\r\n\t\t\t{\r\n\t\t\t\tif (triggers[i] is IHurtTrigger)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (info.WeaponPrefab is BaseMelee)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (info.WeaponPrefab is BaseProjectile)\r\n\t\t{\r\n\t\t\treturn !info.isHeadshot;\r\n\t\t}\r\n\t\treturn info.damageTypes.GetMajorityDamageType() switch\r\n\t\t{\r\n\t\t\tDamageType.Suicide => false, \r\n\t\t\tDamageType.Fall => true, \r\n\t\t\tDamageType.Bite => true, \r\n\t\t\tDamageType.Bleeding => true, \r\n\t\t\tDamageType.Hunger => true, \r\n\t\t\tDamageType.Thirst => true, \r\n\t\t\tDamageType.Poison => true, \r\n\t\t\t_ => false, \r\n\t\t};\r\n\t}\r\n"},{"Name":"OnItemRecycleAmount","Parameters":"(Item,int,Recycler)","ClassName":"Recycler","MethodCode":"\r\n\tpublic void RecycleThink()\r\n\t{\r\n\t\tbool flag = false;\r\n\t\tfloat num = (IsSafezoneRecycler() ? safezoneRecycleEfficiency : radtownRecycleEfficiency);\r\n\t\tint num2 = 0;\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\tif (num2 < 6)\r\n\t\t\t{\r\n\t\t\t\tItem slot = base.inventory.GetSlot(num2);\r\n\t\t\t\tif (!CanBeRecycled(slot))\r\n\t\t\t\t{\r\n\t\t\t\t\tnum2++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (Interface.CallHook(\"OnItemRecycle\", slot, this) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!HasRecyclable())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tStopRecycling();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (slot.hasCondition)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum = Mathf.Clamp01(num * Mathf.Clamp(slot.conditionNormalized * slot.maxConditionNormalized, 0.1f, 1f));\r\n\t\t\t\t}\r\n\t\t\t\tint num3 = 1;\r\n\t\t\t\tif (slot.amount > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum3 = Mathf.CeilToInt(Mathf.Min(slot.amount, (float)slot.MaxStackable() * 0.1f));\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnItemRecycleAmount\", slot, num3, this);\r\n\t\t\t\tif (obj is int)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum3 = (int)obj;\r\n\t\t\t\t}\r\n\t\t\t\tif (slot.info.Blueprint.scrapFromRecycle > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num4 = slot.info.Blueprint.scrapFromRecycle * num3;\r\n\t\t\t\t\tif (slot.MaxStackable() == 1 && slot.hasCondition)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum4 *= slot.conditionNormalized;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfloat num5 = num / 0.5f;\r\n\t\t\t\t\tnum4 *= num5;\r\n\t\t\t\t\tint num6 = Mathf.FloorToInt(num4);\r\n\t\t\t\t\tfloat num7 = num4 - (float)num6;\r\n\t\t\t\t\tscrapRemainder += num7;\r\n\t\t\t\t\tif (scrapRemainder >= 1f)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint num8 = Mathf.FloorToInt(scrapRemainder);\r\n\t\t\t\t\t\tscrapRemainder -= num8;\r\n\t\t\t\t\t\tnum6 += num8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (num6 >= 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tItem item = ItemManager.CreateByName(\"scrap\", num6, 0uL);\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnRecyclerItemProduced(item.info.shortname, item.amount, this, slot);\r\n\t\t\t\t\t\tMoveItemToOutput(item);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!string.IsNullOrEmpty(slot.info.Blueprint.RecycleStat))\r\n\t\t\t\t{\r\n\t\t\t\t\tList<BasePlayer> obj2 = Facepunch.Pool.Get<List<BasePlayer>>();\r\n\t\t\t\t\tVis.Entities(base.transform.position, 3f, obj2, 131072);\r\n\t\t\t\t\tforeach (BasePlayer item3 in obj2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item3.IsAlive() && !item3.IsSleeping() && item3.inventory.loot.entitySource == this)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titem3.stats.Add(slot.info.Blueprint.RecycleStat, num3, (Stats)5);\r\n\t\t\t\t\t\t\titem3.stats.Save();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj2);\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnItemRecycled(slot.info.shortname, num3, this);\r\n\t\t\t\tslot.UseItem(num3);\r\n\t\t\t\tforeach (ItemAmount ingredient in slot.info.Blueprint.ingredients)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (ingredient.itemDef.shortname == \"scrap\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfloat num9 = ingredient.amount / (float)slot.info.Blueprint.amountToCreate * num * (float)num3;\r\n\t\t\t\t\tint num10 = Mathf.FloorToInt(num9);\r\n\t\t\t\t\tfloat num11 = num9 - (float)num10;\r\n\t\t\t\t\tif (num11 > float.Epsilon && UnityEngine.Random.Range(0f, 1f) <= num11)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum10++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (num10 <= 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint num12 = Mathf.CeilToInt((float)num10 / (float)ingredient.itemDef.stackable);\r\n\t\t\t\t\tfor (int i = 0; i < num12; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint num13 = ((num10 > ingredient.itemDef.stackable) ? ingredient.itemDef.stackable : num10);\r\n\t\t\t\t\t\tItem item2 = ItemManager.Create(ingredient.itemDef, num13, 0uL);\r\n\t\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnRecyclerItemProduced(item2.info.shortname, item2.amount, this, slot);\r\n\t\t\t\t\t\tif (!MoveItemToOutput(item2))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnum10 -= num13;\r\n\t\t\t\t\t\tif (num10 <= 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (flag || !HasRecyclable())\r\n\t\t\t{\r\n\t\t\t\tStopRecycling();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnQueueMessage","Parameters":"(Network.Connection,int)","ClassName":"ConnectionQueue","MethodCode":"\r\n\tpublic void SendMessage(Connection c, int position)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnQueueMessage\", c, position) == null)\r\n\t\t{\r\n\t\t\tstring empty = string.Empty;\r\n\t\t\tempty = ((position <= 0) ? string.Format(\"YOU'RE NEXT - {1:N0} PLAYERS BEHIND YOU\", position, queue.Count - position - 1) : $\"{position:N0} PLAYERS AHEAD OF YOU, {queue.Count - position - 1:N0} PLAYERS BEHIND\");\r\n\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\tnetWrite.PacketID(Message.Type.Message);\r\n\t\t\tnetWrite.String(\"QUEUE\");\r\n\t\t\tnetWrite.String(empty);\r\n\t\t\tnetWrite.Send(new SendInfo(c));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityGroundMissing","Parameters":"(BaseEntity)","ClassName":"DestroyOnGroundMissing","MethodCode":"\tprivate void OnGroundMissing()\r\n\t{\r\n\t\tBaseEntity baseEntity = GameObjectEx.ToBaseEntity(base.gameObject);\r\n\t\tif (baseEntity != null && Interface.CallHook(\"OnEntityGroundMissing\", baseEntity) == null)\r\n\t\t{\r\n\t\t\tBaseCombatEntity baseCombatEntity = baseEntity as BaseCombatEntity;\r\n\t\t\tif (baseCombatEntity != null)\r\n\t\t\t{\r\n\t\t\t\tbaseCombatEntity.Die();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.Kill(BaseNetworkable.DestroyMode.Gib);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWindmillUpdated","Parameters":"(ElectricWindmill)","ClassName":"ElectricWindmill","MethodCode":"\r\n\tpublic void WindUpdate()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnWindmillUpdate\", this) == null)\r\n\t\t{\r\n\t\t\tserverWindSpeed = GetWindSpeedScale();\r\n\t\t\tif (!AmIVisible())\r\n\t\t\t{\r\n\t\t\t\tserverWindSpeed = 0f;\r\n\t\t\t}\r\n\t\t\tint num = Mathf.FloorToInt((float)maxPowerGeneration * serverWindSpeed);\r\n\t\t\tbool num2 = currentEnergy != num;\r\n\t\t\tcurrentEnergy = num;\r\n\t\t\tif (num2)\r\n\t\t\t{\r\n\t\t\t\tMarkDirty();\r\n\t\t\t}\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tInterface.CallHook(\"OnWindmillUpdated\", this);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityBuilt","Parameters":"(Planner,UnityEngine.GameObject)","ClassName":"Planner","MethodCode":"\r\n\tpublic virtual BaseEntity DoBuild(Construction.Target target, Construction component)\r\n\t{\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (RayEx.IsNaNOrInfinity(target.ray))\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (target.position.IsNaNOrInfinity())\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (target.normal.IsNaNOrInfinity())\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tConstruction.lastPlacementError = \"\";\r\n\t\tConstruction.lastPlacementErrorDebug = \"\";\r\n\t\tConstruction.lastBuildingBlockError = null;\r\n\t\tConstruction.lastPlacementErrorIsDetailed = false;\r\n\t\tif (target.socket != null)\r\n\t\t{\r\n\t\t\tif (!target.socket.female)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.SocketNotFemale, false);\r\n\t\t\t\tConstruction.lastPlacementErrorDebug = target.socket.socketName;\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (target.entity != null && target.entity.IsOccupied(target.socket))\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.SocketOccupied, false);\r\n\t\t\t\tConstruction.lastPlacementErrorDebug = target.socket.socketName;\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (target.onTerrain)\r\n\t\t\t{\r\n\t\t\t\tConstruction.lastPlacementErrorDebug = \"Target on terrain is not allowed when attaching to socket (\" + target.socket.socketName + \")\";\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tVector3 deployPos = ((target.entity != null && target.socket != null) ? target.GetWorldPosition() : target.position);\r\n\t\tif (AntiHack.TestIsBuildingInsideSomething(target, deployPos))\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.InsideObjects, false);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (ConVar.AntiHack.eye_protection >= 2 && !HasLineOfSight(ownerPlayer, deployPos, target, component))\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.LineOfSightBlocked, false);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (ConVar.Server.max_sleeping_bags > 0)\r\n\t\t{\r\n\t\t\tCanBuildResult? result = SleepingBag.CanBuildBed(ownerPlayer, component);\r\n\t\t\tif (HandleCanBuild(result, ownerPlayer))\r\n\t\t\t{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ConVar.Server.max_shelters > 0)\r\n\t\t{\r\n\t\t\tCanBuildResult? result2 = LegacyShelter.CanBuildShelter(ownerPlayer, component);\r\n\t\t\tif (HandleCanBuild(result2, ownerPlayer))\r\n\t\t\t{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tGameObject gameObject = DoPlacement(target, component);\r\n\t\tif (gameObject == null)\r\n\t\t{\r\n\t\t\tif (!string.IsNullOrEmpty(Construction.lastPlacementError.translated))\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, Construction.lastPlacementError, false);\r\n\t\t\t}\r\n\t\t\tConstructionErrors.Log(ownerPlayer, Construction.lastPlacementErrorDebug);\r\n\t\t}\r\n\t\tif (gameObject != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnEntityBuilt\", this, gameObject);\r\n\t\t\tDeployable deployable = GetDeployable();\r\n\t\t\tBaseEntity baseEntity = GameObjectEx.ToBaseEntity(gameObject);\r\n\t\t\tif (baseEntity != null && deployable != null)\r\n\t\t\t{\r\n\t\t\t\tif (ShouldParent(target.entity, deployable))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (target.socket is Socket_Specific_Female socket_Specific_Female)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (socket_Specific_Female.parentToBone)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbaseEntity.SetParent(target.entity, socket_Specific_Female.boneName, worldPositionStays: true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbaseEntity.SetParent(target.entity, worldPositionStays: true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbaseEntity.SetParent(target.entity, worldPositionStays: true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (deployable.wantsInstanceData && GetOwnerItem().instanceData != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t(baseEntity as IInstanceDataReceiver).ReceiveInstanceData(GetOwnerItem().instanceData);\r\n\t\t\t\t}\r\n\t\t\t\tif (deployable.copyInventoryFromItem)\r\n\t\t\t\t{\r\n\t\t\t\t\tStorageContainer component2 = baseEntity.GetComponent<StorageContainer>();\r\n\t\t\t\t\tif ((bool)component2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcomponent2.ReceiveInventoryFromItem(GetOwnerItem());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tItemModDeployable modDeployable = GetModDeployable();\r\n\t\t\t\tif (modDeployable != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tmodDeployable.OnDeployed(baseEntity, ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t\tbaseEntity.OnDeployed(baseEntity.GetParentEntity(), ownerPlayer, GetOwnerItem());\r\n\t\t\t\tif (deployable.placeEffect.isValid)\r\n\t\t\t\t{\r\n\t\t\t\t\tif ((bool)target.entity && target.socket != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tEffect.server.Run(deployable.placeEffect.resourcePath, target.entity.transform.TransformPoint(target.socket.worldPosition), target.entity.transform.up);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tEffect.server.Run(deployable.placeEffect.resourcePath, target.position, target.normal);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (baseEntity != null)\r\n\t\t\t{\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnEntityBuilt(baseEntity, ownerPlayer);\r\n\t\t\t\tif (GetOwnerItemDefinition() != null)\r\n\t\t\t\t{\r\n\t\t\t\t\townerPlayer.ProcessMissionEvent(BaseMission.MissionEventType.DEPLOY, new BaseMission.MissionEventPayload\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tWorldPosition = baseEntity.transform.position,\r\n\t\t\t\t\t\tUintIdentifier = baseEntity.prefabID,\r\n\t\t\t\t\t\tIntIdentifier = GetOwnerItemDefinition().itemid\r\n\t\t\t\t\t}, 1f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPayForPlacement(ownerPlayer, component);\r\n\t\t\treturn baseEntity;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnDispenserBonus","Parameters":"(ResourceDispenser,BasePlayer,Item)","ClassName":"ResourceDispenser","MethodCode":"\r\n\tpublic void AssignFinishBonus(BasePlayer player, float fraction, AttackEntity weapon)\r\n\t{\r\n\t\tif (forceFullFinishBonus)\r\n\t\t{\r\n\t\t\tfraction = 1f;\r\n\t\t}\r\n\t\tSendMessage(\"FinishBonusAssigned\", SendMessageOptions.DontRequireReceiver);\r\n\t\tif (fraction <= 0f || finishBonus == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (ItemAmount finishBonu in finishBonus)\r\n\t\t{\r\n\t\t\tint num = Mathf.CeilToInt((float)(int)finishBonu.amount * Mathf.Clamp01(fraction));\r\n\t\t\tint num2 = CalculateGatherBonus(player, finishBonu, num);\r\n\t\t\tItem item = ItemManager.Create(finishBonu.itemDef, num + num2, 0uL);\r\n\t\t\tif (item != null)\r\n\t\t\t{\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnDispenserBonus\", this, player, item);\r\n\t\t\t\tif (obj is Item)\r\n\t\t\t\t{\r\n\t\t\t\t\titem = (Item)obj;\r\n\t\t\t\t}\r\n\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGatherItem(item.info.shortname, item.amount, base.baseEntity, player, weapon);\r\n\t\t\t\tInterface.CallHook(\"OnDispenserBonusReceived\", this, player, item);\r\n\t\t\t\tplayer.GiveItem(item, BaseEntity.GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBookmarksSendControl","Parameters":"(ComputerStation,BasePlayer,string)","ClassName":"ComputerStation","MethodCode":"\r\n\tpublic void SendControlBookmarks(BasePlayer player)\r\n\t{\r\n\t\tif (!(player == null))\r\n\t\t{\r\n\t\t\tstring text = GenerateControlBookmarkString();\r\n\t\t\tif (Interface.CallHook(\"OnBookmarksSendControl\", this, player, text) == null)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"ReceiveBookmarks\", player), text);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityFlagsNetworkUpdate","Parameters":"(BaseEntity)","ClassName":"BaseEntity","MethodCode":"\r\n\tpublic void SendNetworkUpdate_Flags()\r\n\t{\r\n\t\tif (Rust.Application.isLoading || Rust.Application.isLoadingSave || base.IsDestroyed || net == null || !isSpawned)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"SendNetworkUpdate_Flags\"))\r\n\t\t{\r\n\t\t\tLogEntry(RustLog.EntryType.Network, 3, \"SendNetworkUpdate_Flags\");\r\n\t\t\tif (Interface.CallHook(\"OnEntityFlagsNetworkUpdate\", this) == null)\r\n\t\t\t{\r\n\t\t\t\tList<Connection> subscribers = GetSubscribers();\r\n\t\t\t\tif (subscribers != null && subscribers.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\t\t\tnetWrite.PacketID(Message.Type.EntityFlags);\r\n\t\t\t\t\tnetWrite.EntityID(net.ID);\r\n\t\t\t\t\tnetWrite.Int32((int)flags);\r\n\t\t\t\t\tSendInfo info = new SendInfo(subscribers);\r\n\t\t\t\t\tnetWrite.Send(info);\r\n\t\t\t\t}\r\n\t\t\t\tbase.gameObject.SendOnSendNetworkUpdate(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnWireClear","Parameters":"(BasePlayer,IOEntity,int,IOEntity,bool)","ClassName":"WireTool","MethodCode":"\r\n\tpublic static bool AttemptClearSlot(BaseNetworkable clearEnt, BasePlayer ply, int clearIndex, bool isInput)\r\n\t{\r\n\t\tIOEntity iOEntity = ((clearEnt != null) ? clearEnt.GetComponent<IOEntity>() : null);\r\n\t\tIOEntity iOEntity2 = (IOEntity)(object)(isInput ? iOEntity.inputs[clearIndex] : iOEntity.outputs[clearIndex]);\r\n\t\tif (((IOEntity.IOSlot)(object)iOEntity2).connectedTo.Get() == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tiOEntity2 = ((IOEntity.IOSlot)(object)iOEntity2).connectedTo.Get();\r\n\t\tobject obj = Interface.CallHook(\"OnWireClear\", ply, iOEntity, clearIndex, iOEntity2, isInput);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (iOEntity == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (ply != null && !CanModifyEntity(ply, iOEntity))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn iOEntity.Disconnect(clearIndex, isInput);\r\n\t}\r\n"},{"Name":"OnEntityControl","Parameters":"(PoweredRemoteControlEntity,ulong)","ClassName":"PoweredRemoteControlEntity","MethodCode":"\r\n\tpublic virtual bool CanControl(ulong playerID)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnEntityControl\", this, playerID);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!IsPowered())\r\n\t\t{\r\n\t\t\treturn IsStatic();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnLockRemove","Parameters":"(ModularCar,BasePlayer)","ClassName":"ModularCarGarage","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void RPC_RequestRemoveLock(RPCMessage msg)\r\n\t{\r\n\t\tif (HasOccupant && carOccupant.CarLock.HasALock && Interface.CallHook(\"OnLockRemove\", carOccupant, msg.player) == null)\r\n\t\t{\r\n\t\t\tcarOccupant.CarLock.RemoveLock();\r\n\t\t\tEffect.server.Run(addRemoveLockEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBroadcastCommand","Parameters":"(string,object[])","ClassName":"ConsoleNetwork","MethodCode":"\r\n\tpublic static void BroadcastToAllClients(string strCommand, params object[] args)\r\n\t{\r\n\t\tif (Network.Net.sv.IsConnected() && Interface.CallHook(\"OnBroadcastCommand\", strCommand, args) == null)\r\n\t\t{\r\n\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\tnetWrite.PacketID(Message.Type.ConsoleCommand);\r\n\t\t\tnetWrite.String(ConsoleSystem.BuildCommand(strCommand, args));\r\n\t\t\tnetWrite.Send(new SendInfo(Network.Net.sv.connections));\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUnlock","Parameters":"(BasePlayer,CodeLock)","ClassName":"CodeLock","MethodCode":"\r\n\t[RPC_Server.MaxDistance(3f, CheckParent = true)]\r\n\t[RPC_Server]\r\n\tprivate void TryUnlock(RPCMessage rpc)\r\n\t{\r\n\t\tif (rpc.player.CanInteract() && IsLocked() && Interface.CallHook(\"CanUnlock\", rpc.player, this) == null && !IsCodeEntryBlocked() && whitelistPlayers.Contains(rpc.player.userID))\r\n\t\t{\r\n\t\t\tDoEffect(effectUnlocked.resourcePath);\r\n\t\t\tSetFlag(Flags.Locked, b: false);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnComposterUpdate","Parameters":"(Composter)","ClassName":"Composter","MethodCode":"\r\n\tpublic void UpdateComposting()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnComposterUpdate\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < base.inventory.capacity; i++)\r\n\t\t{\r\n\t\t\tItem slot = base.inventory.GetSlot(i);\r\n\t\t\tif (slot != null)\r\n\t\t\t{\r\n\t\t\t\tCompostItem(slot);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTakeCurrencyItem","Parameters":"(VendingMachine,Item)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic virtual void TakeCurrencyItem(Item takenCurrencyItem)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnTakeCurrencyItem\", this, takenCurrencyItem) == null && !takenCurrencyItem.MoveToContainer(base.inventory))\r\n\t\t{\r\n\t\t\ttakenCurrencyItem.Drop(base.inventory.dropPosition, Vector3.zero);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnXmasGiftsDistribute","Parameters":"(XMasRefill,BasePlayer)","ClassName":"XMasRefill","MethodCode":"\r\n\tpublic bool DistributeGiftsForPlayer(BasePlayer player)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnXmasGiftsDistribute\", this, player) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tint num = GiftsPerPlayer();\r\n\t\tint num2 = GiftSpawnAttempts();\r\n\t\tfor (int i = 0; i < num2; i++)\r\n\t\t{\r\n\t\t\tif (num <= 0)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tVector2 vector = UnityEngine.Random.insideUnitCircle * GiftRadius();\r\n\t\t\tVector3 pos = player.transform.position + new Vector3(vector.x, 10f, vector.y);\r\n\t\t\tQuaternion rot = Quaternion.Euler(0f, UnityEngine.Random.Range(0f, 360f), 0f);\r\n\t\t\tif (DropToGround(ref pos))\r\n\t\t\t{\r\n\t\t\t\tstring resourcePath = giftPrefabs[UnityEngine.Random.Range(0, giftPrefabs.Length)].resourcePath;\r\n\t\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(resourcePath, pos, rot);\r\n\t\t\t\tif ((bool)baseEntity)\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseEntity.Spawn();\r\n\t\t\t\t\tnum--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnFuelItemCheck","Parameters":"(EntityFuelSystem,StorageContainer)","ClassName":"EntityFuelSystem","MethodCode":"\r\n\tpublic Item GetFuelItem()\r\n\t{\r\n\t\tStorageContainer fuelContainer = GetFuelContainer();\r\n\t\tobject obj = Interface.CallHook(\"OnFuelItemCheck\", this, fuelContainer);\r\n\t\tif (obj is Item)\r\n\t\t{\r\n\t\t\treturn (Item)obj;\r\n\t\t}\r\n\t\tif (fuelContainer == null)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn fuelContainer.inventory.GetSlot(0);\r\n\t}\r\n"},{"Name":"OnItemRefill","Parameters":"(Item,BasePlayer)","ClassName":"ItemModRepair","MethodCode":"\r\n\tpublic override void ServerCommand(Item item, string command, BasePlayer player)\r\n\t{\r\n\t\tif (command == \"refill\" && !player.IsSwimming() && HasCraftLevel(player) && !(item.conditionNormalized >= 1f) && Interface.CallHook(\"OnItemRefill\", item, player) == null)\r\n\t\t{\r\n\t\t\tfloat conditionNormalized = item.conditionNormalized;\r\n\t\t\tfloat maxConditionNormalized = item.maxConditionNormalized;\r\n\t\t\titem.DoRepair(conditionLost);\r\n\t\t\tif (successEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(successEffect.resourcePath, player.eyes.position);\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnItemRepaired(player, player.GetCachedCraftLevelWorkbench(), item, conditionNormalized, maxConditionNormalized);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRackedWeaponUnloaded","Parameters":"(Item,BasePlayer,WeaponRack)","ClassName":"WeaponRack","MethodCode":"\r\n\tprivate void UnloadWeapon(BasePlayer player, int mountSlotIndex)\r\n\t{\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tWeaponRackSlot weaponAtIndex = GetWeaponAtIndex(mountSlotIndex);\r\n\t\tif (weaponAtIndex == null || !weaponAtIndex.CanBeReloadedAtWeaponRack())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem slot = base.inventory.GetSlot(weaponAtIndex.InventoryIndex);\r\n\t\tif (slot == null || Interface.CallHook(\"OnRackedWeaponUnload\", slot, player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity heldEntity = slot.GetHeldEntity();\r\n\t\tif (!(heldEntity == null))\r\n\t\t{\r\n\t\t\tBaseProjectile component = heldEntity.GetComponent<BaseProjectile>();\r\n\t\t\tif (!(component == null))\r\n\t\t\t{\r\n\t\t\t\tItemDefinition ammoType = component.primaryMagazine.ammoType;\r\n\t\t\t\tcomponent.UnloadAmmo(slot, player);\r\n\t\t\t\tSetSlotAmmoDetails(weaponAtIndex, slot);\r\n\t\t\t\tSendNetworkUpdateImmediate();\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"PlayAmmoSound\", player), ammoType.itemid, 1);\r\n\t\t\t\tInterface.CallHook(\"OnRackedWeaponUnloaded\", slot, player, this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMlrsTarget","Parameters":"(MLRS,UnityEngine.Vector3,BasePlayer)","ClassName":"MLRS","MethodCode":"\r\n\tpublic void SetUserTargetHitPos(Vector3 worldPos)\r\n\t{\r\n\t\tif (UserTargetHitPos == worldPos)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tVector3 position = TerrainMeta.Position;\r\n\t\t\tVector3 vector = position + TerrainMeta.Size;\r\n\t\t\tworldPos.x = Mathf.Clamp(worldPos.x, position.x, vector.x);\r\n\t\t\tworldPos.z = Mathf.Clamp(worldPos.z, position.z, vector.z);\r\n\t\t\tworldPos.y = GetSurfaceHeight(worldPos);\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnMlrsTarget\", this, worldPos, _mounted) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUserTargetHitPos = worldPos;\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\ttrueTargetHitPos = UserTargetHitPos;\r\n\t\t\tforeach (TriggerSafeZone allSafeZone in TriggerSafeZone.allSafeZones)\r\n\t\t\t{\r\n\t\t\t\tVector3 center = allSafeZone.triggerCollider.bounds.center;\r\n\t\t\t\tcenter.y = 0f;\r\n\t\t\t\tfloat num = ColliderEx.GetRadius(allSafeZone.triggerCollider, allSafeZone.transform.localScale) + targetAreaRadius;\r\n\t\t\t\ttrueTargetHitPos.y = 0f;\r\n\t\t\t\tif (Vector3.Distance(center, trueTargetHitPos) < num)\r\n\t\t\t\t{\r\n\t\t\t\t\tVector3 vector2 = trueTargetHitPos - center;\r\n\t\t\t\t\ttrueTargetHitPos = center + vector2.normalized * num;\r\n\t\t\t\t\ttrueTargetHitPos.y = GetSurfaceHeight(trueTargetHitPos);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnMlrsTargetSet\", this, trueTargetHitPos, _mounted);\r\n\t}\r\n"},{"Name":"OnHelicopterOutOfCrates","Parameters":"(CH47HelicopterAIController)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic bool OutOfCrates()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnHelicopterOutOfCrates\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn numCrates <= 0;\r\n\t}\r\n"},{"Name":"OnNpcAlert","Parameters":"(ScientistNPC)","ClassName":"ScientistNPC","MethodCode":"\r\n\tpublic void Alert()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnNpcAlert\", this) == null)\r\n\t\t{\r\n\t\t\tlastAlertedTime = Time.time;\r\n\t\t\tSetChatterType(RadioChatterType.Alert);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCupboardClearList","Parameters":"(BuildingPrivlidge,BasePlayer)","ClassName":"BuildingPrivlidge","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tpublic void ClearList(RPCMessage rpc)\r\n\t{\r\n\t\tif (rpc.player.CanInteract() && CanAdministrate(rpc.player) && Interface.CallHook(\"OnCupboardClearList\", this, rpc.player) == null)\r\n\t\t{\r\n\t\t\tauthorizedPlayers.Clear();\r\n\t\t\tUpdateMaxAuthCapacity();\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnInterferenceUpdate","Parameters":"(AutoTurret)","ClassName":"AutoTurret","MethodCode":"\r\n\tpublic void UpdateInterference()\r\n\t{\r\n\t\tif (!IsOn() || Interface.CallHook(\"OnInterferenceUpdate\", this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = 0f;\r\n\t\tforeach (AutoTurret nearbyTurret in nearbyTurrets)\r\n\t\t{\r\n\t\t\tif (!nearbyTurret.isClient && nearbyTurret.IsValid() && nearbyTurret.gameObject.activeSelf && !nearbyTurret.EqualNetID(net.ID) && nearbyTurret.IsOn() && !nearbyTurret.HasInterference())\r\n\t\t\t{\r\n\t\t\t\tnum += 1f;\r\n\t\t\t}\r\n\t\t}\r\n\t\tSetFlag(Flags.OnFire, num >= (float)Sentry.maxinterference);\r\n\t}\r\n"},{"Name":"OnIngredientsCollect","Parameters":"(ItemCrafter,ItemBlueprint,ItemCraftTask,int,BasePlayer)","ClassName":"ItemCrafter","MethodCode":"\r\n\tpublic void CollectIngredients(ItemBlueprint bp, ItemCraftTask task, int amount = 1, BasePlayer player = null)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnIngredientsCollect\", this, bp, task, amount, player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tList<Item> list = new List<Item>();\r\n\t\tforeach (ItemAmount ingredient in bp.ingredients)\r\n\t\t{\r\n\t\t\tCollectIngredient(ingredient.itemid, (int)ingredient.amount * amount, list);\r\n\t\t}\r\n\t\tforeach (Item item in list)\r\n\t\t{\r\n\t\t\titem.CollectedForCrafting(player);\r\n\t\t}\r\n\t\ttask.takenItems = list;\r\n\t}\r\n"},{"Name":"OnEngineStatsRefresh","Parameters":"(VehicleModuleEngine,Rust.Modular.EngineStorage)","ClassName":"VehicleModuleEngine","MethodCode":"\r\n\tpublic void RefreshPerformanceStats(EngineStorage engineStorage)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEngineStatsRefresh\", this, engineStorage) == null)\r\n\t\t{\r\n\t\t\tif (engineStorage == null)\r\n\t\t\t{\r\n\t\t\t\tIsUsable = false;\r\n\t\t\t\tPerformanceFractionAcceleration = 0f;\r\n\t\t\t\tPerformanceFractionTopSpeed = 0f;\r\n\t\t\t\tPerformanceFractionFuelEconomy = 0f;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tIsUsable = engineStorage.isUsable;\r\n\t\t\t\tPerformanceFractionAcceleration = GetPerformanceFraction(engineStorage.accelerationBoostPercent);\r\n\t\t\t\tPerformanceFractionTopSpeed = GetPerformanceFraction(engineStorage.topSpeedBoostPercent);\r\n\t\t\t\tPerformanceFractionFuelEconomy = GetPerformanceFraction(engineStorage.fuelEconomyBoostPercent);\r\n\t\t\t}\r\n\t\t\tOverallPerformanceFraction = (PerformanceFractionAcceleration + PerformanceFractionTopSpeed + PerformanceFractionFuelEconomy) / 3f;\r\n\t\t\tInterface.CallHook(\"OnEngineStatsRefreshed\", this, engineStorage);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanSwapToSeat","Parameters":"(BasePlayer,ModularCarSeat)","ClassName":"ModularCarSeat","MethodCode":"\r\n\tpublic override bool CanSwapToThis(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanSwapToSeat\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (associatedSeatingModule.DoorsAreLockable)\r\n\t\t{\r\n\t\t\tModularCar modularCar = associatedSeatingModule.Vehicle as ModularCar;\r\n\t\t\tif (modularCar != null)\r\n\t\t\t{\r\n\t\t\t\treturn modularCar.PlayerCanUseThis(player, ModularCarCodeLock.LockType.Door);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnHuntEventStart","Parameters":"(EggHuntEvent)","ClassName":"EggHuntEvent","MethodCode":"\r\n\tprivate void StartEvent()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnHuntEventStart\", this) == null)\r\n\t\t{\r\n\t\t\tif (initialSpawnIndex <= BasePlayer.activePlayerList.Count)\r\n\t\t\t{\r\n\t\t\t\teggSpawningFrameBudget = float.PositiveInfinity;\r\n\t\t\t}\r\n\t\t\tEnableEggs();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnVehicleModuleSelected","Parameters":"(Item,ModularCarGarage,BasePlayer)","ClassName":"ModularCarGarage","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void RPC_SelectedLootItem(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tItemId itemUID = msg.read.ItemID();\r\n\t\tif (player == null || !player.inventory.loot.IsLooting() || player.inventory.loot.entitySource != this || !HasOccupant)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem vehicleItem = carOccupant.GetVehicleItem(itemUID);\r\n\t\tif (vehicleItem == null || Interface.CallHook(\"OnVehicleModuleSelect\", vehicleItem, this, player) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = player.inventory.loot.RemoveContainerAt(3);\r\n\t\tif (TryGetModuleForItem(vehicleItem, out var result))\r\n\t\t{\r\n\t\t\tif (result is VehicleModuleStorage vehicleModuleStorage)\r\n\t\t\t{\r\n\t\t\t\tIItemContainerEntity container = vehicleModuleStorage.GetContainer();\r\n\t\t\t\tif (!ObjectEx.IsUnityNull(container))\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.inventory.loot.AddContainer(container.inventory);\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (result is VehicleModuleCamper vehicleModuleCamper)\r\n\t\t\t{\r\n\t\t\t\tIItemContainerEntity container2 = vehicleModuleCamper.GetContainer();\r\n\t\t\t\tif (!ObjectEx.IsUnityNull(container2))\r\n\t\t\t\t{\r\n\t\t\t\t\tplayer.inventory.loot.AddContainer(container2.inventory);\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnVehicleModuleSelected\", vehicleItem, this, player);\r\n\t}\r\n"},{"Name":"OnPlayerReported","Parameters":"(BasePlayer,string,string,string,string,string)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(1uL)]\r\n\tpublic void OnPlayerReported(RPCMessage msg)\r\n\t{\r\n\t\tstring text = msg.read.String();\r\n\t\tstring text2 = msg.read.StringMultiLine();\r\n\t\tstring text3 = msg.read.String();\r\n\t\tstring text4 = msg.read.String();\r\n\t\tstring text5 = msg.read.String();\r\n\t\tDebugEx.Log($\"[PlayerReport] {this} reported {text5}[{text4}] - \\\"{text}\\\"\");\r\n\t\tRCon.Broadcast(RCon.LogType.Report, new\r\n\t\t{\r\n\t\t\tPlayerId = UserIDString,\r\n\t\t\tPlayerName = displayName,\r\n\t\t\tTargetId = text4,\r\n\t\t\tTargetName = text5,\r\n\t\t\tSubject = text,\r\n\t\t\tMessage = text2,\r\n\t\t\tType = text3\r\n\t\t});\r\n\t\tInterface.CallHook(\"OnPlayerReported\", this, text5, text4, text, text2, text3);\r\n\t}\r\n"},{"Name":"OnPhotoCapture","Parameters":"(PhotoEntity,Item,BasePlayer,byte[])","ClassName":"InstantCameraTool","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(3uL)]\r\n\t[RPC_Server.FromOwner]\r\n\tprivate void TakePhoto(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tItem item = GetItem();\r\n\t\tif (player == null || item == null || item.condition <= 0f)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbyte[] array = msg.read.BytesWithSize();\r\n\t\tif (array.Length > 102400 || !ImageProcessing.IsValidJPG(array, resolutionX, resolutionY))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem item2 = ItemManager.Create(photoItem, 1, 0uL);\r\n\t\tif (item2 == null)\r\n\t\t{\r\n\t\t\tDebug.LogError(\"Failed to create photo item\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!item2.instanceData.subEntity.IsValid)\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t\tDebug.LogError(\"Photo has no sub-entity\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(item2.instanceData.subEntity);\r\n\t\tif (baseNetworkable == null)\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t\tDebug.LogError(\"Sub-entity was not found\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!(baseNetworkable is PhotoEntity photoEntity))\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t\tDebug.LogError(\"Sub-entity is not a photo\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tphotoEntity.SetImageData(player.userID, array);\r\n\t\tif (Interface.CallHook(\"OnPhotoCapture\", photoEntity, item, player, array) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!player.inventory.GiveItem(item2))\r\n\t\t{\r\n\t\t\titem2.Drop(player.GetDropPosition(), player.GetDropVelocity());\r\n\t\t}\r\n\t\tEffectNetwork.Send(new Effect(screenshotEffect.resourcePath, base.transform.position, base.transform.forward, msg.connection));\r\n\t\tif (!hasSentAchievement && !string.IsNullOrEmpty(\"SUMMER_PAPARAZZI\"))\r\n\t\t{\r\n\t\t\tVector3 position = GetOwnerPlayer().eyes.position;\r\n\t\t\tVector3 vector = GetOwnerPlayer().eyes.HeadForward();\r\n\t\t\tList<BasePlayer> obj = Facepunch.Pool.Get<List<BasePlayer>>();\r\n\t\t\tVis.Entities(position + vector * 5f, 5f, obj, 131072);\r\n\t\t\tforeach (BasePlayer item3 in obj)\r\n\t\t\t{\r\n\t\t\t\tif (item3.isServer && item3 != GetOwnerPlayer() && item3.IsVisible(GetOwnerPlayer().eyes.position))\r\n\t\t\t\t{\r\n\t\t\t\t\thasSentAchievement = true;\r\n\t\t\t\t\tGetOwnerPlayer().GiveAchievement(\"SUMMER_PAPARAZZI\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t}\r\n\t\titem.LoseCondition(1f);\r\n\t\tInterface.CallHook(\"OnPhotoCaptured\", photoEntity, item, player, array);\r\n\t}\r\n"},{"Name":"CanExplosiveStick","Parameters":"(TimedExplosive,BaseEntity)","ClassName":"TimedExplosive","MethodCode":"\r\n\tpublic virtual bool CanStickTo(BaseEntity entity)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanExplosiveStick\", this, entity);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (entity.TryGetComponent<DecorDeployable>(out var _))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (entity is Drone)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (entity is TravellingVendor)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnVehicleLockableCheck","Parameters":"(ModularCarCodeLock)","ClassName":"ModularCarCodeLock","MethodCode":"\r\n\tpublic bool CanHaveALock()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"OnVehicleLockableCheck\", this);\r\n\t\tif (obj != null)\r\n\t\t{\r\n\t\t\tif (!(obj is bool))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!owner.IsDead())\r\n\t\t{\r\n\t\t\treturn owner.HasDriverMountPoints();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"CanAdministerVending","Parameters":"(BasePlayer,VendingMachine)","ClassName":"VendingMachine","MethodCode":"\r\n\tpublic virtual bool CanPlayerAdmin(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanAdministerVending\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (PlayerBehind(player))\r\n\t\t{\r\n\t\t\treturn OccupiedCheck(player);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnItemResearched","Parameters":"(ResearchTable,int)","ClassName":"ResearchTable","MethodCode":"\r\n\tpublic void ResearchAttemptFinished()\r\n\t{\r\n\t\tItem targetItem = GetTargetItem();\r\n\t\tItem scrapItem = GetScrapItem();\r\n\t\tif (targetItem != null && scrapItem != null)\r\n\t\t{\r\n\t\t\tint num = ScrapForResearch(targetItem);\r\n\t\t\tobject obj = Interface.CallHook(\"OnItemResearched\", this, num);\r\n\t\t\tif (obj is int)\r\n\t\t\t{\r\n\t\t\t\tnum = (int)obj;\r\n\t\t\t}\r\n\t\t\tif (scrapItem.amount >= num)\r\n\t\t\t{\r\n\t\t\t\tif (scrapItem.amount == num)\r\n\t\t\t\t{\r\n\t\t\t\t\tbase.inventory.Remove(scrapItem);\r\n\t\t\t\t\tscrapItem.RemoveFromContainer();\r\n\t\t\t\t\tscrapItem.Remove();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tscrapItem.UseItem(num);\r\n\t\t\t\t}\r\n\t\t\t\tbase.inventory.Remove(targetItem);\r\n\t\t\t\ttargetItem.Remove();\r\n\t\t\t\tItem item = ItemManager.Create(ItemManager.blueprintBaseDef, 1, 0uL);\r\n\t\t\t\titem.blueprintTarget = ((targetItem.info.isRedirectOf != null) ? targetItem.info.isRedirectOf.itemid : targetItem.info.itemid);\r\n\t\t\t\tif (!item.MoveToContainer(base.inventory, 0))\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Drop(GetDropPosition(), GetDropVelocity());\r\n\t\t\t\t}\r\n\t\t\t\tif (researchSuccessEffect.isValid)\r\n\t\t\t\t{\r\n\t\t\t\t\tEffect.server.Run(researchSuccessEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tif (user != null)\r\n\t\t{\r\n\t\t\tuser.inventory.loot.SendImmediate();\r\n\t\t}\r\n\t\tEndResearch();\r\n\t}\r\n"},{"Name":"OnPhotoCaptured","Parameters":"(PhotoEntity,Item,BasePlayer,byte[])","ClassName":"InstantCameraTool","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.CallsPerSecond(3uL)]\r\n\t[RPC_Server.FromOwner]\r\n\tprivate void TakePhoto(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tItem item = GetItem();\r\n\t\tif (player == null || item == null || item.condition <= 0f)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbyte[] array = msg.read.BytesWithSize();\r\n\t\tif (array.Length > 102400 || !ImageProcessing.IsValidJPG(array, resolutionX, resolutionY))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItem item2 = ItemManager.Create(photoItem, 1, 0uL);\r\n\t\tif (item2 == null)\r\n\t\t{\r\n\t\t\tDebug.LogError(\"Failed to create photo item\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!item2.instanceData.subEntity.IsValid)\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t\tDebug.LogError(\"Photo has no sub-entity\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(item2.instanceData.subEntity);\r\n\t\tif (baseNetworkable == null)\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t\tDebug.LogError(\"Sub-entity was not found\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!(baseNetworkable is PhotoEntity photoEntity))\r\n\t\t{\r\n\t\t\titem2.Remove();\r\n\t\t\tDebug.LogError(\"Sub-entity is not a photo\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tphotoEntity.SetImageData(player.userID, array);\r\n\t\tif (Interface.CallHook(\"OnPhotoCapture\", photoEntity, item, player, array) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!player.inventory.GiveItem(item2))\r\n\t\t{\r\n\t\t\titem2.Drop(player.GetDropPosition(), player.GetDropVelocity());\r\n\t\t}\r\n\t\tEffectNetwork.Send(new Effect(screenshotEffect.resourcePath, base.transform.position, base.transform.forward, msg.connection));\r\n\t\tif (!hasSentAchievement && !string.IsNullOrEmpty(\"SUMMER_PAPARAZZI\"))\r\n\t\t{\r\n\t\t\tVector3 position = GetOwnerPlayer().eyes.position;\r\n\t\t\tVector3 vector = GetOwnerPlayer().eyes.HeadForward();\r\n\t\t\tList<BasePlayer> obj = Facepunch.Pool.Get<List<BasePlayer>>();\r\n\t\t\tVis.Entities(position + vector * 5f, 5f, obj, 131072);\r\n\t\t\tforeach (BasePlayer item3 in obj)\r\n\t\t\t{\r\n\t\t\t\tif (item3.isServer && item3 != GetOwnerPlayer() && item3.IsVisible(GetOwnerPlayer().eyes.position))\r\n\t\t\t\t{\r\n\t\t\t\t\thasSentAchievement = true;\r\n\t\t\t\t\tGetOwnerPlayer().GiveAchievement(\"SUMMER_PAPARAZZI\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.FreeUnmanaged(ref obj);\r\n\t\t}\r\n\t\titem.LoseCondition(1f);\r\n\t\tInterface.CallHook(\"OnPhotoCaptured\", photoEntity, item, player, array);\r\n\t}\r\n"},{"Name":"OnRemoveDying","Parameters":"(GrowableEntity,BasePlayer)","ClassName":"GrowableEntity","MethodCode":"\r\n\tpublic void RemoveDying(BasePlayer receiver)\r\n\t{\r\n\t\tif (State == PlantProperties.State.Dying && !(Properties.removeDyingItem == null) && Interface.CallHook(\"OnRemoveDying\", this, receiver) == null)\r\n\t\t{\r\n\t\t\tif (Properties.removeDyingEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(Properties.removeDyingEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t\t}\r\n\t\t\tItem item = ItemManager.Create(Properties.removeDyingItem, 1, 0uL);\r\n\t\t\tif (receiver != null)\r\n\t\t\t{\r\n\t\t\t\treceiver.GiveItem(item, GiveItemReason.PickedUp);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\titem.Drop(base.transform.position + Vector3.up * 0.5f, Vector3.up * 1f);\r\n\t\t\t}\r\n\t\t\tTellPlanter();\r\n\t\t\tDie();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerAttack","Parameters":"(BasePlayer,HitInfo)","ClassName":"BaseMelee","MethodCode":"\r\n\tpublic virtual void DoAttackShared(HitInfo info)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPlayerAttack\", GetOwnerPlayer(), info) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tGetAttackStats(info);\r\n\t\tif (info.HitEntity != null)\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"OnAttacked\", 50))\r\n\t\t\t{\r\n\t\t\t\tinfo.HitEntity.OnAttacked(info);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (info.DoHitEffects)\r\n\t\t{\r\n\t\t\tif (base.isServer)\r\n\t\t\t{\r\n\t\t\t\tusing (TimeWarning.New(\"ImpactEffect\", 20))\r\n\t\t\t\t{\r\n\t\t\t\t\tEffect.server.ImpactEffect(info);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tusing (TimeWarning.New(\"ImpactEffect\", 20))\r\n\t\t\t\t{\r\n\t\t\t\t\tEffect.client.ImpactEffect(info);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (base.isServer && !base.IsDestroyed)\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"UpdateItemCondition\", 50))\r\n\t\t\t{\r\n\t\t\t\tUpdateItemCondition(info);\r\n\t\t\t}\r\n\t\t\tStartAttackCooldown(repeatDelay);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMlrsFired","Parameters":"(MLRS,BasePlayer)","ClassName":"MLRS","MethodCode":"\r\n\tpublic void Fire(BasePlayer owner)\r\n\t{\r\n\t\tUpdateStorageState();\r\n\t\tif (CanFire && !(_mounted == null) && Interface.CallHook(\"OnMlrsFire\", this, owner) == null)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved6, b: true);\r\n\t\t\tradiusModIndex = 0;\r\n\t\t\tnextRocketIndex = Mathf.Min(RocketAmmoCount - 1, rocketTubes.Length - 1);\r\n\t\t\trocketOwnerRef.Set(owner);\r\n\t\t\tInvokeRepeating(FireNextRocket, 0f, 0.5f);\r\n\t\t\tInterface.CallHook(\"OnMlrsFired\", this, owner);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseLockedEntity","Parameters":"(BasePlayer,CodeLock)","ClassName":"CodeLock","MethodCode":"\r\n\tpublic override bool OnTryToOpen(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUseLockedEntity\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!IsLocked())\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (whitelistPlayers.Contains(player.userID) || guestPlayers.Contains(player.userID))\r\n\t\t{\r\n\t\t\tDoEffect(effectUnlocked.resourcePath);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tDoEffect(effectDenied.resourcePath);\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnPlayerLootEnd","Parameters":"(PlayerLoot)","ClassName":"PlayerLoot","MethodCode":"\r\n\tpublic void Clear()\r\n\t{\r\n\t\tif (!IsLooting())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnPlayerLootEnd\", this);\r\n\t\tbase.baseEntity.HasClosedLoot();\r\n\t\tMarkDirty();\r\n\t\tif ((bool)entitySource)\r\n\t\t{\r\n\t\t\tentitySource.SendMessage(\"PlayerStoppedLooting\", base.baseEntity, SendMessageOptions.DontRequireReceiver);\r\n\t\t}\r\n\t\tforeach (ItemContainer container in containers)\r\n\t\t{\r\n\t\t\tif (container != null)\r\n\t\t\t{\r\n\t\t\t\tcontainer.onDirty -= MarkDirty;\r\n\t\t\t}\r\n\t\t}\r\n\t\tClearContainers();\r\n\t\tentitySource = null;\r\n\t\titemSource = null;\r\n\t}\r\n"},{"Name":"CanBeHomingTargeted","Parameters":"(AttackHeliPilotFlare)","ClassName":"AttackHeliPilotFlare","MethodCode":"\r\n\tpublic bool IsValidHomingTarget()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeHomingTargeted\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnRemoteIdentifierUpdate","Parameters":"(PoweredRemoteControlEntity,string)","ClassName":"PoweredRemoteControlEntity","MethodCode":"\r\n\tpublic void UpdateIdentifier(string newID, bool clientSend = false)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnRemoteIdentifierUpdate\", this, newID) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_ = rcIdentifier;\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tif (!RemoteControlEntity.IDInUse(newID))\r\n\t\t\t{\r\n\t\t\t\trcIdentifier = newID;\r\n\t\t\t}\r\n\t\t\tif (!Rust.Application.isLoadingSave)\r\n\t\t\t{\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntitySnapshot","Parameters":"(BaseNetworkable,Network.Connection)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void SendEntitySnapshot(BaseNetworkable ent)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnEntitySnapshot\", ent, net.connection) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"SendEntitySnapshot\"))\r\n\t\t{\r\n\t\t\tif (!(ent == null) && ent.net != null && ent.ShouldNetworkTo(this))\r\n\t\t\t{\r\n\t\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\t\tnet.connection.validate.entityUpdates++;\r\n\t\t\t\tSaveInfo saveInfo = default(SaveInfo);\r\n\t\t\t\tsaveInfo.forConnection = net.connection;\r\n\t\t\t\tsaveInfo.forDisk = false;\r\n\t\t\t\tSaveInfo saveInfo2 = saveInfo;\r\n\t\t\t\tnetWrite.PacketID(Message.Type.Entities);\r\n\t\t\t\tnetWrite.UInt32(net.connection.validate.entityUpdates);\r\n\t\t\t\tent.ToStreamForNetwork(netWrite, saveInfo2);\r\n\t\t\t\tnetWrite.Send(new SendInfo(net.connection));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTurretIdentifierSet","Parameters":"(AutoTurret,BasePlayer,string)","ClassName":"AutoTurret","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.MaxDistance(3f)]\r\n\tpublic void Server_SetID(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player == null || !CanChangeID(msg.player))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = msg.read.String();\r\n\t\tif (string.IsNullOrEmpty(text) || ComputerStation.IsValidIdentifier(text))\r\n\t\t{\r\n\t\t\tstring text2 = msg.read.String();\r\n\t\t\tif (ComputerStation.IsValidIdentifier(text2) && text == GetIdentifier() && Interface.CallHook(\"OnTurretIdentifierSet\", this, msg.player, text2) == null)\r\n\t\t\t{\r\n\t\t\t\tDebug.Log(\"SetID success!\");\r\n\t\t\t\tUpdateIdentifier(text2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerKeepAlive","Parameters":"(BasePlayer,BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_KeepAlive(RPCMessage msg)\r\n\t{\r\n\t\tif (msg.player.CanInteract() && !(msg.player == this) && IsWounded() && Interface.CallHook(\"OnPlayerKeepAlive\", this, msg.player) == null)\r\n\t\t{\r\n\t\t\tProlongWounding(10f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCargoPlaneSignaled","Parameters":"(BaseEntity,SupplySignal)","ClassName":"SupplySignal","MethodCode":"\r\n\tpublic override void Explode()\r\n\t{\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(EntityToCreate.resourcePath);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tVector3 vector = new Vector3(UnityEngine.Random.Range(-20f, 20f), 0f, UnityEngine.Random.Range(-20f, 20f));\r\n\t\t\tbaseEntity.SendMessage(\"InitDropPosition\", base.transform.position + vector, SendMessageOptions.DontRequireReceiver);\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t\tInterface.CallHook(\"OnCargoPlaneSignaled\", baseEntity, this);\r\n\t\t}\r\n\t\tInvoke(FinishUp, 210f);\r\n\t\tSetFlag(Flags.On, b: true);\r\n\t\tSendNetworkUpdateImmediate();\r\n\t}\r\n"},{"Name":"OnBigWheelWin","Parameters":"(BigWheelGame,Item,BigWheelBettingTerminal,int)","ClassName":"BigWheelGame","MethodCode":"\r\n\tpublic void Payout()\r\n\t{\r\n\t\tHitNumber currentHitType = GetCurrentHitType();\r\n\t\tGuid value = Guid.NewGuid();\r\n\t\tforeach (BigWheelBettingTerminal terminal in terminals)\r\n\t\t{\r\n\t\t\tif (terminal.isClient)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tbool flag = false;\r\n\t\t\tbool flag2 = false;\r\n\t\t\tItem slot = terminal.inventory.GetSlot((int)currentHitType.hitType);\r\n\t\t\tif (slot != null)\r\n\t\t\t{\r\n\t\t\t\tint num = currentHitType.ColorToMultiplier(currentHitType.hitType);\r\n\t\t\t\tint amount = slot.amount;\r\n\t\t\t\tif (Interface.CallHook(\"OnBigWheelWin\", this, slot, terminal, num) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tslot.amount += slot.amount * num;\r\n\t\t\t\t\tslot.RemoveFromContainer();\r\n\t\t\t\t\tslot.MoveToContainer(terminal.inventory, 5);\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGamblingResult(terminal.lastPlayer, terminal, amount, slot.amount, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < 5; i++)\r\n\t\t\t{\r\n\t\t\t\tItem slot2 = terminal.inventory.GetSlot(i);\r\n\t\t\t\tif (slot2 != null && Interface.CallHook(\"OnBigWheelLoss\", this, slot2, terminal) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tFacepunch.Rust.Analytics.Azure.OnGamblingResult(terminal.lastPlayer, terminal, slot2.amount, 0, value);\r\n\t\t\t\t\tslot2.Remove();\r\n\t\t\t\t\tflag2 = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (flag || flag2)\r\n\t\t\t{\r\n\t\t\t\tterminal.ClientRPC(RpcTarget.NetworkGroup(\"WinOrLoseSound\"), flag);\r\n\t\t\t}\r\n\t\t}\r\n\t\tItemManager.DoRemoves();\r\n\t\tSetTerminalsLocked(isLocked: false);\r\n\t}\r\n"},{"Name":"CanEntityBeHostile","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic override bool IsHostile()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanEntityBeHostile\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn State.unHostileTimestamp > TimeEx.currentTimestamp;\r\n\t}\r\n"},{"Name":"OnSamSiteModeToggle","Parameters":"(SamSite,BasePlayer,bool)","ClassName":"SamSite","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server.CallsPerSecond(1uL)]\r\n\tprivate void ToggleDefenderMode(RPCMessage msg)\r\n\t{\r\n\t\tif (staticRespawn)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (!(player == null) && player.CanBuild())\r\n\t\t{\r\n\t\t\tbool flag = msg.read.Bit();\r\n\t\t\tif (flag != IsInDefenderMode() && Interface.CallHook(\"OnSamSiteModeToggle\", this, player, flag) == null)\r\n\t\t\t{\r\n\t\t\t\tSetFlag(Flag_ManuallySetMode, flag);\r\n\t\t\t\tSetFlag(Flag_TargetMode, flag);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnHelicopterAttack","Parameters":"(CH47HelicopterAIController,HitInfo)","ClassName":"CH47HelicopterAIController","MethodCode":"\r\n\tpublic override void OnAttacked(HitInfo info)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnHelicopterAttack\", this, info) == null)\r\n\t\t{\r\n\t\t\tbase.OnAttacked(info);\r\n\t\t\tInitiateAnger();\r\n\t\t\tSetFlag(Flags.Reserved9, base.healthFraction <= 0.8f);\r\n\t\t\tSetFlag(Flags.OnFire, base.healthFraction <= 0.33f);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnSleepingBagDestroyed","Parameters":"(SleepingBag,ulong)","ClassName":"SleepingBag","MethodCode":"\r\n\tpublic static bool DestroyBag(ulong userID, NetworkableId sleepingBag)\r\n\t{\r\n\t\tSleepingBag sleepingBag2 = FindForPlayer(userID, ignoreTimers: true).FirstOrDefault((SleepingBag x) => x.net.ID == sleepingBag);\r\n\t\tif (sleepingBag2 == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnSleepingBagDestroy\", sleepingBag2, userID) != null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tRemoveBagForPlayer(sleepingBag2, sleepingBag2.deployerUserID);\r\n\t\tsleepingBag2.deployerUserID = 0uL;\r\n\t\tsleepingBag2.SendNetworkUpdate();\r\n\t\tBasePlayer basePlayer = BasePlayer.FindByID(userID);\r\n\t\tif (basePlayer != null)\r\n\t\t{\r\n\t\t\tbasePlayer.SendRespawnOptions();\r\n\t\t\tInterface.CallHook(\"OnSleepingBagDestroyed\", sleepingBag2, userID);\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnBagUnclaimed(basePlayer, sleepingBag2);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"CanAdministerVending","Parameters":"(BasePlayer,NPCVendingMachine)","ClassName":"NPCVendingMachine","MethodCode":"\r\n\tpublic override bool CanPlayerAdmin(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanAdministerVending\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnHelicopterTarget","Parameters":"(HelicopterTurret,BaseCombatEntity)","ClassName":"HelicopterTurret","MethodCode":"\r\n\tpublic void SetTarget(BaseCombatEntity newTarget)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnHelicopterTarget\", this, newTarget) == null)\r\n\t\t{\r\n\t\t\t_target = newTarget;\r\n\t\t\tUpdateTargetVisibility();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFishCaught","Parameters":"(ItemDefinition,BaseFishingRod,BasePlayer)","ClassName":"BaseFishingRod","MethodCode":"\r\n\tprivate void CatchProcessBudgeted()\r\n\t{\r\n\t\tinQueue = false;\r\n\t\tFishingBobber fishingBobber = currentBobber.Get(serverside: true);\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (ownerPlayer == null || ownerPlayer.IsSleeping() || ownerPlayer.IsWounded() || ownerPlayer.IsDead() || fishingBobber == null)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.UserRequested);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 position = ownerPlayer.transform.position;\r\n\t\tfloat num = Vector3.Angle((fishingBobber.transform.position.WithY(0f) - position.WithY(0f)).normalized, ownerPlayer.eyes.HeadForward().WithY(0f));\r\n\t\tfloat num2 = Vector3.Distance(position, fishingBobber.transform.position.WithY(position.y));\r\n\t\tif (num > ((num2 > 1.2f) ? 60f : 180f))\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.BadAngle);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (num2 > 1.2f && (float)lastSightCheck > 0.4f)\r\n\t\t{\r\n\t\t\tif (!GamePhysics.LineOfSight(ownerPlayer.eyes.position, fishingBobber.transform.position, 1084293377))\r\n\t\t\t{\r\n\t\t\t\tServer_Cancel(FailReason.Obstructed);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlastSightCheck = 0f;\r\n\t\t}\r\n\t\tif (Vector3.Distance(position, fishingBobber.transform.position) > MaxCastDistance * 2f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TooFarAway);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Vector3.Distance(playerStartPosition, position) > 1f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.PlayerMoved);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (CurrentState == CatchState.Waiting)\r\n\t\t{\r\n\t\t\tif ((float)catchTime < 0f)\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_HookedSomething\"));\r\n\t\t\t\tCurrentState = CatchState.Catching;\r\n\t\t\t\tfishingBobber.SetFlag(Flags.Reserved1, b: true);\r\n\t\t\t\tnextFishStateChange = 0f;\r\n\t\t\t\tfishCatchDuration = 0f;\r\n\t\t\t\tstrainTimer = 0f;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tFishState fishState = currentFishState;\r\n\t\tif ((float)nextFishStateChange < 0f)\r\n\t\t{\r\n\t\t\tfloat num3 = Mathx.RemapValClamped(fishingBobber.TireAmount, 0f, 20f, 0f, 1f);\r\n\t\t\tif (currentFishState != 0)\r\n\t\t\t{\r\n\t\t\t\tcurrentFishState = (FishState)0;\r\n\t\t\t\tnextFishStateChange = UnityEngine.Random.Range(2f, 4f) * (num3 + 1f);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnextFishStateChange = UnityEngine.Random.Range(3f, 7f) * (1f - num3);\r\n\t\t\t\tif (UnityEngine.Random.Range(0, 100) < 50)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState = FishState.PullingLeft;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState = FishState.PullingRight;\r\n\t\t\t\t}\r\n\t\t\t\tif (UnityEngine.Random.Range(0, 100) > 60 && Vector3.Distance(fishingBobber.transform.position, ownerPlayer.transform.position) < MaxCastDistance - 2f)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentFishState |= FishState.PullingBack;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((float)fishCatchDuration > 120f)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TimeOut);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbool flag = ownerPlayer.serverInput.IsDown(BUTTON.RIGHT);\r\n\t\tbool flag2 = ownerPlayer.serverInput.IsDown(BUTTON.LEFT);\r\n\t\tbool flag3 = HasReelInInput(ownerPlayer.serverInput);\r\n\t\tif (flag2 && flag)\r\n\t\t{\r\n\t\t\tflag2 = (flag = false);\r\n\t\t}\r\n\t\tUpdateFlags(flag2, flag, flag3);\r\n\t\tif (CurrentState == CatchState.Waiting)\r\n\t\t{\r\n\t\t\tflag = (flag2 = (flag3 = false));\r\n\t\t}\r\n\t\tif (flag2 && !AllowPullInDirection(-ownerPlayer.eyes.HeadRight(), fishingBobber.transform.position))\r\n\t\t{\r\n\t\t\tflag2 = false;\r\n\t\t}\r\n\t\tif (flag && !AllowPullInDirection(ownerPlayer.eyes.HeadRight(), fishingBobber.transform.position))\r\n\t\t{\r\n\t\t\tflag = false;\r\n\t\t}\r\n\t\tfishingBobber.ServerMovementUpdate(flag2, flag, flag3, ref currentFishState, position, fishableModifier);\r\n\t\tbool flag4 = false;\r\n\t\tfloat num4 = 0f;\r\n\t\tif (flag3 || flag2 || flag)\r\n\t\t{\r\n\t\t\tflag4 = true;\r\n\t\t\tnum4 = 0.5f;\r\n\t\t}\r\n\t\tif (currentFishState != 0 && flag4)\r\n\t\t{\r\n\t\t\tif (currentFishState.Contains(FishState.PullingBack) && flag3)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 1.5f;\r\n\t\t\t}\r\n\t\t\telse if ((currentFishState.Contains(FishState.PullingLeft) || currentFishState.Contains(FishState.PullingRight)) && flag3)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 1.2f;\r\n\t\t\t}\r\n\t\t\telse if (currentFishState.Contains(FishState.PullingLeft) && flag)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 0.8f;\r\n\t\t\t}\r\n\t\t\telse if (currentFishState.Contains(FishState.PullingRight) && flag2)\r\n\t\t\t{\r\n\t\t\t\tnum4 = 0.8f;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (flag3 && currentFishState != 0)\r\n\t\t{\r\n\t\t\tnum4 += 1f;\r\n\t\t}\r\n\t\tnum4 *= fishableModifier.StrainModifier * GlobalStrainSpeedMultiplier;\r\n\t\tif (flag4)\r\n\t\t{\r\n\t\t\tstrainTimer += UnityEngine.Time.deltaTime * num4;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstrainTimer = Mathf.MoveTowards(strainTimer, 0f, UnityEngine.Time.deltaTime * 1.5f);\r\n\t\t}\r\n\t\tfloat num5 = strainTimer / 6f;\r\n\t\tSetFlag(Flags.Reserved1, flag4 && num5 > 0.25f);\r\n\t\tif ((float)lastStrainUpdate > 0.4f || fishState != currentFishState)\r\n\t\t{\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_UpdateFishState\"), (int)currentFishState, num5);\r\n\t\t\tlastStrainUpdate = 0f;\r\n\t\t}\r\n\t\tif (strainTimer > 7f || ForceFail)\r\n\t\t{\r\n\t\t\tServer_Cancel(FailReason.TensionBreak);\r\n\t\t}\r\n\t\telse if (num2 <= FishCatchDistance || ForceSuccess)\r\n\t\t{\r\n\t\t\tCurrentState = CatchState.Caught;\r\n\t\t\tif (currentFishTarget != null)\r\n\t\t\t{\r\n\t\t\t\tItem item = ItemManager.Create(currentFishTarget, 1, 0uL);\r\n\t\t\t\tobject obj = Interface.CallHook(\"CanCatchFish\", ownerPlayer, this, item);\r\n\t\t\t\tif (obj is bool && !(bool)obj)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj2 = Interface.CallHook(\"OnFishCatch\", item, this, ownerPlayer);\r\n\t\t\t\tif (obj2 is Item && obj2 as Item != item)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.Remove();\r\n\t\t\t\t\titem = (Item)obj2;\r\n\t\t\t\t}\r\n\t\t\t\townerPlayer.GiveItem(item, GiveItemReason.Crafted);\r\n\t\t\t\tif (currentFishTarget.shortname == \"skull.human\")\r\n\t\t\t\t{\r\n\t\t\t\t\titem.name = RandomUsernames.Get(UnityEngine.Random.Range(0, 1000));\r\n\t\t\t\t}\r\n\t\t\t\tif (Rust.GameInfo.HasAchievements && !string.IsNullOrEmpty(fishableModifier.SteamStatName))\r\n\t\t\t\t{\r\n\t\t\t\t\townerPlayer.stats.Add(fishableModifier.SteamStatName, 1);\r\n\t\t\t\t\townerPlayer.stats.Save(forceSteamSave: true);\r\n\t\t\t\t\tFishLookup.Instance.CheckCatchAllAchievement(ownerPlayer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Server.FishCaught(currentFishTarget);\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_OnCaughtFish\"), currentFishTarget.itemid);\r\n\t\t\townerPlayer.SignalBroadcast(Signal.Alt_Attack);\r\n\t\t\tInvoke(ResetLine, 6f);\r\n\t\t\tfishingBobber.Kill();\r\n\t\t\tcurrentBobber.Set(null);\r\n\t\t\tCancelInvoke(CatchProcess);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnFishCaught\", currentFishTarget, this, ownerPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanCreateWorldProjectile","Parameters":"(HitInfo,ItemDefinition)","ClassName":"BasePlayer","MethodCode":"\r\n\tprotected virtual void CreateWorldProjectile(HitInfo info, ItemDefinition itemDef, ItemModProjectile itemMod, Projectile projectilePrefab, Item recycleItem)\r\n\t{\r\n\t\tif (Interface.CallHook(\"CanCreateWorldProjectile\", info, itemDef) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 projectileVelocity = info.ProjectileVelocity;\r\n\t\tItem item = ((recycleItem != null) ? recycleItem : ItemManager.Create(itemDef, 1, 0uL));\r\n\t\tif (Interface.CallHook(\"OnWorldProjectileCreate\", info, item) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = null;\r\n\t\tif (!info.DidHit)\r\n\t\t{\r\n\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\tbaseEntity.Kill(DestroyMode.Gib);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (projectilePrefab.breakProbability > 0f && UnityEngine.Random.value <= projectilePrefab.breakProbability)\r\n\t\t{\r\n\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\tbaseEntity.Kill(DestroyMode.Gib);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (projectilePrefab.conditionLoss > 0f)\r\n\t\t{\r\n\t\t\titem.LoseCondition(projectilePrefab.conditionLoss * 100f);\r\n\t\t\tif (item.isBroken)\r\n\t\t\t{\r\n\t\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\t\tbaseEntity.Kill(DestroyMode.Gib);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (projectilePrefab.stickProbability > 0f && UnityEngine.Random.value <= projectilePrefab.stickProbability)\r\n\t\t{\r\n\t\t\tbaseEntity = ((info.HitEntity == null) ? item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized)) : ((info.HitBone != 0) ? item.CreateWorldObject(info.HitPositionLocal, Quaternion.LookRotation(info.HitNormalLocal * -1f), info.HitEntity, info.HitBone) : item.CreateWorldObject(info.HitPositionLocal, Quaternion.LookRotation(info.HitEntity.transform.InverseTransformDirection(projectileVelocity.normalized)), info.HitEntity)));\r\n\t\t\tDroppedItem droppedItem = baseEntity as DroppedItem;\r\n\t\t\tif (droppedItem != null)\r\n\t\t\t{\r\n\t\t\t\tdroppedItem.StickIn();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.GetComponent<Rigidbody>().isKinematic = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbaseEntity = item.CreateWorldObject(info.HitPositionWorld, Quaternion.LookRotation(projectileVelocity.normalized));\r\n\t\t\tRigidbody component = baseEntity.GetComponent<Rigidbody>();\r\n\t\t\tcomponent.AddForce(projectileVelocity.normalized * 200f);\r\n\t\t\tcomponent.WakeUp();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnInventoryItemsCount","Parameters":"(PlayerInventory,int)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic int GetAmount(int itemid)\r\n\t{\r\n\t\tif (itemid == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnInventoryItemsCount\", this, itemid);\r\n\t\tif (obj is int)\r\n\t\t{\r\n\t\t\treturn (int)obj;\r\n\t\t}\r\n\t\tint num = 0;\r\n\t\tif (containerMain != null)\r\n\t\t{\r\n\t\t\tnum += containerMain.GetAmount(itemid, onlyUsableAmounts: true);\r\n\t\t}\r\n\t\tif (containerBelt != null)\r\n\t\t{\r\n\t\t\tnum += containerBelt.GetAmount(itemid, onlyUsableAmounts: true);\r\n\t\t}\r\n\t\tif (containerWear != null)\r\n\t\t{\r\n\t\t\tnum += containerWear.GetAmount(itemid, onlyUsableAmounts: true);\r\n\t\t}\r\n\t\treturn num;\r\n\t}\r\n"},{"Name":"OnMlrsRocketFired","Parameters":"(MLRS,ServerProjectile)","ClassName":"MLRS","MethodCode":"\r\n\tpublic void FireNextRocket()\r\n\t{\r\n\t\tRocketAmmoCount = GetRocketContainer().inventory.GetAmmoAmount(AmmoTypes.MLRS_ROCKET);\r\n\t\tif (nextRocketIndex < 0 || nextRocketIndex >= RocketAmmoCount || IsBroken())\r\n\t\t{\r\n\t\t\tEndFiring();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tStorageContainer rocketContainer = GetRocketContainer();\r\n\t\tVector3 firingPos = firingPoint.position + firingPoint.rotation * rocketTubes[nextRocketIndex].firingOffset;\r\n\t\tfloat num = 1f;\r\n\t\tif (radiusModIndex < radiusMods.Length)\r\n\t\t{\r\n\t\t\tnum = radiusMods[radiusModIndex];\r\n\t\t}\r\n\t\tradiusModIndex++;\r\n\t\tVector2 vector = UnityEngine.Random.insideUnitCircle * (targetAreaRadius - RocketDamageRadius) * num;\r\n\t\tVector3 target = TrueHitPos + new Vector3(vector.x, 0f, vector.y);\r\n\t\tfloat requiredGravity;\r\n\t\tVector3 aimToTarget = Ballistics.GetAimToTarget(firingPoint.position, target, rocketSpeed, vRotMax, rocketBaseGravity, minRange, out requiredGravity);\r\n\t\tif (TryFireProjectile(rocketContainer, AmmoTypes.MLRS_ROCKET, firingPos, aimToTarget, rocketOwnerRef.Get(serverside: true) as BasePlayer, 0f, 0f, out var projectile))\r\n\t\t{\r\n\t\t\tprojectile.gravityModifier = requiredGravity / (0f - UnityEngine.Physics.gravity.y);\r\n\t\t\tInterface.CallHook(\"OnMlrsRocketFired\", this, projectile);\r\n\t\t\tnextRocketIndex--;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tEndFiring();\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBackpackDrop","Parameters":"(Item,PlayerInventory)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic void TryDropBackpack()\r\n\t{\r\n\t\tItem anyBackpack = GetAnyBackpack();\r\n\t\tif (anyBackpack != null && base.baseEntity.isServer && Interface.CallHook(\"OnBackpackDrop\", anyBackpack, this) == null)\r\n\t\t{\r\n\t\t\tanyBackpack.Drop(base.baseEntity.GetDropPosition(), base.baseEntity.GetDropVelocity());\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanDemolish","Parameters":"(BasePlayer,StabilityEntity)","ClassName":"StabilityEntity","MethodCode":"\r\n\tpublic bool CanDemolish(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanDemolish\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (CanBeDemolished && IsDemolishable())\r\n\t\t{\r\n\t\t\treturn HasDemolishPrivilege(player);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnEntityVisibilityCheck","Parameters":"(BaseEntity,BasePlayer,uint,string,float)","ClassName":"BaseEntity","MethodCode":"\r\n\t\t\tpublic static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)\r\n\t\t\t{\r\n\t\t\t\tif (ent == null || player == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tobject obj = Interface.CallHook(\"OnEntityVisibilityCheck\", ent, player, id, debugName, maximumDistance);\r\n\t\t\t\tif (obj is bool)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (bool)obj;\r\n\t\t\t\t}\r\n\t\t\t\tif (GamePhysics.LineOfSight(player.eyes.center, player.eyes.position, 1218519041))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!ent.IsVisible(player.eyes.HeadRay(), 1218519041, maximumDistance))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ent.IsVisible(player.eyes.position, maximumDistance);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n"},{"Name":"OnScientistRecalled","Parameters":"(BradleyAPC,ScientistNPC)","ClassName":"BradleyAPC","MethodCode":"\r\n\tpublic void OnScientistMounted(ScientistNPC scientist)\r\n\t{\r\n\t\tif (!(scientist == null))\r\n\t\t{\r\n\t\t\tif (scientistPrefabLookUp.TryGetValue(scientist.prefabID, out var value))\r\n\t\t\t{\r\n\t\t\t\tmountedScientistPrefabs.Add(value);\r\n\t\t\t}\r\n\t\t\tactiveScientists.Remove(scientist);\r\n\t\t\tnumberOfScientistsToSpawn++;\r\n\t\t\tInterface.CallHook(\"OnScientistRecalled\", this, scientist);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUpdateSign","Parameters":"(BasePlayer,CarvablePumpkin)","ClassName":"CarvablePumpkin","MethodCode":"\r\n\tpublic virtual bool CanUpdateSign(BasePlayer player)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanUpdateSign\", player, this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (player.IsAdmin || player.IsDeveloper)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!player.CanBuild())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (IsLocked())\r\n\t\t{\r\n\t\t\treturn (ulong)player.userID == base.OwnerID;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnExperimentStart","Parameters":"(Workbench,BasePlayer)","ClassName":"Workbench","MethodCode":"\r\n\t[RPC_Server.IsVisible(3f)]\r\n\t[RPC_Server]\r\n\tpublic void RPC_BeginExperiment(RPCMessage msg)\r\n\t{\r\n\t\tBasePlayer player = msg.player;\r\n\t\tif (player == null || IsWorking())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPersistantPlayer persistantPlayerInfo = player.PersistantPlayerInfo;\r\n\t\tint num = UnityEngine.Random.Range(0, experimentalItems.subSpawn.Length);\r\n\t\tfor (int i = 0; i < experimentalItems.subSpawn.Length; i++)\r\n\t\t{\r\n\t\t\tint num2 = i + num;\r\n\t\t\tif (num2 >= experimentalItems.subSpawn.Length)\r\n\t\t\t{\r\n\t\t\t\tnum2 -= experimentalItems.subSpawn.Length;\r\n\t\t\t}\r\n\t\t\tItemDefinition itemDef = experimentalItems.subSpawn[num2].category.items[0].itemDef;\r\n\t\t\tif ((bool)itemDef.Blueprint && !itemDef.Blueprint.defaultBlueprint && itemDef.Blueprint.userCraftable && itemDef.Blueprint.isResearchable && !itemDef.Blueprint.NeedsSteamItem && !itemDef.Blueprint.NeedsSteamDLC && !persistantPlayerInfo.unlockedItems.Contains(itemDef.itemid))\r\n\t\t\t{\r\n\t\t\t\tpendingBlueprint = itemDef;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pendingBlueprint == null)\r\n\t\t{\r\n\t\t\tplayer.ChatMessage(\"You have already unlocked everything for this workbench tier.\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnExperimentStart\", this, player) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tItem slot = base.inventory.GetSlot(0);\r\n\t\t\tif (slot != null)\r\n\t\t\t{\r\n\t\t\t\tif (!slot.MoveToContainer(player.inventory.containerMain))\r\n\t\t\t\t{\r\n\t\t\t\t\tslot.Drop(GetDropPosition(), GetDropVelocity());\r\n\t\t\t\t}\r\n\t\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\t}\r\n\t\t\tif (experimentStartEffect.isValid)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(experimentStartEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);\r\n\t\t\t}\r\n\t\t\tSetFlag(Flags.On, b: true);\r\n\t\t\tbase.inventory.SetLocked(isLocked: true);\r\n\t\t\tCancelInvoke(ExperimentComplete);\r\n\t\t\tInvoke(ExperimentComplete, 5f);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t\tInterface.CallHook(\"OnExperimentStarted\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanSetRelationship","Parameters":"(BasePlayer,BasePlayer,RelationshipManager.RelationshipType,int)","ClassName":"RelationshipManager","MethodCode":"\r\n\tpublic void SetRelationship(BasePlayer player, BasePlayer otherPlayer, RelationshipType type, int weight = 1, bool sendImmediate = false)\r\n\t{\r\n\t\tif (!contacts)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tulong num = player.userID.Get();\r\n\t\tulong num2 = otherPlayer.userID.Get();\r\n\t\tif (player == null || player == otherPlayer || player.IsNpc || (otherPlayer != null && otherPlayer.IsNpc) || Interface.CallHook(\"CanSetRelationship\", player, otherPlayer, type, weight) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPlayerRelationships playerRelationships = GetRelationships(num);\r\n\t\tif (!CleanupOldContacts(playerRelationships, num))\r\n\t\t{\r\n\t\t\tCleanupOldContacts(playerRelationships, num, RelationshipType.Enemy);\r\n\t\t}\r\n\t\tPlayerRelationshipInfo relations = playerRelationships.GetRelations(num2);\r\n\t\tbool flag = false;\r\n\t\tif (relations.type != type)\r\n\t\t{\r\n\t\t\tflag = true;\r\n\t\t\trelations.weight = 0;\r\n\t\t}\r\n\t\trelations.type = type;\r\n\t\trelations.weight += weight;\r\n\t\tfloat num3 = UnityEngine.Time.realtimeSinceStartup - relations.lastMugshotTime;\r\n\t\tif (flag || relations.mugshotCrc == 0 || num3 >= mugshotUpdateInterval)\r\n\t\t{\r\n\t\t\tbool flag2 = otherPlayer.IsAlive();\r\n\t\t\tbool num4 = player.SecondsSinceAttacked > 10f && !player.IsAiming;\r\n\t\t\tfloat num5 = 100f;\r\n\t\t\tif (num4)\r\n\t\t\t{\r\n\t\t\t\tVector3 normalized = (otherPlayer.eyes.position - player.eyes.position).normalized;\r\n\t\t\t\tbool flag3 = Vector3.Dot(player.eyes.HeadForward(), normalized) >= 0.6f;\r\n\t\t\t\tfloat num6 = Vector3Ex.Distance2D(player.transform.position, otherPlayer.transform.position);\r\n\t\t\t\tif (flag2 && num6 < num5 && flag3)\r\n\t\t\t\t{\r\n\t\t\t\t\tClientRPC(RpcTarget.Player(\"CLIENT_DoMugshot\", player), num2);\r\n\t\t\t\t\trelations.lastMugshotTime = UnityEngine.Time.realtimeSinceStartup;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sendImmediate)\r\n\t\t{\r\n\t\t\tSendRelationshipsFor(player);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tMarkRelationshipsDirtyFor(player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerSleepEnd","Parameters":"(BasePlayer)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic virtual void EndSleeping()\r\n\t{\r\n\t\tif (IsSleeping() && Interface.CallHook(\"OnPlayerSleepEnd\", this) == null)\r\n\t\t{\r\n\t\t\tif (IsRestrained)\r\n\t\t\t{\r\n\t\t\t\tinventory.SetLockedByRestraint(flag: true);\r\n\t\t\t}\r\n\t\t\tSetPlayerFlag(PlayerFlags.Sleeping, b: false);\r\n\t\t\tsleepStartTime = -1f;\r\n\t\t\tsleepingPlayerList.Remove(this);\r\n\t\t\tif ((ulong)userID < 10000000 && !bots.Contains(this))\r\n\t\t\t{\r\n\t\t\t\tbots.Add(this);\r\n\t\t\t}\r\n\t\t\tCancelInvoke(ScheduledDeath);\r\n\t\t\tInvokeRepeating(InventoryUpdate, 1f, 0.1f * UnityEngine.Random.Range(0.99f, 1.01f));\r\n\t\t\tif (RelationshipManager.TeamsEnabled())\r\n\t\t\t{\r\n\t\t\t\tInvokeRandomized(TeamUpdate, 1f, 4f, 1f);\r\n\t\t\t}\r\n\t\t\tInvokeRandomized(UpdateClanLastSeen, 300f, 300f, 60f);\r\n\t\t\tEnablePlayerCollider();\r\n\t\t\tAddPlayerRigidbody();\r\n\t\t\tSetServerFall(wantsOn: false);\r\n\t\t\tif (HasParent())\r\n\t\t\t{\r\n\t\t\t\tSetParent(null, worldPositionStays: true);\r\n\t\t\t\tRemoveFromTriggers();\r\n\t\t\t\tForceUpdateTriggers();\r\n\t\t\t}\r\n\t\t\tinventory.containerMain.OnChanged();\r\n\t\t\tinventory.containerBelt.OnChanged();\r\n\t\t\tinventory.containerWear.OnChanged();\r\n\t\t\tInterface.CallHook(\"OnPlayerSleepEnded\", this);\r\n\t\t\tEACServer.LogPlayerSpawn(this);\r\n\t\t\tif (TotalPingCount > 0)\r\n\t\t\t{\r\n\t\t\t\tSendPingsToClient();\r\n\t\t\t}\r\n\t\t\tif (TutorialIsland.ShouldPlayerBeAskedToStartTutorial(this))\r\n\t\t\t{\r\n\t\t\t\tClientRPC(RpcTarget.Player(\"PromptToStartTutorial\", this));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnMissionStart","Parameters":"(BaseMission,BaseMission.MissionInstance,BasePlayer)","ClassName":"BaseMission","MethodCode":"\r\n\tpublic virtual void MissionStart(MissionInstance instance, BasePlayer assignee)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnMissionStart\", this, instance, assignee) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < objectives.Length; i++)\r\n\t\t{\r\n\t\t\tobjectives[i].Get().MissionStarted(i, instance, assignee);\r\n\t\t}\r\n\t\tif (acceptEffect.isValid)\r\n\t\t{\r\n\t\t\tDoMissionEffect(acceptEffect.resourcePath, assignee);\r\n\t\t}\r\n\t\tMissionEntityEntry[] array = missionEntities;\r\n\t\tforeach (MissionEntityEntry missionEntityEntry in array)\r\n\t\t{\r\n\t\t\tif (missionEntityEntry.spawnOnMissionStart)\r\n\t\t\t{\r\n\t\t\t\tinstance.GetMissionEntity(missionEntityEntry.identifier, assignee);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (AllowedTutorialItems != 0)\r\n\t\t{\r\n\t\t\tassignee.SetTutorialAllowance(AllowedTutorialItems);\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnMissionStarted\", this, instance, assignee);\r\n\t}\r\n"},{"Name":"CanBuild","Parameters":"(Planner,Construction,Construction.Target)","ClassName":"Planner","MethodCode":"\r\n\tpublic virtual void DoBuild(CreateBuilding msg)\r\n\t{\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tif (!ownerPlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ConVar.AntiHack.objectplacement && ownerPlayer.TriggeredAntiHack())\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.Antihack, false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConstruction construction = PrefabAttribute.server.Find<Construction>(msg.blockID);\r\n\t\tif (construction == null)\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.CouldntFindConstruction, false);\r\n\t\t\tConstructionErrors.Log(ownerPlayer, msg.blockID.ToString());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CanAffordToPlace(construction))\r\n\t\t{\r\n\t\t\tusing (ItemAmountList itemAmountList = Facepunch.Pool.Get<ItemAmountList>())\r\n\t\t\t{\r\n\t\t\t\titemAmountList.amount = Facepunch.Pool.Get<List<float>>();\r\n\t\t\t\titemAmountList.itemID = Facepunch.Pool.Get<List<int>>();\r\n\t\t\t\tGetConstructionCost(itemAmountList, construction);\r\n\t\t\t\townerPlayer.ClientRPC(RpcTarget.Player(\"Client_OnRepairFailedResources\", ownerPlayer), itemAmountList);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!ownerPlayer.CanBuild() && !construction.canBypassBuildingPermission)\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.NoPermission, false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDeployable deployable = GetDeployable(msg.entity);\r\n\t\tif (construction.deployable != deployable)\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.DeployableMismatch, false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConstruction.Target target = default(Construction.Target);\r\n\t\tif (msg.entity.IsValid)\r\n\t\t{\r\n\t\t\ttarget.entity = BaseNetworkable.serverEntities.Find(msg.entity) as BaseEntity;\r\n\t\t\tif (target.entity == null)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.CouldntFindEntity, false);\r\n\t\t\t\tConstructionErrors.Log(ownerPlayer, msg.entity.ToString());\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tmsg.ray = new Ray(target.entity.transform.TransformPoint(msg.ray.origin), target.entity.transform.TransformDirection(msg.ray.direction));\r\n\t\t\tmsg.position = target.entity.transform.TransformPoint(msg.position);\r\n\t\t\tmsg.normal = target.entity.transform.TransformDirection(msg.normal);\r\n\t\t\tmsg.rotation = target.entity.transform.rotation * msg.rotation;\r\n\t\t\tif (msg.socket != 0)\r\n\t\t\t{\r\n\t\t\t\tstring text = StringPool.Get(msg.socket);\r\n\t\t\t\tif (text != \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\ttarget.socket = FindSocket(text, target.entity.prefabID);\r\n\t\t\t\t}\r\n\t\t\t\tif (target.socket == null)\r\n\t\t\t\t{\r\n\t\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.CouldntFindSocket, false);\r\n\t\t\t\t\tConstructionErrors.Log(ownerPlayer, msg.socket.ToString());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (target.entity is Door)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.CantDeployOnDoor, false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttarget.ray = msg.ray;\r\n\t\ttarget.onTerrain = msg.onterrain;\r\n\t\ttarget.position = msg.position;\r\n\t\ttarget.normal = msg.normal;\r\n\t\ttarget.rotation = msg.rotation;\r\n\t\ttarget.player = ownerPlayer;\r\n\t\ttarget.isHoldingShift = msg.isHoldingShift;\r\n\t\ttarget.valid = true;\r\n\t\tif (Interface.CallHook(\"CanBuild\", this, construction, target) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (ShouldParent(target.entity, deployable))\r\n\t\t{\r\n\t\t\tVector3 position = ((target.socket != null) ? target.GetWorldPosition() : target.position);\r\n\t\t\tfloat num = target.entity.Distance(position);\r\n\t\t\tif (num > 1f)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ShowToast(GameTip.Styles.Error, ConstructionErrors.ParentTooFar, false);\r\n\t\t\t\tConstructionErrors.Log(ownerPlayer, num.ToString());\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tBaseEntity baseEntity = DoBuild(target, construction);\r\n\t\tif (baseEntity != null && ownerPlayer.IsInCreativeMode && Creative.freeBuild && baseEntity is BuildingBlock buildingBlock)\r\n\t\t{\r\n\t\t\tConstructionGrade constructionGrade = construction.grades[msg.setToGrade];\r\n\t\t\tif (buildingBlock.currentGrade != constructionGrade)\r\n\t\t\t{\r\n\t\t\t\tbuildingBlock.ChangeGradeAndSkin(constructionGrade.gradeBase.type, constructionGrade.gradeBase.skin);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnInventoryNetworkUpdate","Parameters":"(PlayerInventory,ItemContainer,ProtoBuf.UpdateItemContainer,PlayerInventory.Type,PlayerInventory.NetworkInventoryMode)","ClassName":"PlayerInventory","MethodCode":"\r\n\tpublic void SendUpdatedInventoryInternal(Type type, ItemContainer container, NetworkInventoryMode mode)\r\n\t{\r\n\t\tusing UpdateItemContainer updateItemContainer = Facepunch.Pool.Get<UpdateItemContainer>();\r\n\t\tupdateItemContainer.type = (int)type;\r\n\t\tif (container != null)\r\n\t\t{\r\n\t\t\tcontainer.dirty = false;\r\n\t\t\tupdateItemContainer.container = Facepunch.Pool.Get<List<ProtoBuf.ItemContainer>>();\r\n\t\t\tbool bIncludeContainer = type != Type.Wear || mode == NetworkInventoryMode.LocalPlayer;\r\n\t\t\tupdateItemContainer.container.Add(container.Save(bIncludeContainer));\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnInventoryNetworkUpdate\", this, container, updateItemContainer, type, mode) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tswitch (mode)\r\n\t\t{\r\n\t\tcase NetworkInventoryMode.Everyone:\r\n\t\t\tbase.baseEntity.ClientRPC(RpcTarget.NetworkGroup(\"UpdatedItemContainer\"), updateItemContainer);\r\n\t\t\tbreak;\r\n\t\tcase NetworkInventoryMode.LocalPlayer:\r\n\t\t\tbase.baseEntity.ClientRPC(RpcTarget.Player(\"UpdatedItemContainer\", base.baseEntity), updateItemContainer);\r\n\t\t\tbreak;\r\n\t\tcase NetworkInventoryMode.EveryoneButLocal:\r\n\t\t\tif (base.baseEntity.net?.group?.subscribers == null)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tforeach (Connection subscriber in base.baseEntity.net.group.subscribers)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (subscriber.player is BasePlayer basePlayer && basePlayer != base.baseEntity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbase.baseEntity.ClientRPC(RpcTarget.Player(\"UpdatedItemContainer\", basePlayer), updateItemContainer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnTeamDisband","Parameters":"(RelationshipManager.PlayerTeam)","ClassName":"RelationshipManager","MethodCode":"\r\n\tpublic void DisbandTeam(PlayerTeam teamToDisband)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnTeamDisband\", teamToDisband) == null)\r\n\t\t{\r\n\t\t\tteams.Remove(teamToDisband.teamID);\r\n\t\t\tInterface.CallHook(\"OnTeamDisbanded\", teamToDisband);\r\n\t\t\tFacepunch.Pool.Free(ref teamToDisband);\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanCheckFuel","Parameters":"(EntityFuelSystem,StorageContainer,BasePlayer)","ClassName":"EntityFuelSystem","MethodCode":"\r\n\tpublic bool IsInFuelInteractionRange(BasePlayer player)\r\n\t{\r\n\t\tStorageContainer fuelContainer = GetFuelContainer();\r\n\t\tobject obj = Interface.CallHook(\"CanCheckFuel\", this, fuelContainer, player);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (fuelContainer != null)\r\n\t\t{\r\n\t\t\tfloat num = 0f;\r\n\t\t\tif (isServer)\r\n\t\t\t{\r\n\t\t\t\tnum = 3f;\r\n\t\t\t}\r\n\t\t\treturn fuelContainer.Distance(player.eyes.position) <= num;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"CanBeHomingTargeted","Parameters":"(CH47Helicopter)","ClassName":"CH47Helicopter","MethodCode":"\r\n\tpublic override bool IsValidHomingTarget()\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanBeHomingTargeted\", this);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnEntityDismounted","Parameters":"(BaseMountable,BasePlayer)","ClassName":"BaseMountable","MethodCode":"\r\n\tpublic void DismountPlayer(BasePlayer player, bool lite = false)\r\n\t{\r\n\t\tif (_mounted == null || _mounted != player || Interface.CallHook(\"CanDismountEntity\", player, this) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseVehicle baseVehicle = VehicleParent();\r\n\t\tVector3 res;\r\n\t\tif (lite)\r\n\t\t{\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t\t}\r\n\t\t\t_mounted.DismountObject();\r\n\t\t\t_mounted = null;\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t\t}\r\n\t\t\tOnPlayerDismounted(player);\r\n\t\t\tInterface.CallHook(\"OnEntityDismounted\", this, player);\r\n\t\t}\r\n\t\telse if (!GetDismountPosition(player, out res) || Distance(res) > 10f)\r\n\t\t{\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t\t}\r\n\t\t\tres = player.transform.position;\r\n\t\t\t_mounted.DismountObject();\r\n\t\t\t_mounted.MovePosition(res);\r\n\t\t\t_mounted.transform.rotation = Quaternion.identity;\r\n\t\t\t_mounted.ClientRPC(RpcTarget.Player(\"ForcePositionTo\", _mounted), res);\r\n\t\t\tBasePlayer mounted = _mounted;\r\n\t\t\t_mounted = null;\r\n\t\t\tDebug.LogWarning(\"Killing player due to invalid dismount point :\" + player.displayName + \" / \" + player.userID.Get() + \" on obj : \" + base.gameObject.name);\r\n\t\t\tmounted.Hurt(1000f, DamageType.Suicide, mounted, useProtection: false);\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t\t}\r\n\t\t\tOnPlayerDismounted(player);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t\t}\r\n\t\t\t_mounted.DismountObject();\r\n\t\t\t_mounted.transform.rotation = Quaternion.LookRotation(Vector3.forward, Vector3.up);\r\n\t\t\t_mounted.MovePosition(res);\r\n\t\t\t_mounted.SendNetworkUpdateImmediate();\r\n\t\t\t_mounted.SendModelState(force: true);\r\n\t\t\t_mounted = null;\r\n\t\t\tif (baseVehicle != null)\r\n\t\t\t{\r\n\t\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t\t}\r\n\t\t\tplayer.ForceUpdateTriggers();\r\n\t\t\tif ((bool)player.GetParentEntity())\r\n\t\t\t{\r\n\t\t\t\tBaseEntity baseEntity = player.GetParentEntity();\r\n\t\t\t\tplayer.ClientRPC(RpcTarget.Player(\"ForcePositionToParentOffset\", player), baseEntity.transform.InverseTransformPoint(res), baseEntity.net.ID);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tplayer.ClientRPC(RpcTarget.Player(\"ForcePositionTo\", player), res);\r\n\t\t\t}\r\n\t\t\tFacepunch.Rust.Analytics.Azure.OnDismountEntity(player, this, baseVehicle);\r\n\t\t\tOnPlayerDismounted(player);\r\n\t\t\tInterface.CallHook(\"OnEntityDismounted\", this, player);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnActiveItemChanged","Parameters":"(BasePlayer,Item,Item)","ClassName":"BasePlayer","MethodCode":"\r\n\tpublic void UpdateActiveItem(ItemId itemID)\r\n\t{\r\n\t\tAssert.IsTrue(base.isServer, \"Realm should be server!\");\r\n\t\tif (svActiveItemID == itemID)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (equippingBlocked)\r\n\t\t{\r\n\t\t\titemID = default(ItemId);\r\n\t\t}\r\n\t\tItem item = inventory.containerBelt.FindItemByUID(itemID);\r\n\t\tif (IsItemHoldRestricted(item))\r\n\t\t{\r\n\t\t\titemID = default(ItemId);\r\n\t\t}\r\n\t\tItem activeItem = GetActiveItem();\r\n\t\tif (Interface.CallHook(\"OnActiveItemChange\", this, activeItem, itemID) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsvActiveItemID = default(ItemId);\r\n\t\tif (activeItem != null)\r\n\t\t{\r\n\t\t\tHeldEntity heldEntity = activeItem.GetHeldEntity() as HeldEntity;\r\n\t\t\tif (heldEntity != null)\r\n\t\t\t{\r\n\t\t\t\theldEntity.SetHeld(bHeld: false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsvActiveItemID = itemID;\r\n\t\tSendNetworkUpdate();\r\n\t\tItem activeItem2 = GetActiveItem();\r\n\t\tif (activeItem2 != null)\r\n\t\t{\r\n\t\t\tHeldEntity heldEntity2 = activeItem2.GetHeldEntity() as HeldEntity;\r\n\t\t\tif (heldEntity2 != null)\r\n\t\t\t{\r\n\t\t\t\theldEntity2.SetHeld(bHeld: true);\r\n\t\t\t}\r\n\t\t\tNotifyGesturesNewItemEquipped();\r\n\t\t}\r\n\t\tinventory.UpdatedVisibleHolsteredItems();\r\n\t\tInterface.CallHook(\"OnActiveItemChanged\", this, activeItem, activeItem2);\r\n\t}\r\n"},{"Name":"OnSendCommand","Parameters":"(System.Collections.Generic.List<Network.Connection>,string,object[])","ClassName":"ConsoleNetwork","MethodCode":"\r\n\tpublic static void SendClientCommand(List<Connection> cn, string strCommand, params object[] args)\r\n\t{\r\n\t\tif (Network.Net.sv.IsConnected() && Interface.CallHook(\"OnSendCommand\", cn, strCommand, args) == null)\r\n\t\t{\r\n\t\t\tNetWrite netWrite = Network.Net.sv.StartWrite();\r\n\t\t\tnetWrite.PacketID(Message.Type.ConsoleCommand);\r\n\t\t\tnetWrite.String(ConsoleSystem.BuildCommand(strCommand, args));\r\n\t\t\tnetWrite.Send(new SendInfo(cn));\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnServerShutdown","Parameters":"()","ClassName":"ServerMgr","MethodCode":"\r\n\tinternal void Shutdown()\r\n\t{\r\n\t\tInterface.CallHook(\"IOnServerShutdown\");\r\n\t\tBasePlayer[] array = BasePlayer.activePlayerList.ToArray();\r\n\t\tfor (int i = 0; i < array.Length; i++)\r\n\t\t{\r\n\t\t\tarray[i].Kick(\"Server Shutting Down\");\r\n\t\t}\r\n\t\tConsoleSystem.Run(ConsoleSystem.Option.Server, \"server.save\");\r\n\t\tConsoleSystem.Run(ConsoleSystem.Option.Server, \"server.writecfg\");\r\n\t}\r\n"},{"Name":"OnDecayHeal","Parameters":"(DecayEntity)","ClassName":"DecayEntity","MethodCode":"\r\n\tpublic virtual void OnDecay(Decay decay, float decayDeltaTime)\r\n\t{\r\n\t\tlastDecayTick = UnityEngine.Time.time;\r\n\t\tif (HasParent() || !decay.ShouldDecay(this))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfloat num = decayDeltaTime * ConVar.Decay.scale;\r\n\t\tif (ConVar.Decay.upkeep)\r\n\t\t{\r\n\t\t\tupkeepTimer += num;\r\n\t\t\tif (upkeepTimer > 0f)\r\n\t\t\t{\r\n\t\t\t\tBuildingPrivlidge buildingPrivilege = GetBuildingPrivilege();\r\n\t\t\t\tif (buildingPrivilege != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tupkeepTimer -= buildingPrivilege.PurchaseUpkeepTime(this, Mathf.Max(upkeepTimer, 600f));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (upkeepTimer < 1f)\r\n\t\t\t{\r\n\t\t\t\tif (base.healthFraction < 1f && GetEntityHealScale() > 0f && base.SecondsSinceAttacked > 600f && Interface.CallHook(\"OnDecayHeal\", this) == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num2 = decayDeltaTime / GetEntityDecayDuration() * GetEntityHealScale();\r\n\t\t\t\t\tHeal(MaxHealth() * num2);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tupkeepTimer = 1f;\r\n\t\t}\r\n\t\tdecayTimer += num;\r\n\t\tif (decayTimer < GetEntityDecayDelay())\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"DecayTick\"))\r\n\t\t{\r\n\t\t\tfloat num3 = 1f;\r\n\t\t\tif (ConVar.Decay.upkeep)\r\n\t\t\t{\r\n\t\t\t\tif (!BypassInsideDecayMultiplier && !IsOutside())\r\n\t\t\t\t{\r\n\t\t\t\t\tnum3 *= ConVar.Decay.upkeep_inside_decay_scale;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 0; i < decayPoints.Length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tDecayPoint decayPoint = decayPoints[i];\r\n\t\t\t\t\tif (decayPoint.IsOccupied(this))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum3 -= decayPoint.protection;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnDecayDamage\", this) == null && num3 > 0f)\r\n\t\t\t{\r\n\t\t\t\tfloat num4 = num / GetEntityDecayDuration() * MaxHealth();\r\n\t\t\t\tHurt(num4 * num3 * decayVariance, DamageType.Decay);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnItemCraftCancelled","Parameters":"(ItemCraftTask,ItemCrafter)","ClassName":"ItemCrafter","MethodCode":"\r\n\tpublic bool CancelTask(int iID)\r\n\t{\r\n\t\tif (queue.Count == 0)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (owner != null && owner.IsTransferring())\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tItemCraftTask itemCraftTask = queue.FirstOrDefault((ItemCraftTask x) => x.taskUID == iID && !x.cancelled);\r\n\t\tif (itemCraftTask == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\titemCraftTask.cancelled = true;\r\n\t\tif (owner == null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tInterface.CallHook(\"OnItemCraftCancelled\", itemCraftTask, this);\r\n\t\towner.Command(\"note.craft_done\", itemCraftTask.taskUID, 0);\r\n\t\tif (itemCraftTask.takenItems != null && itemCraftTask.takenItems.Count > 0)\r\n\t\t{\r\n\t\t\tforeach (Item takenItem in itemCraftTask.takenItems)\r\n\t\t\t{\r\n\t\t\t\tif (takenItem != null && takenItem.amount > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (takenItem.IsBlueprint() && takenItem.blueprintTargetDef == itemCraftTask.blueprint.targetItem)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttakenItem.UseItem(itemCraftTask.numCrafted);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (takenItem.amount > 0 && !takenItem.MoveToContainer(owner.inventory.containerMain))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttakenItem.Drop(owner.inventory.containerMain.dropPosition + UnityEngine.Random.value * Vector3.down + UnityEngine.Random.insideUnitSphere, owner.inventory.containerMain.dropVelocity);\r\n\t\t\t\t\t\towner.Command(\"note.inv\", takenItem.info.itemid, -takenItem.amount);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\titemCraftTask.takenItems.Clear();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnPhoneDialTimedOut","Parameters":"(PhoneController,PhoneController,BasePlayer)","ClassName":"PhoneController","MethodCode":"\r\n\tprivate void TimeOutDialing()\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnPhoneDialTimeout\", activeCallTo, this, activeCallTo.currentPlayer) == null)\r\n\t\t{\r\n\t\t\tif (activeCallTo != null)\r\n\t\t\t{\r\n\t\t\t\tactiveCallTo.ServerPlayAnsweringMessage(this);\r\n\t\t\t}\r\n\t\t\tSetPhoneState(Telephone.CallState.Idle);\r\n\t\t\tInterface.CallHook(\"OnPhoneDialTimedOut\", activeCallTo, this, activeCallTo.currentPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnBookmarkControlEnded","Parameters":"(ComputerStation,BasePlayer,BaseEntity)","ClassName":"ComputerStation","MethodCode":"\r\n\tpublic void StopControl(BasePlayer ply)\r\n\t{\r\n\t\tBaseEntity baseEntity = currentlyControllingEnt.Get(serverside: true);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnBookmarkControlEnd\", this, ply, baseEntity) != null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbaseEntity.GetComponent<IRemoteControllable>().StopControl(new CameraViewerId(currentPlayerID, 0L));\r\n\t\t}\r\n\t\tif ((bool)ply)\r\n\t\t{\r\n\t\t\tply.net.SwitchSecondaryGroup(null);\r\n\t\t}\r\n\t\tcurrentlyControllingEnt.uid = default(NetworkableId);\r\n\t\tcurrentPlayerID = 0uL;\r\n\t\tSetFlag(Flags.Reserved2, b: false, recursive: false, networkupdate: false);\r\n\t\tSendNetworkUpdate();\r\n\t\tSendControlBookmarks(ply);\r\n\t\tCancelInvoke(ControlCheck);\r\n\t\tCancelInvoke(CheckCCTVAchievement);\r\n\t\tInterface.CallHook(\"OnBookmarkControlEnded\", this, ply, baseEntity);\r\n\t}\r\n"},{"Name":"IOnCupboardAuthorize","Parameters":"(ulong,BasePlayer,BuildingPrivlidge)","ClassName":"BuildingPrivlidge","MethodCode":"\r\n\t[RPC_Server]\r\n\t[RPC_Server.IsVisible(3f)]\r\n\tprivate void AddAuthorize(RPCMessage rpc)\r\n\t{\r\n\t\tif (rpc.player.CanInteract() && CanAdministrate(rpc.player))\r\n\t\t{\r\n\t\t\tulong num = rpc.read.UInt64();\r\n\t\t\tif (Interface.CallHook(\"IOnCupboardAuthorize\", num, rpc.player, this) == null)\r\n\t\t\t{\r\n\t\t\t\tAddPlayer(rpc.player, num);\r\n\t\t\t\tSendNetworkUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnFishingRodCast","Parameters":"(BaseFishingRod,BasePlayer,Item)","ClassName":"BaseFishingRod","MethodCode":"\r\n\t[RPC_Server.IsActiveItem]\r\n\t[RPC_Server]\r\n\tprivate void Server_RequestCast(RPCMessage msg)\r\n\t{\r\n\t\tVector3 pos = msg.read.Vector3();\r\n\t\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\t\tItem currentLure = GetCurrentLure();\r\n\t\tif (currentLure == null)\r\n\t\t{\r\n\t\t\tFailedCast(FailReason.NoLure);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!EvaluateFishingPosition(ref pos, ownerPlayer, out var reason, out surfaceBody))\r\n\t\t{\r\n\t\t\tFailedCast(reason);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tItemModCompostable component = (ItemModCompostable)Interface.CallHook(\"CanCastFishingRod\", ownerPlayer, this, currentLure, pos);\r\n\t\tif (!(component is bool) || (bool)(object)component)\r\n\t\t{\r\n\t\t\tFishingBobber component2 = base.gameManager.CreateEntity(FishingBobberRef.resourcePath, base.transform.position + Vector3.up * 2.8f + ownerPlayer.eyes.BodyForward() * 1.8f, GetOwnerPlayer().ServerRotation).GetComponent<FishingBobber>();\r\n\t\t\tcomponent2.transform.forward = GetOwnerPlayer().eyes.BodyForward();\r\n\t\t\tcomponent2.Spawn();\r\n\t\t\tcomponent2.InitialiseBobber(ownerPlayer, surfaceBody, pos, 150f);\r\n\t\t\tint usedLureAmount = 0;\r\n\t\t\tif (FishLookup.Instance != null)\r\n\t\t\t{\r\n\t\t\t\tcurrentFishTarget = FishLookup.Instance.GetFish(component2.transform.position, surfaceBody, currentLure, out fishableModifier, lastFish, out usedLureAmount);\r\n\t\t\t}\r\n\t\t\tlureUsed = currentLure.info;\r\n\t\t\tcurrentLure.UseItem(usedLureAmount);\r\n\t\t\tlastFish = fishableModifier;\r\n\t\t\tcurrentBobber.Set(component2);\r\n\t\t\tClientRPC(RpcTarget.NetworkGroup(\"Client_ReceiveCastPoint\"), component2.net.ID);\r\n\t\t\townerPlayer.SignalBroadcast(Signal.Attack);\r\n\t\t\tcatchTime = (ImmediateHook ? 0f : UnityEngine.Random.Range(10f, 20f));\r\n\t\t\tcatchTime = (float)catchTime * fishableModifier.CatchWaitTimeMultiplier;\r\n\t\t\tfloat val = (lureUsed.TryGetComponent<ItemModCompostable>(out component) ? component.BaitValue : 0f);\r\n\t\t\tval = Mathx.RemapValClamped(val, 0f, 20f, 1f, 10f);\r\n\t\t\tcatchTime = Mathf.Clamp((float)catchTime - val, 3f, 20f);\r\n\t\t\tplayerStartPosition = ownerPlayer.transform.position;\r\n\t\t\tSetFlag(Flags.Busy, b: true);\r\n\t\t\tCurrentState = CatchState.Waiting;\r\n\t\t\tInvokeRepeating(CatchProcess, 0f, 0f);\r\n\t\t\tinQueue = false;\r\n\t\t\tInterface.CallHook(\"OnFishingRodCast\", this, ownerPlayer, currentLure);\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnRunCommandLine","Parameters":"()","ClassName":"ConsoleSystem","MethodCode":"\r\n\tpublic static void UpdateValuesFromCommandLine()\r\n\t{\r\n\t\tif (Interface.CallHook(\"IOnRunCommandLine\") != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tforeach (KeyValuePair<string, string> @switch in Facepunch.CommandLine.GetSwitches())\r\n\t\t{\r\n\t\t\tstring text = @switch.Value;\r\n\t\t\tif (text == \"\")\r\n\t\t\t{\r\n\t\t\t\ttext = \"1\";\r\n\t\t\t}\r\n\t\t\tstring strCommand = @switch.Key.Substring(1);\r\n\t\t\tRun(Option.Unrestricted, strCommand, text);\r\n\t\t}\r\n\t}\r\n"},{"Name":"IOnServerCommand","Parameters":"(ConsoleSystem.Arg)","ClassName":"ConsoleSystem","MethodCode":"\r\n\tprivate static bool Internal(Arg arg)\r\n\t{\r\n\t\tif (arg.Invalid)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"IOnServerCommand\", arg);\r\n\t\tif (obj is bool)\r\n\t\t{\r\n\t\t\treturn (bool)obj;\r\n\t\t}\r\n\t\tif (!arg.HasPermission())\r\n\t\t{\r\n\t\t\targ.ReplyWith(\"You cannot run this command\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"ConsoleSystem: \" + arg.cmd.FullName))\r\n\t\t\t{\r\n\t\t\t\targ.cmd.Call(arg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\targ.ReplyWith(\"Error: \" + arg.cmd.FullName + \" - \" + ex.Message + \" (\" + ex.Source + \")\");\r\n\t\t\tDebug.LogException(ex);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (arg.cmd.Variable && arg.cmd.GetOveride != null && string.IsNullOrWhiteSpace(arg.Reply))\r\n\t\t{\r\n\t\t\tstring @string = arg.cmd.String;\r\n\t\t\tstring text = (arg.cmd.Variable ? arg.cmd.String : \"\");\r\n\t\t\tif (text != @string)\r\n\t\t\t{\r\n\t\t\t\targ.ReplyWith($\"{arg.cmd.FullName}: changed from {Facepunch.Extend.StringExtensions.QuoteSafe(text)} to {Facepunch.Extend.StringExtensions.QuoteSafe(@string)}\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\targ.ReplyWith($\"{arg.cmd.FullName}: {Facepunch.Extend.StringExtensions.QuoteSafe(@string)}\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnClientDisconnected","Parameters":"(Network.Connection,string)","ClassName":"Server","MethodCode":"\r\n\tprotected void OnDisconnected(string strReason, Connection cn)\r\n\t{\r\n\t\tif (cn != null)\r\n\t\t{\r\n\t\t\tRecordDisconnection(cn);\r\n\t\t\tcn.connected = false;\r\n\t\t\tcn.active = false;\r\n\t\t\tif (callbackHandler != null)\r\n\t\t\t{\r\n\t\t\t\tcallbackHandler.OnDisconnected(strReason, cn);\r\n\t\t\t}\r\n\t\t\tInterface.CallHook(\"OnClientDisconnected\", cn, strReason);\r\n\t\t\tRemoveConnection(cn);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnNetworkSubscriptionsUpdate","Parameters":"(Network.Networkable,System.Collections.Generic.List<Network.Visibility.Group>,unknown)","ClassName":"Networkable","MethodCode":"\r\n\tpublic bool UpdateHighPrioritySubscriptions()\r\n\t{\r\n\t\tif (subscriber == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"UpdateHighPrioritySubscriptions\"))\r\n\t\t{\r\n\t\t\tList<Group> obj = Pool.Get<List<Group>>();\r\n\t\t\tList<Group> obj2 = Pool.Get<List<Group>>();\r\n\t\t\tsv.visibility.GetVisibleFromNear(this.group, obj2);\r\n\t\t\tAddVisibleFromNear(secondaryGroup, obj2);\r\n\t\t\tsubscriber.subscribed.Compare(obj2, obj, null, null);\r\n\t\t\tif (Interface.CallHook(\"OnNetworkSubscriptionsUpdate\", this, obj, null) == null)\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 0; i < obj.Count; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup group = obj[i];\r\n\t\t\t\t\tsubscriber.Subscribe(group);\r\n\t\t\t\t\tif (handler != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thandler.OnNetworkGroupEnter(group);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPool.FreeUnmanaged(ref obj);\r\n\t\t\tPool.FreeUnmanaged(ref obj2);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnNetworkSubscriptionsUpdate","Parameters":"(Network.Networkable,System.Collections.Generic.List<Network.Visibility.Group>,System.Collections.Generic.List<Network.Visibility.Group>)","ClassName":"Networkable","MethodCode":"\r\n\tpublic bool UpdateSubscriptions(int removeLimit, int addLimit)\r\n\t{\r\n\t\tif (!updateSubscriptions)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (subscriber == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tusing (TimeWarning.New(\"UpdateSubscriptions\"))\r\n\t\t{\r\n\t\t\tupdateSubscriptions = false;\r\n\t\t\tList<Group> obj = Pool.Get<List<Group>>();\r\n\t\t\tList<Group> obj2 = Pool.Get<List<Group>>();\r\n\t\t\tList<Group> obj3 = Pool.Get<List<Group>>();\r\n\t\t\tsv.visibility.GetVisibleFromFar(this.group, obj3);\r\n\t\t\tAddVisibleFromNear(secondaryGroup, obj3);\r\n\t\t\tsubscriber.subscribed.Compare(obj3, obj, obj2, null);\r\n\t\t\tif (Interface.CallHook(\"OnNetworkSubscriptionsUpdate\", this, obj, obj2) == null)\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 0; i < obj2.Count; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup group = obj2[i];\r\n\t\t\t\t\tif (removeLimit > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubscriber.Unsubscribe(group);\r\n\t\t\t\t\t\tif (handler != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler.OnNetworkGroupLeave(group);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tremoveLimit -= group.networkables.Count;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tupdateSubscriptions = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int j = 0; j < obj.Count; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup group2 = obj[j];\r\n\t\t\t\t\tif (addLimit > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubscriber.Subscribe(group2);\r\n\t\t\t\t\t\tif (handler != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler.OnNetworkGroupEnter(group2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\taddLimit -= group2.networkables.Count;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tupdateSubscriptions = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPool.FreeUnmanaged(ref obj);\r\n\t\t\tPool.FreeUnmanaged(ref obj2);\r\n\t\t\tPool.FreeUnmanaged(ref obj3);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnGroupCreated","Parameters":"(string,string,int)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"CreateGroup\")]\r\n\tpublic bool CreateGroup(string groupName, string groupTitle, int groupRank)\r\n\t{\r\n\t\tif (GroupExists(groupName) || string.IsNullOrEmpty(groupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tGroupData value = new GroupData\r\n\t\t{\r\n\t\t\tTitle = groupTitle,\r\n\t\t\tRank = groupRank\r\n\t\t};\r\n\t\tgroupsData.Add(groupName, value);\r\n\t\tInterface.CallHook(\"OnGroupCreated\", groupName, groupTitle, groupRank);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnUserNameUpdated","Parameters":"(string,string,string)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"UpdateNickname\")]\r\n\tpublic void UpdateNickname(string playerId, string playerName)\r\n\t{\r\n\t\tif (UserExists(playerId))\r\n\t\t{\r\n\t\t\tUserData userData = GetUserData(playerId);\r\n\t\t\tstring lastSeenNickname = userData.LastSeenNickname;\r\n\t\t\tstring obj = playerName.Sanitize();\r\n\t\t\tuserData.LastSeenNickname = playerName.Sanitize();\r\n\t\t\tInterface.CallHook(\"OnUserNameUpdated\", playerId, lastSeenNickname, obj);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnGroupRankSet","Parameters":"(string,int)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"SetGroupRank\")]\r\n\tpublic bool SetGroupRank(string groupName, int groupRank)\r\n\t{\r\n\t\tif (!GroupExists(groupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!groupsData.TryGetValue(groupName, out var value))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (value.Rank == groupRank)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tvalue.Rank = groupRank;\r\n\t\tInterface.CallHook(\"OnGroupRankSet\", groupName, groupRank);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnGroupTitleSet","Parameters":"(string,string)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"SetGroupTitle\")]\r\n\tpublic bool SetGroupTitle(string groupName, string groupTitle)\r\n\t{\r\n\t\tif (!GroupExists(groupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!groupsData.TryGetValue(groupName, out var value))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (value.Title == groupTitle)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tvalue.Title = groupTitle;\r\n\t\tInterface.CallHook(\"OnGroupTitleSet\", groupName, groupTitle);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnPermissionRegistered","Parameters":"(string,Oxide.Core.Plugins.Plugin)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"RegisterPermission\")]\r\n\tpublic void RegisterPermission(string permission, Plugin owner)\r\n\t{\r\n\t\tif (string.IsNullOrEmpty(permission))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (PermissionExists(permission))\r\n\t\t{\r\n\t\t\tInterface.Oxide.LogWarning(\"Duplicate permission registered '{0}' (by plugin '{1}')\", permission, owner.Title);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!registeredPermissions.TryGetValue(owner, out var value))\r\n\t\t{\r\n\t\t\tvalue = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\r\n\t\t\tregisteredPermissions.Add(owner, value);\r\n\t\t\towner.OnRemovedFromManager.Add(owner_OnRemovedFromManager);\r\n\t\t}\r\n\t\tvalue.Add(permission);\r\n\t\tInterface.CallHook(\"OnPermissionRegistered\", permission, owner);\r\n\t\tif (!permission.StartsWith(owner.Name + \".\", StringComparison.OrdinalIgnoreCase) && !owner.IsCorePlugin)\r\n\t\t{\r\n\t\t\tInterface.Oxide.LogWarning(\"Missing plugin name prefix '{0}' for permission '{1}' (by plugin '{2}')\", owner.Name.ToLower(), permission, owner.Title);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnGroupParentSet","Parameters":"(string,string)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"SetGroupParent\")]\r\n\tpublic bool SetGroupParent(string groupName, string parentGroupName)\r\n\t{\r\n\t\tif (!GroupExists(groupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!groupsData.TryGetValue(groupName, out var value))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (string.IsNullOrEmpty(parentGroupName))\r\n\t\t{\r\n\t\t\tvalue.ParentGroup = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!GroupExists(parentGroupName) || groupName.Equals(parentGroupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!string.IsNullOrEmpty(value.ParentGroup) && value.ParentGroup.Equals(parentGroupName))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (HasCircularParent(groupName, parentGroupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvalue.ParentGroup = parentGroupName;\r\n\t\tInterface.CallHook(\"OnGroupParentSet\", groupName, parentGroupName);\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnGroupDeleted","Parameters":"(string)","ClassName":"Permission","MethodCode":"\r\n\t[LibraryFunction(\"RemoveGroup\")]\r\n\tpublic bool RemoveGroup(string groupName)\r\n\t{\r\n\t\tif (!GroupExists(groupName))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tbool flag = groupsData.Remove(groupName);\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tforeach (GroupData item in groupsData.Values.Where((GroupData g) => g.ParentGroup == groupName))\r\n\t\t\t{\r\n\t\t\t\titem.ParentGroup = string.Empty;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (usersData.Values.Aggregate(seed: false, (bool current, UserData userData) => current | userData.Groups.Remove(groupName)))\r\n\t\t{\r\n\t\t\tSaveUsers();\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnGroupDeleted\", groupName);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnDestroyUI","Parameters":"(BasePlayer,string)","ClassName":"CuiHelper","MethodCode":"\r\n\tpublic static bool DestroyUi(BasePlayer player, string elem)\r\n\t{\r\n\t\tif (player?.net != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnDestroyUI\", player, elem);\r\n\t\t\tCommunityEntity.ServerInstance.ClientRPC(RpcTarget.Player(\"DestroyUI\", player.net.connection), elem);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnUserCommand","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer,string,string[])","ClassName":"RustCore","MethodCode":"\r\n\tprivate void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix)\r\n\t{\r\n\t\tif (basePlayer == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = message.Replace(\"\\n\", \"\").Replace(\"\\r\", \"\").Trim();\r\n\t\tif (string.IsNullOrEmpty(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tParseCommand(text.Substring(commandPrefix.Length), out var command, out var args);\r\n\t\tif (command == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer, command, args);\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer.IPlayer, command, args);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerCommand\", basePlayer, command, args);\r\n\t\tobject obj2 = Interface.CallHook(\"OnUserCommand\", basePlayer.IPlayer, command, args);\r\n\t\tif (((obj == null) ? obj2 : obj) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (!Covalence.CommandSystem.HandleChatMessage(basePlayer.IPlayer, text) && !cmdlib.HandleChatCommand(basePlayer, command, args) && Interface.Oxide.Config.Options.Modded)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.IPlayer.Reply(string.Format(lang.GetMessage(\"UnknownCommand\", this, basePlayer.IPlayer.Id), command));\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tException ex2 = ex;\r\n\t\t\tstring text2 = string.Empty;\r\n\t\t\tstring empty = string.Empty;\r\n\t\t\tStringBuilder stringBuilder = new StringBuilder();\r\n\t\t\twhile (ex2 != null)\r\n\t\t\t{\r\n\t\t\t\tstring text3 = ex2.GetType().Name;\r\n\t\t\t\ttext2 = (text3 + \": \" + ex2.Message).TrimEnd(' ', ':');\r\n\t\t\t\tstringBuilder.AppendLine(ex2.StackTrace);\r\n\t\t\t\tif (ex2.InnerException != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tstringBuilder.AppendLine(\"Rethrow as \" + text3);\r\n\t\t\t\t}\r\n\t\t\t\tex2 = ex2.InnerException;\r\n\t\t\t}\r\n\t\t\tStackTrace stackTrace = new StackTrace(ex, 0, fNeedFileInfo: true);\r\n\t\t\tfor (int i = 0; i < stackTrace.FrameCount; i++)\r\n\t\t\t{\r\n\t\t\t\tMethodBase method = stackTrace.GetFrame(i).GetMethod();\r\n\t\t\t\tif ((object)method != null && (object)method.DeclaringType != null && method.DeclaringType.Namespace == \"Oxide.Plugins\")\r\n\t\t\t\t{\r\n\t\t\t\t\tempty = method.DeclaringType.Name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tInterface.Oxide.LogError(string.Format(\"Failed to run command '/{0}' on plugin '{1}'. ({2}){3}{4}\", command, empty, text2.Replace(Environment.NewLine, \" \"), Environment.NewLine, stackTrace));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnApplicationCommand","Parameters":"(BasePlayer,string,string[])","ClassName":"RustCore","MethodCode":"\r\n\tprivate void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix)\r\n\t{\r\n\t\tif (basePlayer == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = message.Replace(\"\\n\", \"\").Replace(\"\\r\", \"\").Trim();\r\n\t\tif (string.IsNullOrEmpty(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tParseCommand(text.Substring(commandPrefix.Length), out var command, out var args);\r\n\t\tif (command == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer, command, args);\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer.IPlayer, command, args);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerCommand\", basePlayer, command, args);\r\n\t\tobject obj2 = Interface.CallHook(\"OnUserCommand\", basePlayer.IPlayer, command, args);\r\n\t\tif (((obj == null) ? obj2 : obj) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (!Covalence.CommandSystem.HandleChatMessage(basePlayer.IPlayer, text) && !cmdlib.HandleChatCommand(basePlayer, command, args) && Interface.Oxide.Config.Options.Modded)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.IPlayer.Reply(string.Format(lang.GetMessage(\"UnknownCommand\", this, basePlayer.IPlayer.Id), command));\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tException ex2 = ex;\r\n\t\t\tstring text2 = string.Empty;\r\n\t\t\tstring empty = string.Empty;\r\n\t\t\tStringBuilder stringBuilder = new StringBuilder();\r\n\t\t\twhile (ex2 != null)\r\n\t\t\t{\r\n\t\t\t\tstring text3 = ex2.GetType().Name;\r\n\t\t\t\ttext2 = (text3 + \": \" + ex2.Message).TrimEnd(' ', ':');\r\n\t\t\t\tstringBuilder.AppendLine(ex2.StackTrace);\r\n\t\t\t\tif (ex2.InnerException != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tstringBuilder.AppendLine(\"Rethrow as \" + text3);\r\n\t\t\t\t}\r\n\t\t\t\tex2 = ex2.InnerException;\r\n\t\t\t}\r\n\t\t\tStackTrace stackTrace = new StackTrace(ex, 0, fNeedFileInfo: true);\r\n\t\t\tfor (int i = 0; i < stackTrace.FrameCount; i++)\r\n\t\t\t{\r\n\t\t\t\tMethodBase method = stackTrace.GetFrame(i).GetMethod();\r\n\t\t\t\tif ((object)method != null && (object)method.DeclaringType != null && method.DeclaringType.Namespace == \"Oxide.Plugins\")\r\n\t\t\t\t{\r\n\t\t\t\t\tempty = method.DeclaringType.Name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tInterface.Oxide.LogError(string.Format(\"Failed to run command '/{0}' on plugin '{1}'. ({2}){3}{4}\", command, empty, text2.Replace(Environment.NewLine, \" \"), Environment.NewLine, stackTrace));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerLanguageChanged","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnPlayerSetInfo\")]\r\n\tprivate void OnPlayerSetInfo(Connection connection, string key, string val)\r\n\t{\r\n\t\tif (!(key == \"global.language\"))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlang.SetLanguage(val, connection.userid.ToString());\r\n\t\tBasePlayer basePlayer = connection.player as BasePlayer;\r\n\t\tif (basePlayer != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerLanguageChanged\", basePlayer, val);\r\n\t\t\tif (basePlayer.IPlayer != null)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnPlayerLanguageChanged\", basePlayer.IPlayer, val);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerLanguageChanged","Parameters":"(BasePlayer,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnPlayerSetInfo\")]\r\n\tprivate void OnPlayerSetInfo(Connection connection, string key, string val)\r\n\t{\r\n\t\tif (!(key == \"global.language\"))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlang.SetLanguage(val, connection.userid.ToString());\r\n\t\tBasePlayer basePlayer = connection.player as BasePlayer;\r\n\t\tif (basePlayer != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnPlayerLanguageChanged\", basePlayer, val);\r\n\t\t\tif (basePlayer.IPlayer != null)\r\n\t\t\t{\r\n\t\t\t\tInterface.CallHook(\"OnPlayerLanguageChanged\", basePlayer.IPlayer, val);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnUserRespawn","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnPlayerRespawn\")]\r\n\tprivate object OnPlayerRespawn(BasePlayer basePlayer)\r\n\t{\r\n\t\tIPlayer iPlayer = basePlayer.IPlayer;\r\n\t\tif (iPlayer == null)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn Interface.CallHook(\"OnUserRespawn\", iPlayer);\r\n\t}\r\n"},{"Name":"OnApplicationCommand","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer,string,string[])","ClassName":"RustCore","MethodCode":"\r\n\tprivate void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix)\r\n\t{\r\n\t\tif (basePlayer == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = message.Replace(\"\\n\", \"\").Replace(\"\\r\", \"\").Trim();\r\n\t\tif (string.IsNullOrEmpty(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tParseCommand(text.Substring(commandPrefix.Length), out var command, out var args);\r\n\t\tif (command == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer, command, args);\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer.IPlayer, command, args);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerCommand\", basePlayer, command, args);\r\n\t\tobject obj2 = Interface.CallHook(\"OnUserCommand\", basePlayer.IPlayer, command, args);\r\n\t\tif (((obj == null) ? obj2 : obj) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (!Covalence.CommandSystem.HandleChatMessage(basePlayer.IPlayer, text) && !cmdlib.HandleChatCommand(basePlayer, command, args) && Interface.Oxide.Config.Options.Modded)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.IPlayer.Reply(string.Format(lang.GetMessage(\"UnknownCommand\", this, basePlayer.IPlayer.Id), command));\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tException ex2 = ex;\r\n\t\t\tstring text2 = string.Empty;\r\n\t\t\tstring empty = string.Empty;\r\n\t\t\tStringBuilder stringBuilder = new StringBuilder();\r\n\t\t\twhile (ex2 != null)\r\n\t\t\t{\r\n\t\t\t\tstring text3 = ex2.GetType().Name;\r\n\t\t\t\ttext2 = (text3 + \": \" + ex2.Message).TrimEnd(' ', ':');\r\n\t\t\t\tstringBuilder.AppendLine(ex2.StackTrace);\r\n\t\t\t\tif (ex2.InnerException != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tstringBuilder.AppendLine(\"Rethrow as \" + text3);\r\n\t\t\t\t}\r\n\t\t\t\tex2 = ex2.InnerException;\r\n\t\t\t}\r\n\t\t\tStackTrace stackTrace = new StackTrace(ex, 0, fNeedFileInfo: true);\r\n\t\t\tfor (int i = 0; i < stackTrace.FrameCount; i++)\r\n\t\t\t{\r\n\t\t\t\tMethodBase method = stackTrace.GetFrame(i).GetMethod();\r\n\t\t\t\tif ((object)method != null && (object)method.DeclaringType != null && method.DeclaringType.Namespace == \"Oxide.Plugins\")\r\n\t\t\t\t{\r\n\t\t\t\t\tempty = method.DeclaringType.Name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tInterface.Oxide.LogError(string.Format(\"Failed to run command '/{0}' on plugin '{1}'. ({2}){3}{4}\", command, empty, text2.Replace(Environment.NewLine, \" \"), Environment.NewLine, stackTrace));\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnRconCommand","Parameters":"(System.Net.IPAddress,string,string[])","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnRconMessage\")]\r\n\tprivate object IOnRconMessage(IPAddress ipAddress, string command)\r\n\t{\r\n\t\tif (ipAddress != null && !string.IsNullOrEmpty(command))\r\n\t\t{\r\n\t\t\tRemoteMessage message = RemoteMessage.GetMessage(command);\r\n\t\t\tif (string.IsNullOrEmpty(message?.Message))\r\n\t\t\t{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnRconMessage\", ipAddress, message) != null)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tstring[] array = Oxide.Core.CommandLine.Split(message.Message);\r\n\t\t\tif (array.Length >= 1)\r\n\t\t\t{\r\n\t\t\t\tstring obj = array[0].ToLower();\r\n\t\t\t\tstring[] obj2 = array.Skip(1).ToArray();\r\n\t\t\t\tif (Interface.CallHook(\"OnRconCommand\", ipAddress, obj, obj2) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnEntityTakeDamage","Parameters":"(BaseCombatEntity,HitInfo)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnBaseCombatEntityHurt\")]\r\n\tprivate object IOnBaseCombatEntityHurt(BaseCombatEntity entity, HitInfo hitInfo)\r\n\t{\r\n\t\tif (!(entity is BasePlayer))\r\n\t\t{\r\n\t\t\treturn Interface.CallHook(\"OnEntityTakeDamage\", entity, hitInfo);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnUserRespawned","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnPlayerRespawned\")]\r\n\tprivate void OnPlayerRespawned(BasePlayer basePlayer)\r\n\t{\r\n\t\tIPlayer iPlayer = basePlayer.IPlayer;\r\n\t\tif (iPlayer != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnUserRespawned\", iPlayer);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnUserDisconnected","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnPlayerDisconnected\")]\r\n\tprivate void OnPlayerDisconnected(BasePlayer basePlayer, string reason)\r\n\t{\r\n\t\tIPlayer iPlayer = basePlayer.IPlayer;\r\n\t\tif (iPlayer != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnUserDisconnected\", iPlayer, reason);\r\n\t\t}\r\n\t\tCovalence.PlayerManager.PlayerDisconnected(basePlayer);\r\n\t}\r\n"},{"Name":"OnServerInitialized","Parameters":"(bool)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnServerInitialized\")]\r\n\tprivate void IOnServerInitialized()\r\n\t{\r\n\t\tif (!serverInitialized)\r\n\t\t{\r\n\t\t\tAnalytics.Collect();\r\n\t\t\tif (!Interface.Oxide.Config.Options.Modded)\r\n\t\t\t{\r\n\t\t\t\tInterface.Oxide.LogWarning(\"The server is currently listed under Community. Please be aware that Facepunch only allows admin tools (that do not affect gameplay) under the Community section\");\r\n\t\t\t}\r\n\t\t\tserverInitialized = true;\r\n\t\t\tInterface.CallHook(\"OnServerInitialized\", serverInitialized);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnCupboardAssign","Parameters":"(BuildingPrivlidge,ulong,BasePlayer)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnCupboardAuthorize\")]\r\n\tprivate object IOnCupboardAuthorize(ulong userID, BasePlayer player, BuildingPrivlidge privlidge)\r\n\t{\r\n\t\tif (userID == (ulong)player.userID)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnCupboardAuthorize\", privlidge, player) != null)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnCupboardAssign\", privlidge, userID, player) != null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"CanUserLogin","Parameters":"(string,string,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnUserApprove\")]\r\n\tprivate object IOnUserApprove(Connection connection)\r\n\t{\r\n\t\tstring username = connection.username;\r\n\t\tstring text = connection.userid.ToString();\r\n\t\tstring obj = Regex.Replace(connection.ipaddress, ipPattern, \"\");\r\n\t\tuint authLevel = connection.authLevel;\r\n\t\tif (permission.IsLoaded)\r\n\t\t{\r\n\t\t\tpermission.UpdateNickname(text, username);\r\n\t\t\tOxideConfig.DefaultGroups defaultGroups = Interface.Oxide.Config.Options.DefaultGroups;\r\n\t\t\tif (!permission.UserHasGroup(text, defaultGroups.Players))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Players);\r\n\t\t\t}\r\n\t\t\tif (authLevel >= 2 && !permission.UserHasGroup(text, defaultGroups.Administrators))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Administrators);\r\n\t\t\t}\r\n\t\t}\r\n\t\tCovalence.PlayerManager.PlayerJoin(connection.userid, username);\r\n\t\tobject obj2 = Interface.CallHook(\"CanClientLogin\", connection);\r\n\t\tobject obj3 = Interface.CallHook(\"CanUserLogin\", username, text, obj);\r\n\t\tobject obj4 = ((obj2 == null) ? obj3 : obj2);\r\n\t\tif (obj4 is string || (obj4 is bool && !(bool)obj4))\r\n\t\t{\r\n\t\t\tConnectionAuth.Reject(connection, (obj4 is string) ? obj4.ToString() : lang.GetMessage(\"ConnectionRejected\", this, text));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tobject obj5 = Interface.CallHook(\"OnUserApprove\", connection);\r\n\t\tobject result = Interface.CallHook(\"OnUserApproved\", username, text, obj);\r\n\t\tif (obj5 != null)\r\n\t\t{\r\n\t\t\treturn obj5;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnPlayerChat","Parameters":"(BasePlayer,string,ConVar.Chat.ChatChannel)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnPlayerChat\")]\r\n\tprivate object IOnPlayerChat(ulong playerId, string playerName, string message, Chat.ChatChannel channel, BasePlayer basePlayer)\r\n\t{\r\n\t\tif (string.IsNullOrEmpty(message) || message.Equals(\"text\"))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tstring chatCommandPrefix = CommandHandler.GetChatCommandPrefix(message);\r\n\t\tif (chatCommandPrefix != null)\r\n\t\t{\r\n\t\t\tTryRunPlayerCommand(basePlayer, message, chatCommandPrefix);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tmessage = message.EscapeRichText();\r\n\t\tif (basePlayer == null || !basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\treturn Interface.CallHook(\"OnPlayerOfflineChat\", playerId, playerName, message, channel);\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerChat\", basePlayer, message, channel);\r\n\t\tobject result = Interface.CallHook(\"OnUserChat\", basePlayer.IPlayer, message);\r\n\t\tif (obj != null)\r\n\t\t{\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnUserUnbanned","Parameters":"(string,string,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnServerUserRemove\")]\r\n\tprivate void OnServerUserRemove(ulong steamId)\r\n\t{\r\n\t\tif (serverInitialized && ServerUsers.users.ContainsKey(steamId) && ServerUsers.users[steamId].group == ServerUsers.UserGroup.Banned)\r\n\t\t{\r\n\t\t\tstring text = steamId.ToString();\r\n\t\t\tIPlayer player = Covalence.PlayerManager.FindPlayerById(text);\r\n\t\t\tInterface.CallHook(\"OnPlayerUnbanned\", player?.Name ?? \"Unnamed\", steamId, player?.Address ?? \"0\");\r\n\t\t\tInterface.CallHook(\"OnUserUnbanned\", player?.Name ?? \"Unnamed\", text, player?.Address ?? \"0\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanClientLogin","Parameters":"(Network.Connection)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnUserApprove\")]\r\n\tprivate object IOnUserApprove(Connection connection)\r\n\t{\r\n\t\tstring username = connection.username;\r\n\t\tstring text = connection.userid.ToString();\r\n\t\tstring obj = Regex.Replace(connection.ipaddress, ipPattern, \"\");\r\n\t\tuint authLevel = connection.authLevel;\r\n\t\tif (permission.IsLoaded)\r\n\t\t{\r\n\t\t\tpermission.UpdateNickname(text, username);\r\n\t\t\tOxideConfig.DefaultGroups defaultGroups = Interface.Oxide.Config.Options.DefaultGroups;\r\n\t\t\tif (!permission.UserHasGroup(text, defaultGroups.Players))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Players);\r\n\t\t\t}\r\n\t\t\tif (authLevel >= 2 && !permission.UserHasGroup(text, defaultGroups.Administrators))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Administrators);\r\n\t\t\t}\r\n\t\t}\r\n\t\tCovalence.PlayerManager.PlayerJoin(connection.userid, username);\r\n\t\tobject obj2 = Interface.CallHook(\"CanClientLogin\", connection);\r\n\t\tobject obj3 = Interface.CallHook(\"CanUserLogin\", username, text, obj);\r\n\t\tobject obj4 = ((obj2 == null) ? obj3 : obj2);\r\n\t\tif (obj4 is string || (obj4 is bool && !(bool)obj4))\r\n\t\t{\r\n\t\t\tConnectionAuth.Reject(connection, (obj4 is string) ? obj4.ToString() : lang.GetMessage(\"ConnectionRejected\", this, text));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tobject obj5 = Interface.CallHook(\"OnUserApprove\", connection);\r\n\t\tobject result = Interface.CallHook(\"OnUserApproved\", username, text, obj);\r\n\t\tif (obj5 != null)\r\n\t\t{\r\n\t\t\treturn obj5;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnRconMessage","Parameters":"(System.Net.IPAddress,Oxide.Core.RemoteConsole.RemoteMessage)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnRconMessage\")]\r\n\tprivate object IOnRconMessage(IPAddress ipAddress, string command)\r\n\t{\r\n\t\tif (ipAddress != null && !string.IsNullOrEmpty(command))\r\n\t\t{\r\n\t\t\tRemoteMessage message = RemoteMessage.GetMessage(command);\r\n\t\t\tif (string.IsNullOrEmpty(message?.Message))\r\n\t\t\t{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (Interface.CallHook(\"OnRconMessage\", ipAddress, message) != null)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tstring[] array = Oxide.Core.CommandLine.Split(message.Message);\r\n\t\t\tif (array.Length >= 1)\r\n\t\t\t{\r\n\t\t\t\tstring obj = array[0].ToLower();\r\n\t\t\t\tstring[] obj2 = array.Skip(1).ToArray();\r\n\t\t\t\tif (Interface.CallHook(\"OnRconCommand\", ipAddress, obj, obj2) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnPlayerBanned","Parameters":"(string,ulong,string,string,long)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnServerUserSet\")]\r\n\tprivate void OnServerUserSet(ulong steamId, ServerUsers.UserGroup group, string playerName, string reason, long expiry)\r\n\t{\r\n\t\tif (serverInitialized && group == ServerUsers.UserGroup.Banned)\r\n\t\t{\r\n\t\t\tstring text = steamId.ToString();\r\n\t\t\tIPlayer player = Covalence.PlayerManager.FindPlayerById(text);\r\n\t\t\tInterface.CallHook(\"OnPlayerBanned\", playerName, steamId, player?.Address ?? \"0\", reason, expiry);\r\n\t\t\tInterface.CallHook(\"OnUserBanned\", playerName, text, player?.Address ?? \"0\", reason, expiry);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerOfflineChat","Parameters":"(ulong,string,string,ConVar.Chat.ChatChannel)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnPlayerChat\")]\r\n\tprivate object IOnPlayerChat(ulong playerId, string playerName, string message, Chat.ChatChannel channel, BasePlayer basePlayer)\r\n\t{\r\n\t\tif (string.IsNullOrEmpty(message) || message.Equals(\"text\"))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tstring chatCommandPrefix = CommandHandler.GetChatCommandPrefix(message);\r\n\t\tif (chatCommandPrefix != null)\r\n\t\t{\r\n\t\t\tTryRunPlayerCommand(basePlayer, message, chatCommandPrefix);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tmessage = message.EscapeRichText();\r\n\t\tif (basePlayer == null || !basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\treturn Interface.CallHook(\"OnPlayerOfflineChat\", playerId, playerName, message, channel);\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerChat\", basePlayer, message, channel);\r\n\t\tobject result = Interface.CallHook(\"OnUserChat\", basePlayer.IPlayer, message);\r\n\t\tif (obj != null)\r\n\t\t{\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnNpcTarget","Parameters":"(BaseNpc,BaseEntity)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnNpcTarget\")]\r\n\tprivate object IOnNpcTarget(BaseNpc npc, BaseEntity target)\r\n\t{\r\n\t\tif (Interface.CallHook(\"OnNpcTarget\", npc, target) != null)\r\n\t\t{\r\n\t\t\tnpc.SetFact(BaseNpc.Facts.HasEnemy, 0);\r\n\t\t\tnpc.SetFact(BaseNpc.Facts.EnemyRange, 3);\r\n\t\t\tnpc.SetFact(BaseNpc.Facts.AfraidRange, 1);\r\n\t\t\tnpc.playerTargetDecisionStartTime = 0f;\r\n\t\t\treturn 0f;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnPlayerBanned","Parameters":"(Network.Connection,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnPlayerBanned\")]\r\n\tprivate void IOnPlayerBanned(Connection connection, AuthResponse status)\r\n\t{\r\n\t\tInterface.CallHook(\"OnPlayerBanned\", connection, status.ToString());\r\n\t}\r\n"},{"Name":"OnUserKicked","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnPlayerKicked\")]\r\n\tprivate void OnPlayerKicked(BasePlayer basePlayer, string reason)\r\n\t{\r\n\t\tif (basePlayer.IPlayer != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnUserKicked\", basePlayer.IPlayer, reason);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnUserConnected","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnPlayerConnected\")]\r\n\tprivate void IOnPlayerConnected(BasePlayer basePlayer)\r\n\t{\r\n\t\tlang.SetLanguage(basePlayer.net.connection.info.GetString(\"global.language\", \"en\"), basePlayer.UserIDString);\r\n\t\tbasePlayer.SendEntitySnapshot(CommunityEntity.ServerInstance);\r\n\t\tCovalence.PlayerManager.PlayerConnected(basePlayer);\r\n\t\tIPlayer player = Covalence.PlayerManager.FindPlayerById(basePlayer.UserIDString);\r\n\t\tif (player != null)\r\n\t\t{\r\n\t\t\tbasePlayer.IPlayer = player;\r\n\t\t\tInterface.CallHook(\"OnUserConnected\", player);\r\n\t\t}\r\n\t\tInterface.Oxide.CallHook(\"OnPlayerConnected\", basePlayer);\r\n\t}\r\n"},{"Name":"OnServerCommand","Parameters":"(string,string[])","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnServerCommand\")]\r\n\tprivate object IOnServerCommand(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tif (arg == null || (arg.Connection != null && arg.Player() == null))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (arg.cmd.FullName == \"chat.say\" || arg.cmd.FullName == \"chat.teamsay\" || arg.cmd.FullName == \"chat.localsay\")\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnServerCommand\", arg);\r\n\t\tobject obj2 = Interface.CallHook(\"OnServerCommand\", arg.cmd.FullName, RustCommandSystem.ExtractArgs(arg));\r\n\t\tif (((obj == null) ? obj2 : obj) != null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnLoseCondition","Parameters":"(object[])","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnLoseCondition\")]\r\n\tprivate object IOnLoseCondition(Item item, float amount)\r\n\t{\r\n\t\tobject[] array = new object[2] { item, amount };\r\n\t\tInterface.CallHook(\"OnLoseCondition\", array);\r\n\t\tamount = (float)array[1];\r\n\t\tfloat condition = item.condition;\r\n\t\titem.condition -= amount;\r\n\t\tif (item.condition <= 0f && item.condition < condition)\r\n\t\t{\r\n\t\t\titem.OnBroken();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnServerCommand","Parameters":"(ConsoleSystem.Arg)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnServerCommand\")]\r\n\tprivate object IOnServerCommand(ConsoleSystem.Arg arg)\r\n\t{\r\n\t\tif (arg == null || (arg.Connection != null && arg.Player() == null))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (arg.cmd.FullName == \"chat.say\" || arg.cmd.FullName == \"chat.teamsay\" || arg.cmd.FullName == \"chat.localsay\")\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnServerCommand\", arg);\r\n\t\tobject obj2 = Interface.CallHook(\"OnServerCommand\", arg.cmd.FullName, RustCommandSystem.ExtractArgs(arg));\r\n\t\tif (((obj == null) ? obj2 : obj) != null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnServerShutdown","Parameters":"()","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnServerShutdown\")]\r\n\tprivate void IOnServerShutdown()\r\n\t{\r\n\t\tInterface.Oxide.CallHook(\"OnServerShutdown\");\r\n\t\tInterface.Oxide.OnShutdown();\r\n\t\tCovalence.PlayerManager.SavePlayerData();\r\n\t}\r\n"},{"Name":"OnUserBanned","Parameters":"(string,string,string,string,long)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnServerUserSet\")]\r\n\tprivate void OnServerUserSet(ulong steamId, ServerUsers.UserGroup group, string playerName, string reason, long expiry)\r\n\t{\r\n\t\tif (serverInitialized && group == ServerUsers.UserGroup.Banned)\r\n\t\t{\r\n\t\t\tstring text = steamId.ToString();\r\n\t\t\tIPlayer player = Covalence.PlayerManager.FindPlayerById(text);\r\n\t\t\tInterface.CallHook(\"OnPlayerBanned\", playerName, steamId, player?.Address ?? \"0\", reason, expiry);\r\n\t\t\tInterface.CallHook(\"OnUserBanned\", playerName, text, player?.Address ?? \"0\", reason, expiry);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnEntityTakeDamage","Parameters":"(BasePlayer,HitInfo)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnBasePlayerAttacked\")]\r\n\tprivate object IOnBasePlayerAttacked(BasePlayer basePlayer, HitInfo hitInfo)\r\n\t{\r\n\t\tif (!serverInitialized || basePlayer == null || hitInfo == null || basePlayer.IsDead() || isPlayerTakingDamage || basePlayer is NPCPlayer)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (Interface.CallHook(\"OnEntityTakeDamage\", basePlayer, hitInfo) != null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tisPlayerTakingDamage = true;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tbasePlayer.OnAttacked(hitInfo);\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tisPlayerTakingDamage = false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnUserApproved","Parameters":"(string,string,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnUserApprove\")]\r\n\tprivate object IOnUserApprove(Connection connection)\r\n\t{\r\n\t\tstring username = connection.username;\r\n\t\tstring text = connection.userid.ToString();\r\n\t\tstring obj = Regex.Replace(connection.ipaddress, ipPattern, \"\");\r\n\t\tuint authLevel = connection.authLevel;\r\n\t\tif (permission.IsLoaded)\r\n\t\t{\r\n\t\t\tpermission.UpdateNickname(text, username);\r\n\t\t\tOxideConfig.DefaultGroups defaultGroups = Interface.Oxide.Config.Options.DefaultGroups;\r\n\t\t\tif (!permission.UserHasGroup(text, defaultGroups.Players))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Players);\r\n\t\t\t}\r\n\t\t\tif (authLevel >= 2 && !permission.UserHasGroup(text, defaultGroups.Administrators))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Administrators);\r\n\t\t\t}\r\n\t\t}\r\n\t\tCovalence.PlayerManager.PlayerJoin(connection.userid, username);\r\n\t\tobject obj2 = Interface.CallHook(\"CanClientLogin\", connection);\r\n\t\tobject obj3 = Interface.CallHook(\"CanUserLogin\", username, text, obj);\r\n\t\tobject obj4 = ((obj2 == null) ? obj3 : obj2);\r\n\t\tif (obj4 is string || (obj4 is bool && !(bool)obj4))\r\n\t\t{\r\n\t\t\tConnectionAuth.Reject(connection, (obj4 is string) ? obj4.ToString() : lang.GetMessage(\"ConnectionRejected\", this, text));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tobject obj5 = Interface.CallHook(\"OnUserApprove\", connection);\r\n\t\tobject result = Interface.CallHook(\"OnUserApproved\", username, text, obj);\r\n\t\tif (obj5 != null)\r\n\t\t{\r\n\t\t\treturn obj5;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnUserChat","Parameters":"(Oxide.Core.Libraries.Covalence.IPlayer,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnPlayerChat\")]\r\n\tprivate object IOnPlayerChat(ulong playerId, string playerName, string message, Chat.ChatChannel channel, BasePlayer basePlayer)\r\n\t{\r\n\t\tif (string.IsNullOrEmpty(message) || message.Equals(\"text\"))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tstring chatCommandPrefix = CommandHandler.GetChatCommandPrefix(message);\r\n\t\tif (chatCommandPrefix != null)\r\n\t\t{\r\n\t\t\tTryRunPlayerCommand(basePlayer, message, chatCommandPrefix);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tmessage = message.EscapeRichText();\r\n\t\tif (basePlayer == null || !basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\treturn Interface.CallHook(\"OnPlayerOfflineChat\", playerId, playerName, message, channel);\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerChat\", basePlayer, message, channel);\r\n\t\tobject result = Interface.CallHook(\"OnUserChat\", basePlayer.IPlayer, message);\r\n\t\tif (obj != null)\r\n\t\t{\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"OnPlayerConnected","Parameters":"(BasePlayer)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnPlayerConnected\")]\r\n\tprivate void IOnPlayerConnected(BasePlayer basePlayer)\r\n\t{\r\n\t\tlang.SetLanguage(basePlayer.net.connection.info.GetString(\"global.language\", \"en\"), basePlayer.UserIDString);\r\n\t\tbasePlayer.SendEntitySnapshot(CommunityEntity.ServerInstance);\r\n\t\tCovalence.PlayerManager.PlayerConnected(basePlayer);\r\n\t\tIPlayer player = Covalence.PlayerManager.FindPlayerById(basePlayer.UserIDString);\r\n\t\tif (player != null)\r\n\t\t{\r\n\t\t\tbasePlayer.IPlayer = player;\r\n\t\t\tInterface.CallHook(\"OnUserConnected\", player);\r\n\t\t}\r\n\t\tInterface.Oxide.CallHook(\"OnPlayerConnected\", basePlayer);\r\n\t}\r\n"},{"Name":"OnCupboardAuthorize","Parameters":"(BuildingPrivlidge,BasePlayer)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnCupboardAuthorize\")]\r\n\tprivate object IOnCupboardAuthorize(ulong userID, BasePlayer player, BuildingPrivlidge privlidge)\r\n\t{\r\n\t\tif (userID == (ulong)player.userID)\r\n\t\t{\r\n\t\t\tif (Interface.CallHook(\"OnCupboardAuthorize\", privlidge, player) != null)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (Interface.CallHook(\"OnCupboardAssign\", privlidge, userID, player) != null)\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n"},{"Name":"OnEntitySaved","Parameters":"(BaseNetworkable,BaseNetworkable.SaveInfo)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnEntitySaved\")]\r\n\tprivate void IOnEntitySaved(BaseNetworkable baseNetworkable, BaseNetworkable.SaveInfo saveInfo)\r\n\t{\r\n\t\tif (serverInitialized && saveInfo.forConnection != null)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnEntitySaved\", baseNetworkable, saveInfo);\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnPlayerCommand","Parameters":"(BasePlayer,string,string[])","ClassName":"RustCore","MethodCode":"\r\n\tprivate void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix)\r\n\t{\r\n\t\tif (basePlayer == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tstring text = message.Replace(\"\\n\", \"\").Replace(\"\\r\", \"\").Trim();\r\n\t\tif (string.IsNullOrEmpty(text))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tParseCommand(text.Substring(commandPrefix.Length), out var command, out var args);\r\n\t\tif (command == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!basePlayer.IsConnected)\r\n\t\t{\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer, command, args);\r\n\t\t\tInterface.CallHook(\"OnApplicationCommand\", basePlayer.IPlayer, command, args);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tobject obj = Interface.CallHook(\"OnPlayerCommand\", basePlayer, command, args);\r\n\t\tobject obj2 = Interface.CallHook(\"OnUserCommand\", basePlayer.IPlayer, command, args);\r\n\t\tif (((obj == null) ? obj2 : obj) != null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (!Covalence.CommandSystem.HandleChatMessage(basePlayer.IPlayer, text) && !cmdlib.HandleChatCommand(basePlayer, command, args) && Interface.Oxide.Config.Options.Modded)\r\n\t\t\t{\r\n\t\t\t\tbasePlayer.IPlayer.Reply(string.Format(lang.GetMessage(\"UnknownCommand\", this, basePlayer.IPlayer.Id), command));\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tException ex2 = ex;\r\n\t\t\tstring text2 = string.Empty;\r\n\t\t\tstring empty = string.Empty;\r\n\t\t\tStringBuilder stringBuilder = new StringBuilder();\r\n\t\t\twhile (ex2 != null)\r\n\t\t\t{\r\n\t\t\t\tstring text3 = ex2.GetType().Name;\r\n\t\t\t\ttext2 = (text3 + \": \" + ex2.Message).TrimEnd(' ', ':');\r\n\t\t\t\tstringBuilder.AppendLine(ex2.StackTrace);\r\n\t\t\t\tif (ex2.InnerException != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tstringBuilder.AppendLine(\"Rethrow as \" + text3);\r\n\t\t\t\t}\r\n\t\t\t\tex2 = ex2.InnerException;\r\n\t\t\t}\r\n\t\t\tStackTrace stackTrace = new StackTrace(ex, 0, fNeedFileInfo: true);\r\n\t\t\tfor (int i = 0; i < stackTrace.FrameCount; i++)\r\n\t\t\t{\r\n\t\t\t\tMethodBase method = stackTrace.GetFrame(i).GetMethod();\r\n\t\t\t\tif ((object)method != null && (object)method.DeclaringType != null && method.DeclaringType.Namespace == \"Oxide.Plugins\")\r\n\t\t\t\t{\r\n\t\t\t\t\tempty = method.DeclaringType.Name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tInterface.Oxide.LogError(string.Format(\"Failed to run command '/{0}' on plugin '{1}'. ({2}){3}{4}\", command, empty, text2.Replace(Environment.NewLine, \" \"), Environment.NewLine, stackTrace));\r\n\t\t}\r\n\t}\r\n"},{"Name":"CanUseUI","Parameters":"(BasePlayer,string)","ClassName":"CuiHelper","MethodCode":"\r\n\tpublic static bool AddUi(BasePlayer player, string json)\r\n\t{\r\n\t\tif (player?.net != null && Interface.CallHook(\"CanUseUI\", player, json) == null)\r\n\t\t{\r\n\t\t\tCommunityEntity.ServerInstance.ClientRPC(RpcTarget.Player(\"AddUI\", player.net.connection), json);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n"},{"Name":"OnPlayerUnbanned","Parameters":"(string,ulong,string)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"OnServerUserRemove\")]\r\n\tprivate void OnServerUserRemove(ulong steamId)\r\n\t{\r\n\t\tif (serverInitialized && ServerUsers.users.ContainsKey(steamId) && ServerUsers.users[steamId].group == ServerUsers.UserGroup.Banned)\r\n\t\t{\r\n\t\t\tstring text = steamId.ToString();\r\n\t\t\tIPlayer player = Covalence.PlayerManager.FindPlayerById(text);\r\n\t\t\tInterface.CallHook(\"OnPlayerUnbanned\", player?.Name ?? \"Unnamed\", steamId, player?.Address ?? \"0\");\r\n\t\t\tInterface.CallHook(\"OnUserUnbanned\", player?.Name ?? \"Unnamed\", text, player?.Address ?? \"0\");\r\n\t\t}\r\n\t}\r\n"},{"Name":"OnUserApprove","Parameters":"(Network.Connection)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"IOnUserApprove\")]\r\n\tprivate object IOnUserApprove(Connection connection)\r\n\t{\r\n\t\tstring username = connection.username;\r\n\t\tstring text = connection.userid.ToString();\r\n\t\tstring obj = Regex.Replace(connection.ipaddress, ipPattern, \"\");\r\n\t\tuint authLevel = connection.authLevel;\r\n\t\tif (permission.IsLoaded)\r\n\t\t{\r\n\t\t\tpermission.UpdateNickname(text, username);\r\n\t\t\tOxideConfig.DefaultGroups defaultGroups = Interface.Oxide.Config.Options.DefaultGroups;\r\n\t\t\tif (!permission.UserHasGroup(text, defaultGroups.Players))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Players);\r\n\t\t\t}\r\n\t\t\tif (authLevel >= 2 && !permission.UserHasGroup(text, defaultGroups.Administrators))\r\n\t\t\t{\r\n\t\t\t\tpermission.AddUserGroup(text, defaultGroups.Administrators);\r\n\t\t\t}\r\n\t\t}\r\n\t\tCovalence.PlayerManager.PlayerJoin(connection.userid, username);\r\n\t\tobject obj2 = Interface.CallHook(\"CanClientLogin\", connection);\r\n\t\tobject obj3 = Interface.CallHook(\"CanUserLogin\", username, text, obj);\r\n\t\tobject obj4 = ((obj2 == null) ? obj3 : obj2);\r\n\t\tif (obj4 is string || (obj4 is bool && !(bool)obj4))\r\n\t\t{\r\n\t\t\tConnectionAuth.Reject(connection, (obj4 is string) ? obj4.ToString() : lang.GetMessage(\"ConnectionRejected\", this, text));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tobject obj5 = Interface.CallHook(\"OnUserApprove\", connection);\r\n\t\tobject result = Interface.CallHook(\"OnUserApproved\", username, text, obj);\r\n\t\tif (obj5 != null)\r\n\t\t{\r\n\t\t\treturn obj5;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n"},{"Name":"CanPickupEntity","Parameters":"(BasePlayer,DoorCloser)","ClassName":"RustCore","MethodCode":"\r\n\t[HookMethod(\"ICanPickupEntity\")]\r\n\tprivate object ICanPickupEntity(BasePlayer basePlayer, DoorCloser entity)\r\n\t{\r\n\t\tobject obj = Interface.CallHook(\"CanPickupEntity\", basePlayer, entity);\r\n\t\tif (!(obj is bool) || (bool)obj)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n"},{"Name":"OnClanMemberAdded","Parameters":"(long,ulong)","ClassName":"LocalClanDatabase","MethodCode":"\r\n\tpublic bool AcceptInvite(long clanId, ulong steamId)\r\n\t{\r\n\t\tBeginTransaction();\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (DeleteInvite(clanId, steamId) && CreateMember(clanId, steamId))\r\n\t\t\t{\r\n\t\t\t\tCommit();\r\n\t\t\t\tInterface.CallHook(\"OnClanMemberAdded\", clanId, steamId);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tRollback();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\tRollback();\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n"}]